
urw_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010084  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f8  08010218  08010218  00011218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b10  08010b10  000121d4  2**0
                  CONTENTS
  4 .ARM          00000008  08010b10  08010b10  00011b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b18  08010b18  000121d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b18  08010b18  00011b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010b1c  08010b1c  00011b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08010b20  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  200001d4  08010cf4  000121d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000784  08010cf4  00012784  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d1f  00000000  00000000  00012204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003944  00000000  00000000  0002bf23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  0002f868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000117a  00000000  00000000  00030f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad9c  00000000  00000000  0003209a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e20f  00000000  00000000  0005ce36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faa55  00000000  00000000  0007b045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00175a9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074d0  00000000  00000000  00175ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0017cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080101fc 	.word	0x080101fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080101fc 	.word	0x080101fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9eb 	b.w	8001080 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b9a0 	b.w	8001080 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	460c      	mov	r4, r1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d14e      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd0:	4694      	mov	ip, r2
 8000dd2:	458c      	cmp	ip, r1
 8000dd4:	4686      	mov	lr, r0
 8000dd6:	fab2 f282 	clz	r2, r2
 8000dda:	d962      	bls.n	8000ea2 <__udivmoddi4+0xde>
 8000ddc:	b14a      	cbz	r2, 8000df2 <__udivmoddi4+0x2e>
 8000dde:	f1c2 0320 	rsb	r3, r2, #32
 8000de2:	4091      	lsls	r1, r2
 8000de4:	fa20 f303 	lsr.w	r3, r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	4319      	orrs	r1, r3
 8000dee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f f68c 	uxth.w	r6, ip
 8000dfa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e02:	fb07 1114 	mls	r1, r7, r4, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb04 f106 	mul.w	r1, r4, r6
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e1a:	f080 8112 	bcs.w	8001042 <__udivmoddi4+0x27e>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 810f 	bls.w	8001042 <__udivmoddi4+0x27e>
 8000e24:	3c02      	subs	r4, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a59      	subs	r1, r3, r1
 8000e2a:	fa1f f38e 	uxth.w	r3, lr
 8000e2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e32:	fb07 1110 	mls	r1, r7, r0, r1
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f606 	mul.w	r6, r0, r6
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x94>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e4a:	f080 80fc 	bcs.w	8001046 <__udivmoddi4+0x282>
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	f240 80f9 	bls.w	8001046 <__udivmoddi4+0x282>
 8000e54:	4463      	add	r3, ip
 8000e56:	3802      	subs	r0, #2
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e5e:	2100      	movs	r1, #0
 8000e60:	b11d      	cbz	r5, 8000e6a <__udivmoddi4+0xa6>
 8000e62:	40d3      	lsrs	r3, r2
 8000e64:	2200      	movs	r2, #0
 8000e66:	e9c5 3200 	strd	r3, r2, [r5]
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d905      	bls.n	8000e7e <__udivmoddi4+0xba>
 8000e72:	b10d      	cbz	r5, 8000e78 <__udivmoddi4+0xb4>
 8000e74:	e9c5 0100 	strd	r0, r1, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e7f5      	b.n	8000e6a <__udivmoddi4+0xa6>
 8000e7e:	fab3 f183 	clz	r1, r3
 8000e82:	2900      	cmp	r1, #0
 8000e84:	d146      	bne.n	8000f14 <__udivmoddi4+0x150>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d302      	bcc.n	8000e90 <__udivmoddi4+0xcc>
 8000e8a:	4290      	cmp	r0, r2
 8000e8c:	f0c0 80f0 	bcc.w	8001070 <__udivmoddi4+0x2ac>
 8000e90:	1a86      	subs	r6, r0, r2
 8000e92:	eb64 0303 	sbc.w	r3, r4, r3
 8000e96:	2001      	movs	r0, #1
 8000e98:	2d00      	cmp	r5, #0
 8000e9a:	d0e6      	beq.n	8000e6a <__udivmoddi4+0xa6>
 8000e9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ea0:	e7e3      	b.n	8000e6a <__udivmoddi4+0xa6>
 8000ea2:	2a00      	cmp	r2, #0
 8000ea4:	f040 8090 	bne.w	8000fc8 <__udivmoddi4+0x204>
 8000ea8:	eba1 040c 	sub.w	r4, r1, ip
 8000eac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb0:	fa1f f78c 	uxth.w	r7, ip
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ebe:	fb08 4416 	mls	r4, r8, r6, r4
 8000ec2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec6:	fb07 f006 	mul.w	r0, r7, r6
 8000eca:	4298      	cmp	r0, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x11c>
 8000ece:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ed6:	d202      	bcs.n	8000ede <__udivmoddi4+0x11a>
 8000ed8:	4298      	cmp	r0, r3
 8000eda:	f200 80cd 	bhi.w	8001078 <__udivmoddi4+0x2b4>
 8000ede:	4626      	mov	r6, r4
 8000ee0:	1a1c      	subs	r4, r3, r0
 8000ee2:	fa1f f38e 	uxth.w	r3, lr
 8000ee6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eea:	fb08 4410 	mls	r4, r8, r0, r4
 8000eee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ef2:	fb00 f707 	mul.w	r7, r0, r7
 8000ef6:	429f      	cmp	r7, r3
 8000ef8:	d908      	bls.n	8000f0c <__udivmoddi4+0x148>
 8000efa:	eb1c 0303 	adds.w	r3, ip, r3
 8000efe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f02:	d202      	bcs.n	8000f0a <__udivmoddi4+0x146>
 8000f04:	429f      	cmp	r7, r3
 8000f06:	f200 80b0 	bhi.w	800106a <__udivmoddi4+0x2a6>
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	1bdb      	subs	r3, r3, r7
 8000f0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f12:	e7a5      	b.n	8000e60 <__udivmoddi4+0x9c>
 8000f14:	f1c1 0620 	rsb	r6, r1, #32
 8000f18:	408b      	lsls	r3, r1
 8000f1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f24:	fa04 f301 	lsl.w	r3, r4, r1
 8000f28:	ea43 030c 	orr.w	r3, r3, ip
 8000f2c:	40f4      	lsrs	r4, r6
 8000f2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f32:	0c38      	lsrs	r0, r7, #16
 8000f34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f38:	fbb4 fef0 	udiv	lr, r4, r0
 8000f3c:	fa1f fc87 	uxth.w	ip, r7
 8000f40:	fb00 441e 	mls	r4, r0, lr, r4
 8000f44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f48:	fb0e f90c 	mul.w	r9, lr, ip
 8000f4c:	45a1      	cmp	r9, r4
 8000f4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f52:	d90a      	bls.n	8000f6a <__udivmoddi4+0x1a6>
 8000f54:	193c      	adds	r4, r7, r4
 8000f56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f5a:	f080 8084 	bcs.w	8001066 <__udivmoddi4+0x2a2>
 8000f5e:	45a1      	cmp	r9, r4
 8000f60:	f240 8081 	bls.w	8001066 <__udivmoddi4+0x2a2>
 8000f64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f68:	443c      	add	r4, r7
 8000f6a:	eba4 0409 	sub.w	r4, r4, r9
 8000f6e:	fa1f f983 	uxth.w	r9, r3
 8000f72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f76:	fb00 4413 	mls	r4, r0, r3, r4
 8000f7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f82:	45a4      	cmp	ip, r4
 8000f84:	d907      	bls.n	8000f96 <__udivmoddi4+0x1d2>
 8000f86:	193c      	adds	r4, r7, r4
 8000f88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f8c:	d267      	bcs.n	800105e <__udivmoddi4+0x29a>
 8000f8e:	45a4      	cmp	ip, r4
 8000f90:	d965      	bls.n	800105e <__udivmoddi4+0x29a>
 8000f92:	3b02      	subs	r3, #2
 8000f94:	443c      	add	r4, r7
 8000f96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f9e:	eba4 040c 	sub.w	r4, r4, ip
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	46ce      	mov	lr, r9
 8000fa6:	469c      	mov	ip, r3
 8000fa8:	d351      	bcc.n	800104e <__udivmoddi4+0x28a>
 8000faa:	d04e      	beq.n	800104a <__udivmoddi4+0x286>
 8000fac:	b155      	cbz	r5, 8000fc4 <__udivmoddi4+0x200>
 8000fae:	ebb8 030e 	subs.w	r3, r8, lr
 8000fb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000fb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000fba:	40cb      	lsrs	r3, r1
 8000fbc:	431e      	orrs	r6, r3
 8000fbe:	40cc      	lsrs	r4, r1
 8000fc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e750      	b.n	8000e6a <__udivmoddi4+0xa6>
 8000fc8:	f1c2 0320 	rsb	r3, r2, #32
 8000fcc:	fa20 f103 	lsr.w	r1, r0, r3
 8000fd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fd8:	4094      	lsls	r4, r2
 8000fda:	430c      	orrs	r4, r1
 8000fdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fe0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fe4:	fa1f f78c 	uxth.w	r7, ip
 8000fe8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fec:	fb08 3110 	mls	r1, r8, r0, r3
 8000ff0:	0c23      	lsrs	r3, r4, #16
 8000ff2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ff6:	fb00 f107 	mul.w	r1, r0, r7
 8000ffa:	4299      	cmp	r1, r3
 8000ffc:	d908      	bls.n	8001010 <__udivmoddi4+0x24c>
 8000ffe:	eb1c 0303 	adds.w	r3, ip, r3
 8001002:	f100 36ff 	add.w	r6, r0, #4294967295
 8001006:	d22c      	bcs.n	8001062 <__udivmoddi4+0x29e>
 8001008:	4299      	cmp	r1, r3
 800100a:	d92a      	bls.n	8001062 <__udivmoddi4+0x29e>
 800100c:	3802      	subs	r0, #2
 800100e:	4463      	add	r3, ip
 8001010:	1a5b      	subs	r3, r3, r1
 8001012:	b2a4      	uxth	r4, r4
 8001014:	fbb3 f1f8 	udiv	r1, r3, r8
 8001018:	fb08 3311 	mls	r3, r8, r1, r3
 800101c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001020:	fb01 f307 	mul.w	r3, r1, r7
 8001024:	42a3      	cmp	r3, r4
 8001026:	d908      	bls.n	800103a <__udivmoddi4+0x276>
 8001028:	eb1c 0404 	adds.w	r4, ip, r4
 800102c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001030:	d213      	bcs.n	800105a <__udivmoddi4+0x296>
 8001032:	42a3      	cmp	r3, r4
 8001034:	d911      	bls.n	800105a <__udivmoddi4+0x296>
 8001036:	3902      	subs	r1, #2
 8001038:	4464      	add	r4, ip
 800103a:	1ae4      	subs	r4, r4, r3
 800103c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001040:	e739      	b.n	8000eb6 <__udivmoddi4+0xf2>
 8001042:	4604      	mov	r4, r0
 8001044:	e6f0      	b.n	8000e28 <__udivmoddi4+0x64>
 8001046:	4608      	mov	r0, r1
 8001048:	e706      	b.n	8000e58 <__udivmoddi4+0x94>
 800104a:	45c8      	cmp	r8, r9
 800104c:	d2ae      	bcs.n	8000fac <__udivmoddi4+0x1e8>
 800104e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001052:	eb63 0c07 	sbc.w	ip, r3, r7
 8001056:	3801      	subs	r0, #1
 8001058:	e7a8      	b.n	8000fac <__udivmoddi4+0x1e8>
 800105a:	4631      	mov	r1, r6
 800105c:	e7ed      	b.n	800103a <__udivmoddi4+0x276>
 800105e:	4603      	mov	r3, r0
 8001060:	e799      	b.n	8000f96 <__udivmoddi4+0x1d2>
 8001062:	4630      	mov	r0, r6
 8001064:	e7d4      	b.n	8001010 <__udivmoddi4+0x24c>
 8001066:	46d6      	mov	lr, sl
 8001068:	e77f      	b.n	8000f6a <__udivmoddi4+0x1a6>
 800106a:	4463      	add	r3, ip
 800106c:	3802      	subs	r0, #2
 800106e:	e74d      	b.n	8000f0c <__udivmoddi4+0x148>
 8001070:	4606      	mov	r6, r0
 8001072:	4623      	mov	r3, r4
 8001074:	4608      	mov	r0, r1
 8001076:	e70f      	b.n	8000e98 <__udivmoddi4+0xd4>
 8001078:	3e02      	subs	r6, #2
 800107a:	4463      	add	r3, ip
 800107c:	e730      	b.n	8000ee0 <__udivmoddi4+0x11c>
 800107e:	bf00      	nop

08001080 <__aeabi_idiv0>:
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <read_register16>:
	params->oversampling_temperature = BMP280_STANDARD;
	params->oversampling_humidity = BMP280_STANDARD;
	params->standby = BMP280_STANDBY_250;
}

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	@ 0x28
 8001088:	af04      	add	r7, sp, #16
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	460b      	mov	r3, r1
 800108e:	607a      	str	r2, [r7, #4]
 8001090:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800109e:	7afb      	ldrb	r3, [r7, #11]
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	8af9      	ldrh	r1, [r7, #22]
 80010a4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80010a8:	9302      	str	r3, [sp, #8]
 80010aa:	2302      	movs	r3, #2
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2301      	movs	r3, #1
 80010b6:	f002 fb27 	bl	8003708 <HAL_I2C_Mem_Read>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10b      	bne.n	80010d8 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80010c0:	7d7b      	ldrb	r3, [r7, #21]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	7d3b      	ldrb	r3, [r7, #20]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	801a      	strh	r2, [r3, #0]
		return true;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <read_register16+0x56>
	} else
		return false;
 80010d8:	2300      	movs	r3, #0

}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80010e2:	b590      	push	{r4, r7, lr}
 80010e4:	b08b      	sub	sp, #44	@ 0x2c
 80010e6:	af04      	add	r7, sp, #16
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	461a      	mov	r2, r3
 80010ee:	460b      	mov	r3, r1
 80010f0:	72fb      	strb	r3, [r7, #11]
 80010f2:	4613      	mov	r3, r2
 80010f4:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001102:	7afb      	ldrb	r3, [r7, #11]
 8001104:	b29a      	uxth	r2, r3
 8001106:	7abb      	ldrb	r3, [r7, #10]
 8001108:	b29b      	uxth	r3, r3
 800110a:	8af9      	ldrh	r1, [r7, #22]
 800110c:	f241 3488 	movw	r4, #5000	@ 0x1388
 8001110:	9402      	str	r4, [sp, #8]
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	f002 faf5 	bl	8003708 <HAL_I2C_Mem_Read>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <read_data+0x46>
		return 0;
 8001124:	2300      	movs	r3, #0
 8001126:	e000      	b.n	800112a <read_data+0x48>
	else
		return 1;
 8001128:	2301      	movs	r3, #1

}
 800112a:	4618      	mov	r0, r3
 800112c:	371c      	adds	r7, #28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd90      	pop	{r4, r7, pc}

08001132 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	461a      	mov	r2, r3
 800113e:	2188      	movs	r1, #136	@ 0x88
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff9f 	bl	8001084 <read_register16>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d06f      	beq.n	800122c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3302      	adds	r3, #2
 8001150:	461a      	mov	r2, r3
 8001152:	218a      	movs	r1, #138	@ 0x8a
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff95 	bl	8001084 <read_register16>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d065      	beq.n	800122c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3304      	adds	r3, #4
 8001164:	461a      	mov	r2, r3
 8001166:	218c      	movs	r1, #140	@ 0x8c
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff8b 	bl	8001084 <read_register16>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d05b      	beq.n	800122c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3306      	adds	r3, #6
 8001178:	461a      	mov	r2, r3
 800117a:	218e      	movs	r1, #142	@ 0x8e
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff81 	bl	8001084 <read_register16>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d051      	beq.n	800122c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3308      	adds	r3, #8
 800118c:	461a      	mov	r2, r3
 800118e:	2190      	movs	r1, #144	@ 0x90
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff77 	bl	8001084 <read_register16>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d047      	beq.n	800122c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	330a      	adds	r3, #10
 80011a0:	461a      	mov	r2, r3
 80011a2:	2192      	movs	r1, #146	@ 0x92
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff6d 	bl	8001084 <read_register16>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d03d      	beq.n	800122c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	330c      	adds	r3, #12
 80011b4:	461a      	mov	r2, r3
 80011b6:	2194      	movs	r1, #148	@ 0x94
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff63 	bl	8001084 <read_register16>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d033      	beq.n	800122c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	330e      	adds	r3, #14
 80011c8:	461a      	mov	r2, r3
 80011ca:	2196      	movs	r1, #150	@ 0x96
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff59 	bl	8001084 <read_register16>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d029      	beq.n	800122c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3310      	adds	r3, #16
 80011dc:	461a      	mov	r2, r3
 80011de:	2198      	movs	r1, #152	@ 0x98
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff4f 	bl	8001084 <read_register16>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d01f      	beq.n	800122c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3312      	adds	r3, #18
 80011f0:	461a      	mov	r2, r3
 80011f2:	219a      	movs	r1, #154	@ 0x9a
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff45 	bl	8001084 <read_register16>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d015      	beq.n	800122c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3314      	adds	r3, #20
 8001204:	461a      	mov	r2, r3
 8001206:	219c      	movs	r1, #156	@ 0x9c
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff3b 	bl	8001084 <read_register16>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00b      	beq.n	800122c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001218:	461a      	mov	r2, r3
 800121a:	219e      	movs	r1, #158	@ 0x9e
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff31 	bl	8001084 <read_register16>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <read_calibration_data+0xfa>

		return true;
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <read_calibration_data+0xfc>
	}

	return false;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f103 0218 	add.w	r2, r3, #24
 8001244:	2301      	movs	r3, #1
 8001246:	21a1      	movs	r1, #161	@ 0xa1
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff4a 	bl	80010e2 <read_data>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14b      	bne.n	80012ec <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	331a      	adds	r3, #26
 8001258:	461a      	mov	r2, r3
 800125a:	21e1      	movs	r1, #225	@ 0xe1
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff11 	bl	8001084 <read_register16>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d041      	beq.n	80012ec <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f103 021c 	add.w	r2, r3, #28
 800126e:	2301      	movs	r3, #1
 8001270:	21e3      	movs	r1, #227	@ 0xe3
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff35 	bl	80010e2 <read_data>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d136      	bne.n	80012ec <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800127e:	f107 030e 	add.w	r3, r7, #14
 8001282:	461a      	mov	r2, r3
 8001284:	21e4      	movs	r1, #228	@ 0xe4
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fefc 	bl	8001084 <read_register16>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d02c      	beq.n	80012ec <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	461a      	mov	r2, r3
 8001298:	21e5      	movs	r1, #229	@ 0xe5
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff fef2 	bl	8001084 <read_register16>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d022      	beq.n	80012ec <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80012ac:	2301      	movs	r3, #1
 80012ae:	21e7      	movs	r1, #231	@ 0xe7
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ff16 	bl	80010e2 <read_data>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d117      	bne.n	80012ec <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80012bc:	89fb      	ldrh	r3, [r7, #14]
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	89fb      	ldrh	r3, [r7, #14]
 80012ca:	121b      	asrs	r3, r3, #8
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80012dc:	89bb      	ldrh	r3, [r7, #12]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	841a      	strh	r2, [r3, #32]

		return true;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <read_hum_calibration_data+0xb8>
	}

	return false;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b088      	sub	sp, #32
 80012fa:	af04      	add	r7, sp, #16
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	70fb      	strb	r3, [r7, #3]
 8001302:	4613      	mov	r3, r2
 8001304:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	b29a      	uxth	r2, r3
 8001316:	89f9      	ldrh	r1, [r7, #14]
 8001318:	f242 7310 	movw	r3, #10000	@ 0x2710
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	2301      	movs	r3, #1
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	1cbb      	adds	r3, r7, #2
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	f002 f8da 	bl	80034e0 <HAL_I2C_Mem_Write>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <write_register8+0x40>
		return false;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <write_register8+0x42>
	else
		return true;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800134e:	2b76      	cmp	r3, #118	@ 0x76
 8001350:	d005      	beq.n	800135e <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001356:	2b77      	cmp	r3, #119	@ 0x77
 8001358:	d001      	beq.n	800135e <bmp280_init+0x1e>

		return false;
 800135a:	2300      	movs	r3, #0
 800135c:	e099      	b.n	8001492 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001364:	2301      	movs	r3, #1
 8001366:	21d0      	movs	r1, #208	@ 0xd0
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff feba 	bl	80010e2 <read_data>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <bmp280_init+0x38>
		return false;
 8001374:	2300      	movs	r3, #0
 8001376:	e08c      	b.n	8001492 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800137e:	2b58      	cmp	r3, #88	@ 0x58
 8001380:	d006      	beq.n	8001390 <bmp280_init+0x50>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001388:	2b60      	cmp	r3, #96	@ 0x60
 800138a:	d001      	beq.n	8001390 <bmp280_init+0x50>

		return false;
 800138c:	2300      	movs	r3, #0
 800138e:	e080      	b.n	8001492 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001390:	22b6      	movs	r2, #182	@ 0xb6
 8001392:	21e0      	movs	r1, #224	@ 0xe0
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ffae 	bl	80012f6 <write_register8>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <bmp280_init+0x64>
		return false;
 80013a0:	2300      	movs	r3, #0
 80013a2:	e076      	b.n	8001492 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80013a4:	f107 020c 	add.w	r2, r7, #12
 80013a8:	2301      	movs	r3, #1
 80013aa:	21f3      	movs	r1, #243	@ 0xf3
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff fe98 	bl	80010e2 <read_data>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f5      	bne.n	80013a4 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80013b8:	7b3b      	ldrb	r3, [r7, #12]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff feb5 	bl	8001132 <read_calibration_data>
 80013c8:	4603      	mov	r3, r0
 80013ca:	f083 0301 	eor.w	r3, r3, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d100      	bne.n	80013d6 <bmp280_init+0x96>
 80013d4:	e001      	b.n	80013da <bmp280_init+0x9a>
		return false;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e05b      	b.n	8001492 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80013e0:	2b60      	cmp	r3, #96	@ 0x60
 80013e2:	d10a      	bne.n	80013fa <bmp280_init+0xba>
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff26 	bl	8001236 <read_hum_calibration_data>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f083 0301 	eor.w	r3, r3, #1
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <bmp280_init+0xba>
		return false;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e04b      	b.n	8001492 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	795b      	ldrb	r3, [r3, #5]
 80013fe:	015b      	lsls	r3, r3, #5
 8001400:	b25a      	sxtb	r2, r3
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	b25b      	sxtb	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	b25b      	sxtb	r3, r3
 800140e:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	461a      	mov	r2, r3
 8001414:	21f5      	movs	r1, #245	@ 0xf5
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ff6d 	bl	80012f6 <write_register8>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <bmp280_init+0xe6>
		return false;
 8001422:	2300      	movs	r3, #0
 8001424:	e035      	b.n	8001492 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d102      	bne.n	8001434 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	78db      	ldrb	r3, [r3, #3]
 8001438:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 800143a:	b25a      	sxtb	r2, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	789b      	ldrb	r3, [r3, #2]
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	b25b      	sxtb	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b25a      	sxtb	r2, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b25b      	sxtb	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001452:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800145a:	2b60      	cmp	r3, #96	@ 0x60
 800145c:	d10d      	bne.n	800147a <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	791b      	ldrb	r3, [r3, #4]
 8001462:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001464:	7b7b      	ldrb	r3, [r7, #13]
 8001466:	461a      	mov	r2, r3
 8001468:	21f2      	movs	r1, #242	@ 0xf2
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ff43 	bl	80012f6 <write_register8>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <bmp280_init+0x13a>
			return false;
 8001476:	2300      	movs	r3, #0
 8001478:	e00b      	b.n	8001492 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800147a:	7bbb      	ldrb	r3, [r7, #14]
 800147c:	461a      	mov	r2, r3
 800147e:	21f4      	movs	r1, #244	@ 0xf4
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff38 	bl	80012f6 <write_register8>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <bmp280_init+0x150>
		return false;
 800148c:	2300      	movs	r3, #0
 800148e:	e000      	b.n	8001492 <bmp280_init+0x152>
	}

	return true;
 8001490:	2301      	movs	r3, #1
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <bmp280_force_measurement>:

bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
	uint8_t ctrl;
	if (read_data(dev, BMP280_REG_CTRL, &ctrl, 1))
 80014a2:	f107 020f 	add.w	r2, r7, #15
 80014a6:	2301      	movs	r3, #1
 80014a8:	21f4      	movs	r1, #244	@ 0xf4
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff fe19 	bl	80010e2 <read_data>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <bmp280_force_measurement+0x20>
		return false;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e015      	b.n	80014e6 <bmp280_force_measurement+0x4c>
	ctrl &= ~0b11;  // clear two lower bits
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	f023 0303 	bic.w	r3, r3, #3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	73fb      	strb	r3, [r7, #15]
	ctrl |= BMP280_MODE_FORCED;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	461a      	mov	r2, r3
 80014d2:	21f4      	movs	r1, #244	@ 0xf4
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff0e 	bl	80012f6 <write_register8>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <bmp280_force_measurement+0x4a>
		return false;
 80014e0:	2300      	movs	r3, #0
 80014e2:	e000      	b.n	80014e6 <bmp280_force_measurement+0x4c>
	}
	return true;
 80014e4:	2301      	movs	r3, #1
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <bmp280_is_measuring>:

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
	uint8_t status;
	if (read_data(dev, BMP280_REG_STATUS, &status, 1))
 80014f6:	f107 020f 	add.w	r2, r7, #15
 80014fa:	2301      	movs	r3, #1
 80014fc:	21f3      	movs	r1, #243	@ 0xf3
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fdef 	bl	80010e2 <read_data>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <bmp280_is_measuring+0x20>
		return false;
 800150a:	2300      	movs	r3, #0
 800150c:	e007      	b.n	800151e <bmp280_is_measuring+0x30>
	if (status & (1 << 3)) {
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <bmp280_is_measuring+0x2e>
		return true;
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <bmp280_is_measuring+0x30>
	}
	return false;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001526:	b480      	push	{r7}
 8001528:	b087      	sub	sp, #28
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	10da      	asrs	r2, r3, #3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001544:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001548:	12db      	asrs	r3, r3, #11
 800154a:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	111b      	asrs	r3, r3, #4
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	8812      	ldrh	r2, [r2, #0]
 8001554:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	1112      	asrs	r2, r2, #4
 800155a:	68f9      	ldr	r1, [r7, #12]
 800155c:	8809      	ldrh	r1, [r1, #0]
 800155e:	1a52      	subs	r2, r2, r1
 8001560:	fb02 f303 	mul.w	r3, r2, r3
 8001564:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800156c:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001570:	139b      	asrs	r3, r3, #14
 8001572:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	441a      	add	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	3380      	adds	r3, #128	@ 0x80
 800158a:	121b      	asrs	r3, r3, #8
}
 800158c:	4618      	mov	r0, r3
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800159c:	b0cc      	sub	sp, #304	@ 0x130
 800159e:	af00      	add	r7, sp, #0
 80015a0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 80015a4:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 80015a8:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80015ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80015b0:	17da      	asrs	r2, r3, #31
 80015b2:	461c      	mov	r4, r3
 80015b4:	4615      	mov	r5, r2
 80015b6:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80015ba:	f145 3bff 	adc.w	fp, r5, #4294967295
 80015be:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80015c2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80015c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015ca:	fb03 f102 	mul.w	r1, r3, r2
 80015ce:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80015d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	18ca      	adds	r2, r1, r3
 80015dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015e0:	fba3 8903 	umull	r8, r9, r3, r3
 80015e4:	eb02 0309 	add.w	r3, r2, r9
 80015e8:	4699      	mov	r9, r3
 80015ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80015ee:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	17da      	asrs	r2, r3, #31
 80015f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80015fa:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80015fe:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001602:	4603      	mov	r3, r0
 8001604:	fb03 f209 	mul.w	r2, r3, r9
 8001608:	460b      	mov	r3, r1
 800160a:	fb08 f303 	mul.w	r3, r8, r3
 800160e:	4413      	add	r3, r2
 8001610:	4602      	mov	r2, r0
 8001612:	fba8 1202 	umull	r1, r2, r8, r2
 8001616:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800161a:	460a      	mov	r2, r1
 800161c:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001620:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001624:	4413      	add	r3, r2
 8001626:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800162a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 800162e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8001632:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800163a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800163e:	b21b      	sxth	r3, r3
 8001640:	17da      	asrs	r2, r3, #31
 8001642:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001646:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800164a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800164e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001652:	462a      	mov	r2, r5
 8001654:	fb02 f203 	mul.w	r2, r2, r3
 8001658:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800165c:	4621      	mov	r1, r4
 800165e:	fb01 f303 	mul.w	r3, r1, r3
 8001662:	441a      	add	r2, r3
 8001664:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001668:	4621      	mov	r1, r4
 800166a:	fba3 1301 	umull	r1, r3, r3, r1
 800166e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001672:	460b      	mov	r3, r1
 8001674:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800167c:	18d3      	adds	r3, r2, r3
 800167e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001682:	f04f 0000 	mov.w	r0, #0
 8001686:	f04f 0100 	mov.w	r1, #0
 800168a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800168e:	462b      	mov	r3, r5
 8001690:	0459      	lsls	r1, r3, #17
 8001692:	4623      	mov	r3, r4
 8001694:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001698:	4623      	mov	r3, r4
 800169a:	0458      	lsls	r0, r3, #17
 800169c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80016a0:	1814      	adds	r4, r2, r0
 80016a2:	643c      	str	r4, [r7, #64]	@ 0x40
 80016a4:	414b      	adcs	r3, r1
 80016a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80016a8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80016ac:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80016b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016b4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	17da      	asrs	r2, r3, #31
 80016bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80016c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80016c4:	f04f 0000 	mov.w	r0, #0
 80016c8:	f04f 0100 	mov.w	r1, #0
 80016cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016d0:	00d9      	lsls	r1, r3, #3
 80016d2:	2000      	movs	r0, #0
 80016d4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80016d8:	1814      	adds	r4, r2, r0
 80016da:	63bc      	str	r4, [r7, #56]	@ 0x38
 80016dc:	414b      	adcs	r3, r1
 80016de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016e0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80016e4:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80016e8:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80016ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016f0:	fb03 f102 	mul.w	r1, r3, r2
 80016f4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80016f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016fc:	fb02 f303 	mul.w	r3, r2, r3
 8001700:	18ca      	adds	r2, r1, r3
 8001702:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001706:	fba3 1303 	umull	r1, r3, r3, r3
 800170a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800170e:	460b      	mov	r3, r1
 8001710:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001718:	18d3      	adds	r3, r2, r3
 800171a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800171e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001722:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001726:	b21b      	sxth	r3, r3
 8001728:	17da      	asrs	r2, r3, #31
 800172a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800172e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001732:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001736:	462b      	mov	r3, r5
 8001738:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800173c:	4642      	mov	r2, r8
 800173e:	fb02 f203 	mul.w	r2, r2, r3
 8001742:	464b      	mov	r3, r9
 8001744:	4621      	mov	r1, r4
 8001746:	fb01 f303 	mul.w	r3, r1, r3
 800174a:	4413      	add	r3, r2
 800174c:	4622      	mov	r2, r4
 800174e:	4641      	mov	r1, r8
 8001750:	fba2 1201 	umull	r1, r2, r2, r1
 8001754:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001758:	460a      	mov	r2, r1
 800175a:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800175e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001762:	4413      	add	r3, r2
 8001764:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001768:	f04f 0000 	mov.w	r0, #0
 800176c:	f04f 0100 	mov.w	r1, #0
 8001770:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001774:	4623      	mov	r3, r4
 8001776:	0a18      	lsrs	r0, r3, #8
 8001778:	462b      	mov	r3, r5
 800177a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800177e:	462b      	mov	r3, r5
 8001780:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001786:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800178a:	b21b      	sxth	r3, r3
 800178c:	17da      	asrs	r2, r3, #31
 800178e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001792:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001796:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800179a:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800179e:	464a      	mov	r2, r9
 80017a0:	fb02 f203 	mul.w	r2, r2, r3
 80017a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80017a8:	4644      	mov	r4, r8
 80017aa:	fb04 f303 	mul.w	r3, r4, r3
 80017ae:	441a      	add	r2, r3
 80017b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017b4:	4644      	mov	r4, r8
 80017b6:	fba3 4304 	umull	r4, r3, r3, r4
 80017ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80017be:	4623      	mov	r3, r4
 80017c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80017c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80017c8:	18d3      	adds	r3, r2, r3
 80017ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80017da:	464c      	mov	r4, r9
 80017dc:	0323      	lsls	r3, r4, #12
 80017de:	4644      	mov	r4, r8
 80017e0:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80017e4:	4644      	mov	r4, r8
 80017e6:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80017e8:	1884      	adds	r4, r0, r2
 80017ea:	633c      	str	r4, [r7, #48]	@ 0x30
 80017ec:	eb41 0303 	adc.w	r3, r1, r3
 80017f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80017f2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80017f6:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80017fa:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80017fe:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001802:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001806:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800180a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800180e:	88db      	ldrh	r3, [r3, #6]
 8001810:	b29b      	uxth	r3, r3
 8001812:	2200      	movs	r2, #0
 8001814:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001818:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800181c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001820:	462b      	mov	r3, r5
 8001822:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001826:	4642      	mov	r2, r8
 8001828:	fb02 f203 	mul.w	r2, r2, r3
 800182c:	464b      	mov	r3, r9
 800182e:	4621      	mov	r1, r4
 8001830:	fb01 f303 	mul.w	r3, r1, r3
 8001834:	4413      	add	r3, r2
 8001836:	4622      	mov	r2, r4
 8001838:	4641      	mov	r1, r8
 800183a:	fba2 1201 	umull	r1, r2, r2, r1
 800183e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001842:	460a      	mov	r2, r1
 8001844:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001848:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800184c:	4413      	add	r3, r2
 800184e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800185e:	4629      	mov	r1, r5
 8001860:	104a      	asrs	r2, r1, #1
 8001862:	4629      	mov	r1, r5
 8001864:	17cb      	asrs	r3, r1, #31
 8001866:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 800186a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800186e:	4313      	orrs	r3, r2
 8001870:	d101      	bne.n	8001876 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001872:	2300      	movs	r3, #0
 8001874:	e148      	b.n	8001b08 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001876:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800187a:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800187e:	17da      	asrs	r2, r3, #31
 8001880:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001882:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001884:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001888:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800188c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001890:	105b      	asrs	r3, r3, #1
 8001892:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001896:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800189a:	07db      	lsls	r3, r3, #31
 800189c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80018a0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80018a4:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80018a8:	4621      	mov	r1, r4
 80018aa:	1a89      	subs	r1, r1, r2
 80018ac:	67b9      	str	r1, [r7, #120]	@ 0x78
 80018ae:	4629      	mov	r1, r5
 80018b0:	eb61 0303 	sbc.w	r3, r1, r3
 80018b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80018ba:	4622      	mov	r2, r4
 80018bc:	462b      	mov	r3, r5
 80018be:	1891      	adds	r1, r2, r2
 80018c0:	6239      	str	r1, [r7, #32]
 80018c2:	415b      	adcs	r3, r3
 80018c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018ca:	4621      	mov	r1, r4
 80018cc:	1851      	adds	r1, r2, r1
 80018ce:	61b9      	str	r1, [r7, #24]
 80018d0:	4629      	mov	r1, r5
 80018d2:	414b      	adcs	r3, r1
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018e2:	4649      	mov	r1, r9
 80018e4:	018b      	lsls	r3, r1, #6
 80018e6:	4641      	mov	r1, r8
 80018e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ec:	4641      	mov	r1, r8
 80018ee:	018a      	lsls	r2, r1, #6
 80018f0:	4641      	mov	r1, r8
 80018f2:	1889      	adds	r1, r1, r2
 80018f4:	6139      	str	r1, [r7, #16]
 80018f6:	4649      	mov	r1, r9
 80018f8:	eb43 0101 	adc.w	r1, r3, r1
 80018fc:	6179      	str	r1, [r7, #20]
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800190a:	4649      	mov	r1, r9
 800190c:	008b      	lsls	r3, r1, #2
 800190e:	4641      	mov	r1, r8
 8001910:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001914:	4641      	mov	r1, r8
 8001916:	008a      	lsls	r2, r1, #2
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	4603      	mov	r3, r0
 800191e:	4622      	mov	r2, r4
 8001920:	189b      	adds	r3, r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	460b      	mov	r3, r1
 8001926:	462a      	mov	r2, r5
 8001928:	eb42 0303 	adc.w	r3, r2, r3
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800193a:	4649      	mov	r1, r9
 800193c:	008b      	lsls	r3, r1, #2
 800193e:	4641      	mov	r1, r8
 8001940:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001944:	4641      	mov	r1, r8
 8001946:	008a      	lsls	r2, r1, #2
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	4603      	mov	r3, r0
 800194e:	4622      	mov	r2, r4
 8001950:	189b      	adds	r3, r3, r2
 8001952:	673b      	str	r3, [r7, #112]	@ 0x70
 8001954:	462b      	mov	r3, r5
 8001956:	460a      	mov	r2, r1
 8001958:	eb42 0303 	adc.w	r3, r2, r3
 800195c:	677b      	str	r3, [r7, #116]	@ 0x74
 800195e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001962:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001966:	f7ff f98f 	bl	8000c88 <__aeabi_ldivmod>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001976:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800197a:	b21b      	sxth	r3, r3
 800197c:	17da      	asrs	r2, r3, #31
 800197e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001980:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001982:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	0b50      	lsrs	r0, r2, #13
 8001990:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001994:	1359      	asrs	r1, r3, #13
 8001996:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800199a:	462b      	mov	r3, r5
 800199c:	fb00 f203 	mul.w	r2, r0, r3
 80019a0:	4623      	mov	r3, r4
 80019a2:	fb03 f301 	mul.w	r3, r3, r1
 80019a6:	4413      	add	r3, r2
 80019a8:	4622      	mov	r2, r4
 80019aa:	fba2 1200 	umull	r1, r2, r2, r0
 80019ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80019b2:	460a      	mov	r2, r1
 80019b4:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80019b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80019bc:	4413      	add	r3, r2
 80019be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80019c2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80019c6:	f04f 0000 	mov.w	r0, #0
 80019ca:	f04f 0100 	mov.w	r1, #0
 80019ce:	0b50      	lsrs	r0, r2, #13
 80019d0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019d4:	1359      	asrs	r1, r3, #13
 80019d6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80019da:	462b      	mov	r3, r5
 80019dc:	fb00 f203 	mul.w	r2, r0, r3
 80019e0:	4623      	mov	r3, r4
 80019e2:	fb03 f301 	mul.w	r3, r3, r1
 80019e6:	4413      	add	r3, r2
 80019e8:	4622      	mov	r2, r4
 80019ea:	fba2 1200 	umull	r1, r2, r2, r0
 80019ee:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80019f2:	460a      	mov	r2, r1
 80019f4:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80019f8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80019fc:	4413      	add	r3, r2
 80019fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001a0e:	4621      	mov	r1, r4
 8001a10:	0e4a      	lsrs	r2, r1, #25
 8001a12:	4629      	mov	r1, r5
 8001a14:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001a18:	4629      	mov	r1, r5
 8001a1a:	164b      	asrs	r3, r1, #25
 8001a1c:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a24:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	17da      	asrs	r2, r3, #31
 8001a2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a2e:	667a      	str	r2, [r7, #100]	@ 0x64
 8001a30:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a34:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a38:	462a      	mov	r2, r5
 8001a3a:	fb02 f203 	mul.w	r2, r2, r3
 8001a3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001a42:	4621      	mov	r1, r4
 8001a44:	fb01 f303 	mul.w	r3, r1, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001a4e:	4621      	mov	r1, r4
 8001a50:	fba2 1201 	umull	r1, r2, r2, r1
 8001a54:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001a58:	460a      	mov	r2, r1
 8001a5a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001a5e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001a62:	4413      	add	r3, r2
 8001a64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001a74:	4621      	mov	r1, r4
 8001a76:	0cca      	lsrs	r2, r1, #19
 8001a78:	4629      	mov	r1, r5
 8001a7a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a7e:	4629      	mov	r1, r5
 8001a80:	14cb      	asrs	r3, r1, #19
 8001a82:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001a86:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001a8a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001a8e:	1884      	adds	r4, r0, r2
 8001a90:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001a92:	eb41 0303 	adc.w	r3, r1, r3
 8001a96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a98:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a9c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	1889      	adds	r1, r1, r2
 8001aa4:	6539      	str	r1, [r7, #80]	@ 0x50
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	eb43 0101 	adc.w	r1, r3, r1
 8001aac:	6579      	str	r1, [r7, #84]	@ 0x54
 8001aae:	f04f 0000 	mov.w	r0, #0
 8001ab2:	f04f 0100 	mov.w	r1, #0
 8001ab6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001aba:	4623      	mov	r3, r4
 8001abc:	0a18      	lsrs	r0, r3, #8
 8001abe:	462b      	mov	r3, r5
 8001ac0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ac4:	462b      	mov	r3, r5
 8001ac6:	1219      	asrs	r1, r3, #8
 8001ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001acc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ad0:	b21b      	sxth	r3, r3
 8001ad2:	17da      	asrs	r2, r3, #31
 8001ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ad6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001ae4:	464c      	mov	r4, r9
 8001ae6:	0123      	lsls	r3, r4, #4
 8001ae8:	4644      	mov	r4, r8
 8001aea:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001aee:	4644      	mov	r4, r8
 8001af0:	0122      	lsls	r2, r4, #4
 8001af2:	1884      	adds	r4, r0, r2
 8001af4:	603c      	str	r4, [r7, #0]
 8001af6:	eb41 0303 	adc.w	r3, r1, r3
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b00:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001b04:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b14 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001b26:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	039a      	lsls	r2, r3, #14
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001b32:	051b      	lsls	r3, r3, #20
 8001b34:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	fb01 f303 	mul.w	r3, r1, r3
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001b4a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001b52:	4611      	mov	r1, r2
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	fb01 f202 	mul.w	r2, r1, r2
 8001b5a:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b5c:	68f9      	ldr	r1, [r7, #12]
 8001b5e:	7f09      	ldrb	r1, [r1, #28]
 8001b60:	4608      	mov	r0, r1
 8001b62:	6979      	ldr	r1, [r7, #20]
 8001b64:	fb00 f101 	mul.w	r1, r0, r1
 8001b68:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001b6a:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b6e:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001b72:	1292      	asrs	r2, r2, #10
 8001b74:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001b78:	68f9      	ldr	r1, [r7, #12]
 8001b7a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001b7e:	fb01 f202 	mul.w	r2, r1, r2
 8001b82:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001b86:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001b88:	fb02 f303 	mul.w	r3, r2, r3
 8001b8c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	13db      	asrs	r3, r3, #15
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	13d2      	asrs	r2, r2, #15
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
 8001b9a:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	7e12      	ldrb	r2, [r2, #24]
 8001ba0:	fb02 f303 	mul.w	r3, r2, r3
 8001ba4:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001bb2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001bba:	bfa8      	it	ge
 8001bbc:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001bc0:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	131b      	asrs	r3, r3, #12
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b08c      	sub	sp, #48	@ 0x30
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001be6:	2b60      	cmp	r3, #96	@ 0x60
 8001be8:	d007      	beq.n	8001bfa <bmp280_read_fixed+0x28>
		if (humidity)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <bmp280_read_fixed+0x32>
 8001c00:	2308      	movs	r3, #8
 8001c02:	e000      	b.n	8001c06 <bmp280_read_fixed+0x34>
 8001c04:	2306      	movs	r3, #6
 8001c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f107 0218 	add.w	r2, r7, #24
 8001c10:	21f7      	movs	r1, #247	@ 0xf7
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f7ff fa65 	bl	80010e2 <read_data>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <bmp280_read_fixed+0x50>
		return false;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e038      	b.n	8001c94 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001c22:	7e3b      	ldrb	r3, [r7, #24]
 8001c24:	031a      	lsls	r2, r3, #12
 8001c26:	7e7b      	ldrb	r3, [r7, #25]
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	7eba      	ldrb	r2, [r7, #26]
 8001c2e:	0912      	lsrs	r2, r2, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	4313      	orrs	r3, r2
 8001c34:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001c36:	7efb      	ldrb	r3, [r7, #27]
 8001c38:	031a      	lsls	r2, r3, #12
 8001c3a:	7f3b      	ldrb	r3, [r7, #28]
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	7f7a      	ldrb	r2, [r7, #29]
 8001c42:	0912      	lsrs	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	4313      	orrs	r3, r2
 8001c48:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	461a      	mov	r2, r3
 8001c50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f7ff fc67 	bl	8001526 <compensate_temperature>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	461a      	mov	r2, r3
 8001c62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f7ff fc97 	bl	8001598 <compensate_pressure>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00d      	beq.n	8001c92 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001c76:	7fbb      	ldrb	r3, [r7, #30]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	7ffa      	ldrb	r2, [r7, #31]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	461a      	mov	r2, r3
 8001c84:	6a39      	ldr	r1, [r7, #32]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f7ff ff44 	bl	8001b14 <compensate_humidity>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3730      	adds	r7, #48	@ 0x30
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <bmp280_read_float+0x1a>
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	e000      	b.n	8001cb8 <bmp280_read_float+0x1c>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f107 0218 	add.w	r2, r7, #24
 8001cbc:	f107 011c 	add.w	r1, r7, #28
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f7ff ff86 	bl	8001bd2 <bmp280_read_fixed>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d028      	beq.n	8001d1e <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	ee07 3a90 	vmov	s15, r3
 8001cd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cd6:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001d28 <bmp280_read_float+0x8c>
 8001cda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	ee07 3a90 	vmov	s15, r3
 8001cea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cee:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001d2c <bmp280_read_float+0x90>
 8001cf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	ee07 3a90 	vmov	s15, r3
 8001d08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d0c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001d30 <bmp280_read_float+0x94>
 8001d10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <bmp280_read_float+0x84>
	}

	return false;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3720      	adds	r7, #32
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	42c80000 	.word	0x42c80000
 8001d2c:	43800000 	.word	0x43800000
 8001d30:	44800000 	.word	0x44800000

08001d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d38:	f5ad 7d4c 	sub.w	sp, sp, #816	@ 0x330
 8001d3c:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d3e:	f000 ff6d 	bl	8002c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d42:	f000 f981 	bl	8002048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d46:	f000 faad 	bl	80022a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d4a:	f000 fa7b 	bl	8002244 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001d4e:	f000 f9d7 	bl	8002100 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 8001d52:	f000 fa57 	bl	8002204 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001d56:	f007 faf9 	bl	800934c <MX_FATFS_Init>
  MX_RTC_Init();
 8001d5a:	f000 fa11 	bl	8002180 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  sensor.i2c = &hi2c1;
 8001d5e:	4baa      	ldr	r3, [pc, #680]	@ (8002008 <main+0x2d4>)
 8001d60:	4aaa      	ldr	r2, [pc, #680]	@ (800200c <main+0x2d8>)
 8001d62:	629a      	str	r2, [r3, #40]	@ 0x28
  sensor.addr = BMP280_I2C_ADDRESS_0;
 8001d64:	4ba8      	ldr	r3, [pc, #672]	@ (8002008 <main+0x2d4>)
 8001d66:	2276      	movs	r2, #118	@ 0x76
 8001d68:	849a      	strh	r2, [r3, #36]	@ 0x24

#if !MY_PARAMS
  bmp280_init_default_params(&sensorParams);
#else

  sensorParams.filter = BMP280_FILTER_OFF;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 32ed 	strb.w	r3, [r7, #749]	@ 0x2ed
  sensorParams.mode = BMP280_MODE_FORCED;
 8001d70:	2301      	movs	r3, #1
 8001d72:	f887 32ec 	strb.w	r3, [r7, #748]	@ 0x2ec
  sensorParams.oversampling_humidity = BMP280_ULTRA_LOW_POWER;
 8001d76:	2301      	movs	r3, #1
 8001d78:	f887 32f0 	strb.w	r3, [r7, #752]	@ 0x2f0
  sensorParams.oversampling_pressure = BMP280_ULTRA_LOW_POWER;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f887 32ee 	strb.w	r3, [r7, #750]	@ 0x2ee
  sensorParams.oversampling_temperature = BMP280_ULTRA_LOW_POWER;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f887 32ef 	strb.w	r3, [r7, #751]	@ 0x2ef
  //sensorParams.standby = BMP280_STANDBY_;
#endif

  bool initCode = false;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f887 32fe 	strb.w	r3, [r7, #766]	@ 0x2fe
  initCode =  bmp280_init(&sensor, &sensorParams);
 8001d8e:	f507 733b 	add.w	r3, r7, #748	@ 0x2ec
 8001d92:	4619      	mov	r1, r3
 8001d94:	489c      	ldr	r0, [pc, #624]	@ (8002008 <main+0x2d4>)
 8001d96:	f7ff fad3 	bl	8001340 <bmp280_init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f887 32fe 	strb.w	r3, [r7, #766]	@ 0x2fe
  if(initCode)
 8001da0:	f897 32fe 	ldrb.w	r3, [r7, #766]	@ 0x2fe
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d004      	beq.n	8001db2 <main+0x7e>
  {
	  printParams(&sensorParams);
 8001da8:	f507 733b 	add.w	r3, r7, #748	@ 0x2ec
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 fb0d 	bl	80023cc <printParams>
  }
  pSDFatfs = &SDFatFS;
 8001db2:	4b97      	ldr	r3, [pc, #604]	@ (8002010 <main+0x2dc>)
 8001db4:	4a97      	ldr	r2, [pc, #604]	@ (8002014 <main+0x2e0>)
 8001db6:	601a      	str	r2, [r3, #0]
  res = f_mount(pSDFatfs, "", 1);
 8001db8:	4b95      	ldr	r3, [pc, #596]	@ (8002010 <main+0x2dc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	4996      	ldr	r1, [pc, #600]	@ (8002018 <main+0x2e4>)
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f009 f995 	bl	800b0f0 <f_mount>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f887 32fd 	strb.w	r3, [r7, #765]	@ 0x2fd

  if(!res == FR_OK)
 8001dcc:	f897 32fd 	ldrb.w	r3, [r7, #765]	@ 0x2fd
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <main+0xa4>
	  Error_Handler();
 8001dd4:	f000 fc44 	bl	8002660 <Error_Handler>
  res = f_mount(NULL, "", 0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	498f      	ldr	r1, [pc, #572]	@ (8002018 <main+0x2e4>)
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f009 f987 	bl	800b0f0 <f_mount>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f887 32fd 	strb.w	r3, [r7, #765]	@ 0x2fd
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  bool isMeasuring = true;
 8001de8:	2301      	movs	r3, #1
 8001dea:	f887 32ff 	strb.w	r3, [r7, #767]	@ 0x2ff
  FIL logFile;
  char writeBuffer[150];
  unsigned int bytesToWrite = strlen(writeBuffer);
 8001dee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fa3c 	bl	8000270 <strlen>
 8001df8:	f8c7 02f8 	str.w	r0, [r7, #760]	@ 0x2f8
  unsigned int bytesWritten;
  float temp = 0.0f, press= 0.0f, hum = 0.0f;
 8001dfc:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8001e00:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8001e0e:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8001e1c:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
  const float pressureScale = 1.0f / 1000.0f;
 8001e26:	4b7d      	ldr	r3, [pc, #500]	@ (800201c <main+0x2e8>)
 8001e28:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4

  while (1)
  {
	  HAL_GPIO_TogglePin(GreenLED_GPIO_Port, GreenLED_Pin);
 8001e2c:	2120      	movs	r1, #32
 8001e2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e32:	f001 fa9f 	bl	8003374 <HAL_GPIO_TogglePin>
	  bmp280_force_measurement(&sensor);
 8001e36:	4874      	ldr	r0, [pc, #464]	@ (8002008 <main+0x2d4>)
 8001e38:	f7ff fb2f 	bl	800149a <bmp280_force_measurement>
	  isMeasuring = true;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f887 32ff 	strb.w	r3, [r7, #767]	@ 0x2ff
	  while(isMeasuring)
 8001e42:	e005      	b.n	8001e50 <main+0x11c>
	  {
		  isMeasuring= bmp280_is_measuring(&sensor);
 8001e44:	4870      	ldr	r0, [pc, #448]	@ (8002008 <main+0x2d4>)
 8001e46:	f7ff fb52 	bl	80014ee <bmp280_is_measuring>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f887 32ff 	strb.w	r3, [r7, #767]	@ 0x2ff
	  while(isMeasuring)
 8001e50:	f897 32ff 	ldrb.w	r3, [r7, #767]	@ 0x2ff
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f5      	bne.n	8001e44 <main+0x110>

	  }

	  bmp280_read_float(&sensor, &temp, &press, &hum);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	f107 0218 	add.w	r2, r7, #24
 8001e60:	f107 011c 	add.w	r1, r7, #28
 8001e64:	4868      	ldr	r0, [pc, #416]	@ (8002008 <main+0x2d4>)
 8001e66:	f7ff ff19 	bl	8001c9c <bmp280_read_float>
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	496c      	ldr	r1, [pc, #432]	@ (8002020 <main+0x2ec>)
 8001e6e:	486d      	ldr	r0, [pc, #436]	@ (8002024 <main+0x2f0>)
 8001e70:	f004 fb10 	bl	8006494 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001e74:	2200      	movs	r2, #0
 8001e76:	496c      	ldr	r1, [pc, #432]	@ (8002028 <main+0x2f4>)
 8001e78:	486a      	ldr	r0, [pc, #424]	@ (8002024 <main+0x2f0>)
 8001e7a:	f004 fb67 	bl	800654c <HAL_RTC_GetDate>

	  snprintf(writeBuffer,
			  sizeof(writeBuffer),
			  "%d/%d/%d  %d:%d:%d : Temperature: %0.2f%cC, Pressure: %0.2fhPa\r\n",
			  date.Date, date.Month, date.Year,
 8001e7e:	4b6a      	ldr	r3, [pc, #424]	@ (8002028 <main+0x2f4>)
 8001e80:	789b      	ldrb	r3, [r3, #2]
	  snprintf(writeBuffer,
 8001e82:	4698      	mov	r8, r3
			  date.Date, date.Month, date.Year,
 8001e84:	4b68      	ldr	r3, [pc, #416]	@ (8002028 <main+0x2f4>)
 8001e86:	785b      	ldrb	r3, [r3, #1]
	  snprintf(writeBuffer,
 8001e88:	461e      	mov	r6, r3
			  date.Date, date.Month, date.Year,
 8001e8a:	4b67      	ldr	r3, [pc, #412]	@ (8002028 <main+0x2f4>)
 8001e8c:	78db      	ldrb	r3, [r3, #3]
	  snprintf(writeBuffer,
 8001e8e:	60fb      	str	r3, [r7, #12]
			  time.Hours, time.Minutes, time.Seconds,
 8001e90:	4b63      	ldr	r3, [pc, #396]	@ (8002020 <main+0x2ec>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
	  snprintf(writeBuffer,
 8001e94:	60bb      	str	r3, [r7, #8]
			  time.Hours, time.Minutes, time.Seconds,
 8001e96:	4b62      	ldr	r3, [pc, #392]	@ (8002020 <main+0x2ec>)
 8001e98:	785b      	ldrb	r3, [r3, #1]
	  snprintf(writeBuffer,
 8001e9a:	607b      	str	r3, [r7, #4]
			  time.Hours, time.Minutes, time.Seconds,
 8001e9c:	4b60      	ldr	r3, [pc, #384]	@ (8002020 <main+0x2ec>)
 8001e9e:	789b      	ldrb	r3, [r3, #2]
	  snprintf(writeBuffer,
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8001ea6:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fb4b 	bl	8000548 <__aeabi_f2d>
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	460d      	mov	r5, r1
			  temp,176, press*pressureScale);
 8001eb6:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8001eba:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8001ebe:	ed93 7a00 	vldr	s14, [r3]
 8001ec2:	edd7 7abd 	vldr	s15, [r7, #756]	@ 0x2f4
 8001ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
	  snprintf(writeBuffer,
 8001eca:	ee17 0a90 	vmov	r0, s15
 8001ece:	f7fe fb3b 	bl	8000548 <__aeabi_f2d>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001eda:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001ede:	23b0      	movs	r3, #176	@ 0xb0
 8001ee0:	9308      	str	r3, [sp, #32]
 8001ee2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	9204      	str	r2, [sp, #16]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	9203      	str	r2, [sp, #12]
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	9202      	str	r2, [sp, #8]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	9600      	str	r6, [sp, #0]
 8001ef8:	4643      	mov	r3, r8
 8001efa:	4a4c      	ldr	r2, [pc, #304]	@ (800202c <main+0x2f8>)
 8001efc:	2196      	movs	r1, #150	@ 0x96
 8001efe:	f00a fd0d 	bl	800c91c <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)writeBuffer, strlen(writeBuffer), 20);
 8001f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe f9b2 	bl	8000270 <strlen>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001f14:	2314      	movs	r3, #20
 8001f16:	4846      	ldr	r0, [pc, #280]	@ (8002030 <main+0x2fc>)
 8001f18:	f005 ff44 	bl	8007da4 <HAL_UART_Transmit>

	  res = f_mount(pSDFatfs, "", 1);
 8001f1c:	4b3c      	ldr	r3, [pc, #240]	@ (8002010 <main+0x2dc>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2201      	movs	r2, #1
 8001f22:	493d      	ldr	r1, [pc, #244]	@ (8002018 <main+0x2e4>)
 8001f24:	4618      	mov	r0, r3
 8001f26:	f009 f8e3 	bl	800b0f0 <f_mount>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f887 32fd 	strb.w	r3, [r7, #765]	@ 0x2fd
	  res = f_open(&logFile, "log.txt", FA_OPEN_APPEND |
 8001f30:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001f34:	2232      	movs	r2, #50	@ 0x32
 8001f36:	493f      	ldr	r1, [pc, #252]	@ (8002034 <main+0x300>)
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f009 f91f 	bl	800b17c <f_open>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f887 32fd 	strb.w	r3, [r7, #765]	@ 0x2fd
			  FA_WRITE);
	  if(res != FR_OK)
 8001f44:	f897 32fd 	ldrb.w	r3, [r7, #765]	@ 0x2fd
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <main+0x226>
	  {
		  printf("Opening file failed! res = %d\r\n", res);
 8001f4c:	f897 32fd 	ldrb.w	r3, [r7, #765]	@ 0x2fd
 8001f50:	4619      	mov	r1, r3
 8001f52:	4839      	ldr	r0, [pc, #228]	@ (8002038 <main+0x304>)
 8001f54:	f00a fc72 	bl	800c83c <iprintf>
		  continue;
 8001f58:	e055      	b.n	8002006 <main+0x2d2>
	  }

	  res = f_write(&logFile, writeBuffer, bytesToWrite, &bytesWritten);
 8001f5a:	f107 0320 	add.w	r3, r7, #32
 8001f5e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001f62:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 8001f66:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 8001f6a:	f009 fac1 	bl	800b4f0 <f_write>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	f887 32fd 	strb.w	r3, [r7, #765]	@ 0x2fd
	  if(res != FR_OK)
 8001f74:	f897 32fd 	ldrb.w	r3, [r7, #765]	@ 0x2fd
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <main+0x256>
	  {
		  printf("Writing operation failed! res = %d\r\n", res);
 8001f7c:	f897 32fd 	ldrb.w	r3, [r7, #765]	@ 0x2fd
 8001f80:	4619      	mov	r1, r3
 8001f82:	482e      	ldr	r0, [pc, #184]	@ (800203c <main+0x308>)
 8001f84:	f00a fc5a 	bl	800c83c <iprintf>
		  continue;
 8001f88:	e03d      	b.n	8002006 <main+0x2d2>
	  }
	  if(bytesWritten < bytesToWrite)
 8001f8a:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8001f8e:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d902      	bls.n	8001fa2 <main+0x26e>
	  {
		  printf("Disk is full!\r\n");
 8001f9c:	4828      	ldr	r0, [pc, #160]	@ (8002040 <main+0x30c>)
 8001f9e:	f00a fcb5 	bl	800c90c <puts>
	  }
	  res = f_close(&logFile);
 8001fa2:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f009 fc95 	bl	800b8d6 <f_close>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f887 32fd 	strb.w	r3, [r7, #765]	@ 0x2fd
	  if(res != FR_OK)
 8001fb2:	f897 32fd 	ldrb.w	r3, [r7, #765]	@ 0x2fd
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d006      	beq.n	8001fc8 <main+0x294>
	  {
		  printf("Closing operation failed! res= %d\r\n", res);
 8001fba:	f897 32fd 	ldrb.w	r3, [r7, #765]	@ 0x2fd
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4820      	ldr	r0, [pc, #128]	@ (8002044 <main+0x310>)
 8001fc2:	f00a fc3b 	bl	800c83c <iprintf>
		  continue;
 8001fc6:	e01e      	b.n	8002006 <main+0x2d2>
	  }
	  res = f_mount(NULL, "", 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	4913      	ldr	r1, [pc, #76]	@ (8002018 <main+0x2e4>)
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f009 f88f 	bl	800b0f0 <f_mount>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f887 32fd 	strb.w	r3, [r7, #765]	@ 0x2fd
	  HAL_GPIO_TogglePin(GreenLED_GPIO_Port, GreenLED_Pin);
 8001fd8:	2120      	movs	r1, #32
 8001fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fde:	f001 f9c9 	bl	8003374 <HAL_GPIO_TogglePin>
	  HAL_SuspendTick();
 8001fe2:	f000 febb 	bl	8002d5c <HAL_SuspendTick>
	  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x708, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8001fe6:	2204      	movs	r2, #4
 8001fe8:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 8001fec:	480d      	ldr	r0, [pc, #52]	@ (8002024 <main+0x2f0>)
 8001fee:	f004 fbab 	bl	8006748 <HAL_RTCEx_SetWakeUpTimer_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f002 f870 	bl	80040d8 <HAL_PWREx_EnterSTOP2Mode>

	  HAL_ResumeTick();
 8001ff8:	f000 fec0 	bl	8002d7c <HAL_ResumeTick>
	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001ffc:	4809      	ldr	r0, [pc, #36]	@ (8002024 <main+0x2f0>)
 8001ffe:	f004 fc37 	bl	8006870 <HAL_RTCEx_DeactivateWakeUpTimer>
	  SystemClock_Config();
 8002002:	f000 f821 	bl	8002048 <SystemClock_Config>
	  HAL_GPIO_TogglePin(GreenLED_GPIO_Port, GreenLED_Pin);
 8002006:	e711      	b.n	8001e2c <main+0xf8>
 8002008:	20000374 	.word	0x20000374
 800200c:	200001f0 	.word	0x200001f0
 8002010:	200003a8 	.word	0x200003a8
 8002014:	200003d4 	.word	0x200003d4
 8002018:	08010218 	.word	0x08010218
 800201c:	3a83126f 	.word	0x3a83126f
 8002020:	200003ac 	.word	0x200003ac
 8002024:	20000244 	.word	0x20000244
 8002028:	200003c0 	.word	0x200003c0
 800202c:	0801021c 	.word	0x0801021c
 8002030:	200002ec 	.word	0x200002ec
 8002034:	08010260 	.word	0x08010260
 8002038:	08010268 	.word	0x08010268
 800203c:	08010288 	.word	0x08010288
 8002040:	080102b0 	.word	0x080102b0
 8002044:	080102c0 	.word	0x080102c0

08002048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b096      	sub	sp, #88	@ 0x58
 800204c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	2244      	movs	r2, #68	@ 0x44
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f00a fd8c 	bl	800cb74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800205c:	463b      	mov	r3, r7
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800206a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800206e:	f001 ffdd 	bl	800402c <HAL_PWREx_ControlVoltageScaling>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002078:	f000 faf2 	bl	8002660 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800207c:	f001 ffb8 	bl	8003ff0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002080:	4b1e      	ldr	r3, [pc, #120]	@ (80020fc <SystemClock_Config+0xb4>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002086:	4a1d      	ldr	r2, [pc, #116]	@ (80020fc <SystemClock_Config+0xb4>)
 8002088:	f023 0318 	bic.w	r3, r3, #24
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8002090:	2316      	movs	r3, #22
 8002092:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002094:	2301      	movs	r3, #1
 8002096:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002098:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800209c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800209e:	2310      	movs	r3, #16
 80020a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80020a2:	2301      	movs	r3, #1
 80020a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80020aa:	2360      	movs	r3, #96	@ 0x60
 80020ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4618      	mov	r0, r3
 80020b8:	f002 f83a 	bl	8004130 <HAL_RCC_OscConfig>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80020c2:	f000 facd 	bl	8002660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020c6:	230f      	movs	r3, #15
 80020c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80020ca:	2301      	movs	r3, #1
 80020cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020da:	463b      	mov	r3, r7
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f002 fc02 	bl	80048e8 <HAL_RCC_ClockConfig>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80020ea:	f000 fab9 	bl	8002660 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80020ee:	f003 fe77 	bl	8005de0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80020f2:	bf00      	nop
 80020f4:	3758      	adds	r7, #88	@ 0x58
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000

08002100 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002104:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <MX_I2C1_Init+0x74>)
 8002106:	4a1c      	ldr	r2, [pc, #112]	@ (8002178 <MX_I2C1_Init+0x78>)
 8002108:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800210a:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <MX_I2C1_Init+0x74>)
 800210c:	4a1b      	ldr	r2, [pc, #108]	@ (800217c <MX_I2C1_Init+0x7c>)
 800210e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 236;
 8002110:	4b18      	ldr	r3, [pc, #96]	@ (8002174 <MX_I2C1_Init+0x74>)
 8002112:	22ec      	movs	r2, #236	@ 0xec
 8002114:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002116:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <MX_I2C1_Init+0x74>)
 8002118:	2201      	movs	r2, #1
 800211a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800211c:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <MX_I2C1_Init+0x74>)
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002122:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <MX_I2C1_Init+0x74>)
 8002124:	2200      	movs	r2, #0
 8002126:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002128:	4b12      	ldr	r3, [pc, #72]	@ (8002174 <MX_I2C1_Init+0x74>)
 800212a:	2200      	movs	r2, #0
 800212c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800212e:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <MX_I2C1_Init+0x74>)
 8002130:	2200      	movs	r2, #0
 8002132:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002134:	4b0f      	ldr	r3, [pc, #60]	@ (8002174 <MX_I2C1_Init+0x74>)
 8002136:	2200      	movs	r2, #0
 8002138:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800213a:	480e      	ldr	r0, [pc, #56]	@ (8002174 <MX_I2C1_Init+0x74>)
 800213c:	f001 f934 	bl	80033a8 <HAL_I2C_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002146:	f000 fa8b 	bl	8002660 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800214a:	2100      	movs	r1, #0
 800214c:	4809      	ldr	r0, [pc, #36]	@ (8002174 <MX_I2C1_Init+0x74>)
 800214e:	f001 feb7 	bl	8003ec0 <HAL_I2CEx_ConfigAnalogFilter>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002158:	f000 fa82 	bl	8002660 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800215c:	2100      	movs	r1, #0
 800215e:	4805      	ldr	r0, [pc, #20]	@ (8002174 <MX_I2C1_Init+0x74>)
 8002160:	f001 fef9 	bl	8003f56 <HAL_I2CEx_ConfigDigitalFilter>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800216a:	f000 fa79 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200001f0 	.word	0x200001f0
 8002178:	40005400 	.word	0x40005400
 800217c:	00503d58 	.word	0x00503d58

08002180 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002194:	2300      	movs	r3, #0
 8002196:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002198:	4b16      	ldr	r3, [pc, #88]	@ (80021f4 <MX_RTC_Init+0x74>)
 800219a:	4a17      	ldr	r2, [pc, #92]	@ (80021f8 <MX_RTC_Init+0x78>)
 800219c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800219e:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <MX_RTC_Init+0x74>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80021a4:	4b13      	ldr	r3, [pc, #76]	@ (80021f4 <MX_RTC_Init+0x74>)
 80021a6:	227f      	movs	r2, #127	@ 0x7f
 80021a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80021aa:	4b12      	ldr	r3, [pc, #72]	@ (80021f4 <MX_RTC_Init+0x74>)
 80021ac:	22ff      	movs	r2, #255	@ 0xff
 80021ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80021b0:	4b10      	ldr	r3, [pc, #64]	@ (80021f4 <MX_RTC_Init+0x74>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80021b6:	4b0f      	ldr	r3, [pc, #60]	@ (80021f4 <MX_RTC_Init+0x74>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80021bc:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <MX_RTC_Init+0x74>)
 80021be:	2200      	movs	r2, #0
 80021c0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021c2:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <MX_RTC_Init+0x74>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021c8:	480a      	ldr	r0, [pc, #40]	@ (80021f4 <MX_RTC_Init+0x74>)
 80021ca:	f004 f8db 	bl	8006384 <HAL_RTC_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80021d4:	f000 fa44 	bl	8002660 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80021d8:	2200      	movs	r2, #0
 80021da:	4908      	ldr	r1, [pc, #32]	@ (80021fc <MX_RTC_Init+0x7c>)
 80021dc:	4805      	ldr	r0, [pc, #20]	@ (80021f4 <MX_RTC_Init+0x74>)
 80021de:	f004 f959 	bl	8006494 <HAL_RTC_GetTime>
HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80021e2:	2200      	movs	r2, #0
 80021e4:	4906      	ldr	r1, [pc, #24]	@ (8002200 <MX_RTC_Init+0x80>)
 80021e6:	4803      	ldr	r0, [pc, #12]	@ (80021f4 <MX_RTC_Init+0x74>)
 80021e8:	f004 f9b0 	bl	800654c <HAL_RTC_GetDate>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000244 	.word	0x20000244
 80021f8:	40002800 	.word	0x40002800
 80021fc:	200003ac 	.word	0x200003ac
 8002200:	200003c0 	.word	0x200003c0

08002204 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002208:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <MX_SDMMC1_SD_Init+0x38>)
 800220a:	4a0d      	ldr	r2, [pc, #52]	@ (8002240 <MX_SDMMC1_SD_Init+0x3c>)
 800220c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800220e:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <MX_SDMMC1_SD_Init+0x38>)
 8002210:	2200      	movs	r2, #0
 8002212:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002214:	4b09      	ldr	r3, [pc, #36]	@ (800223c <MX_SDMMC1_SD_Init+0x38>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800221a:	4b08      	ldr	r3, [pc, #32]	@ (800223c <MX_SDMMC1_SD_Init+0x38>)
 800221c:	2200      	movs	r2, #0
 800221e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <MX_SDMMC1_SD_Init+0x38>)
 8002222:	2200      	movs	r2, #0
 8002224:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002226:	4b05      	ldr	r3, [pc, #20]	@ (800223c <MX_SDMMC1_SD_Init+0x38>)
 8002228:	2200      	movs	r2, #0
 800222a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800222c:	4b03      	ldr	r3, [pc, #12]	@ (800223c <MX_SDMMC1_SD_Init+0x38>)
 800222e:	2200      	movs	r2, #0
 8002230:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	20000268 	.word	0x20000268
 8002240:	40012800 	.word	0x40012800

08002244 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002248:	4b14      	ldr	r3, [pc, #80]	@ (800229c <MX_USART2_UART_Init+0x58>)
 800224a:	4a15      	ldr	r2, [pc, #84]	@ (80022a0 <MX_USART2_UART_Init+0x5c>)
 800224c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800224e:	4b13      	ldr	r3, [pc, #76]	@ (800229c <MX_USART2_UART_Init+0x58>)
 8002250:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002254:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002256:	4b11      	ldr	r3, [pc, #68]	@ (800229c <MX_USART2_UART_Init+0x58>)
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800225c:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <MX_USART2_UART_Init+0x58>)
 800225e:	2200      	movs	r2, #0
 8002260:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002262:	4b0e      	ldr	r3, [pc, #56]	@ (800229c <MX_USART2_UART_Init+0x58>)
 8002264:	2200      	movs	r2, #0
 8002266:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002268:	4b0c      	ldr	r3, [pc, #48]	@ (800229c <MX_USART2_UART_Init+0x58>)
 800226a:	220c      	movs	r2, #12
 800226c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800226e:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <MX_USART2_UART_Init+0x58>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002274:	4b09      	ldr	r3, [pc, #36]	@ (800229c <MX_USART2_UART_Init+0x58>)
 8002276:	2200      	movs	r2, #0
 8002278:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800227a:	4b08      	ldr	r3, [pc, #32]	@ (800229c <MX_USART2_UART_Init+0x58>)
 800227c:	2200      	movs	r2, #0
 800227e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002280:	4b06      	ldr	r3, [pc, #24]	@ (800229c <MX_USART2_UART_Init+0x58>)
 8002282:	2200      	movs	r2, #0
 8002284:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002286:	4805      	ldr	r0, [pc, #20]	@ (800229c <MX_USART2_UART_Init+0x58>)
 8002288:	f005 fd3e 	bl	8007d08 <HAL_UART_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002292:	f000 f9e5 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200002ec 	.word	0x200002ec
 80022a0:	40004400 	.word	0x40004400

080022a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	@ 0x28
 80022a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ba:	4b38      	ldr	r3, [pc, #224]	@ (800239c <MX_GPIO_Init+0xf8>)
 80022bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022be:	4a37      	ldr	r2, [pc, #220]	@ (800239c <MX_GPIO_Init+0xf8>)
 80022c0:	f043 0304 	orr.w	r3, r3, #4
 80022c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022c6:	4b35      	ldr	r3, [pc, #212]	@ (800239c <MX_GPIO_Init+0xf8>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022d2:	4b32      	ldr	r3, [pc, #200]	@ (800239c <MX_GPIO_Init+0xf8>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d6:	4a31      	ldr	r2, [pc, #196]	@ (800239c <MX_GPIO_Init+0xf8>)
 80022d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022de:	4b2f      	ldr	r3, [pc, #188]	@ (800239c <MX_GPIO_Init+0xf8>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	4b2c      	ldr	r3, [pc, #176]	@ (800239c <MX_GPIO_Init+0xf8>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ee:	4a2b      	ldr	r2, [pc, #172]	@ (800239c <MX_GPIO_Init+0xf8>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022f6:	4b29      	ldr	r3, [pc, #164]	@ (800239c <MX_GPIO_Init+0xf8>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002302:	4b26      	ldr	r3, [pc, #152]	@ (800239c <MX_GPIO_Init+0xf8>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002306:	4a25      	ldr	r2, [pc, #148]	@ (800239c <MX_GPIO_Init+0xf8>)
 8002308:	f043 0308 	orr.w	r3, r3, #8
 800230c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800230e:	4b23      	ldr	r3, [pc, #140]	@ (800239c <MX_GPIO_Init+0xf8>)
 8002310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231a:	4b20      	ldr	r3, [pc, #128]	@ (800239c <MX_GPIO_Init+0xf8>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	4a1f      	ldr	r2, [pc, #124]	@ (800239c <MX_GPIO_Init+0xf8>)
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002326:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <MX_GPIO_Init+0xf8>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GreenLED_GPIO_Port, GreenLED_Pin, GPIO_PIN_RESET);
 8002332:	2200      	movs	r2, #0
 8002334:	2120      	movs	r1, #32
 8002336:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800233a:	f001 f803 	bl	8003344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UserButton_Pin */
  GPIO_InitStruct.Pin = UserButton_Pin;
 800233e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002344:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserButton_GPIO_Port, &GPIO_InitStruct);
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	4619      	mov	r1, r3
 8002354:	4812      	ldr	r0, [pc, #72]	@ (80023a0 <MX_GPIO_Init+0xfc>)
 8002356:	f000 fe33 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GreenLED_Pin */
  GPIO_InitStruct.Pin = GreenLED_Pin;
 800235a:	2320      	movs	r3, #32
 800235c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235e:	2301      	movs	r3, #1
 8002360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GreenLED_GPIO_Port, &GPIO_InitStruct);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002374:	f000 fe24 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Detect_Pin */
  GPIO_InitStruct.Pin = Detect_Pin;
 8002378:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800237c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Detect_GPIO_Port, &GPIO_InitStruct);
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	4619      	mov	r1, r3
 800238c:	4804      	ldr	r0, [pc, #16]	@ (80023a0 <MX_GPIO_Init+0xfc>)
 800238e:	f000 fe17 	bl	8002fc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002392:	bf00      	nop
 8002394:	3728      	adds	r7, #40	@ 0x28
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	48000800 	.word	0x48000800

080023a4 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(uint8_t ch)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80023ae:	1df9      	adds	r1, r7, #7
 80023b0:	f04f 33ff 	mov.w	r3, #4294967295
 80023b4:	2201      	movs	r2, #1
 80023b6:	4804      	ldr	r0, [pc, #16]	@ (80023c8 <__io_putchar+0x24>)
 80023b8:	f005 fcf4 	bl	8007da4 <HAL_UART_Transmit>
	return ch;
 80023bc:	79fb      	ldrb	r3, [r7, #7]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200002ec 	.word	0x200002ec

080023cc <printParams>:
void printParams(bmp280_params_t* params)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

	//filter
	switch(params->filter)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	785b      	ldrb	r3, [r3, #1]
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d821      	bhi.n	8002420 <printParams+0x54>
 80023dc:	a201      	add	r2, pc, #4	@ (adr r2, 80023e4 <printParams+0x18>)
 80023de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e2:	bf00      	nop
 80023e4:	080023f9 	.word	0x080023f9
 80023e8:	08002401 	.word	0x08002401
 80023ec:	08002409 	.word	0x08002409
 80023f0:	08002411 	.word	0x08002411
 80023f4:	08002419 	.word	0x08002419
	{
	case BMP280_FILTER_OFF:
		printf("\r\nFILTER OFF\r\n");
 80023f8:	4878      	ldr	r0, [pc, #480]	@ (80025dc <printParams+0x210>)
 80023fa:	f00a fa87 	bl	800c90c <puts>
		break;
 80023fe:	e013      	b.n	8002428 <printParams+0x5c>
	case BMP280_FILTER_2:
		printf("\r\nFILTER COEFFICIENT: 2\r\n");
 8002400:	4877      	ldr	r0, [pc, #476]	@ (80025e0 <printParams+0x214>)
 8002402:	f00a fa83 	bl	800c90c <puts>
		break;
 8002406:	e00f      	b.n	8002428 <printParams+0x5c>
	case BMP280_FILTER_4:
		printf("\r\nFILTER COEFFICIENT: 4\r\n");
 8002408:	4876      	ldr	r0, [pc, #472]	@ (80025e4 <printParams+0x218>)
 800240a:	f00a fa7f 	bl	800c90c <puts>
		break;
 800240e:	e00b      	b.n	8002428 <printParams+0x5c>
	case BMP280_FILTER_8:
		printf("\r\nFILTER COEFFICIENT: 8\r\n");
 8002410:	4875      	ldr	r0, [pc, #468]	@ (80025e8 <printParams+0x21c>)
 8002412:	f00a fa7b 	bl	800c90c <puts>
		break;
 8002416:	e007      	b.n	8002428 <printParams+0x5c>
	case BMP280_FILTER_16:
		printf("\r\nFILTER COEFFICIENT: 16\r\n");
 8002418:	4874      	ldr	r0, [pc, #464]	@ (80025ec <printParams+0x220>)
 800241a:	f00a fa77 	bl	800c90c <puts>
		break;
 800241e:	e003      	b.n	8002428 <printParams+0x5c>
	default:
		printf("\r\nFilter code not recognized!\r\n");
 8002420:	4873      	ldr	r0, [pc, #460]	@ (80025f0 <printParams+0x224>)
 8002422:	f00a fa73 	bl	800c90c <puts>
		break;
 8002426:	bf00      	nop
	}
	//mode
	switch(params->mode)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d00e      	beq.n	800244e <printParams+0x82>
 8002430:	2b03      	cmp	r3, #3
 8002432:	dc10      	bgt.n	8002456 <printParams+0x8a>
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <printParams+0x72>
 8002438:	2b01      	cmp	r3, #1
 800243a:	d004      	beq.n	8002446 <printParams+0x7a>
 800243c:	e00b      	b.n	8002456 <printParams+0x8a>
	{
		case BMP280_MODE_SLEEP:
			printf("MODE: SLEEP\r\n");
 800243e:	486d      	ldr	r0, [pc, #436]	@ (80025f4 <printParams+0x228>)
 8002440:	f00a fa64 	bl	800c90c <puts>
			break;
 8002444:	e00b      	b.n	800245e <printParams+0x92>
		case BMP280_MODE_FORCED:
			printf("MODE: FORCED\r\n");
 8002446:	486c      	ldr	r0, [pc, #432]	@ (80025f8 <printParams+0x22c>)
 8002448:	f00a fa60 	bl	800c90c <puts>
			break;
 800244c:	e007      	b.n	800245e <printParams+0x92>
		case BMP280_MODE_NORMAL:
			printf("MODE: NORMAL\r\n");
 800244e:	486b      	ldr	r0, [pc, #428]	@ (80025fc <printParams+0x230>)
 8002450:	f00a fa5c 	bl	800c90c <puts>
			break;
 8002454:	e003      	b.n	800245e <printParams+0x92>
		default:
			printf("Mode code not recognized!\r\n");
 8002456:	486a      	ldr	r0, [pc, #424]	@ (8002600 <printParams+0x234>)
 8002458:	f00a fa58 	bl	800c90c <puts>
			break;
 800245c:	bf00      	nop
	}
	//oversampling
	BMP280_Oversampling* oversampling = &params->oversampling_pressure;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3302      	adds	r3, #2
 8002462:	61fb      	str	r3, [r7, #28]
	const char* text[3] = {"PRESSURE", "TEMPERATURE", "HUMIDITY"};
 8002464:	4a67      	ldr	r2, [pc, #412]	@ (8002604 <printParams+0x238>)
 8002466:	f107 030c 	add.w	r3, r7, #12
 800246a:	ca07      	ldmia	r2, {r0, r1, r2}
 800246c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for(short i = 0; i <3; i++)
 8002470:	2300      	movs	r3, #0
 8002472:	837b      	strh	r3, [r7, #26]
 8002474:	e06b      	b.n	800254e <printParams+0x182>
	{

		switch(*oversampling)
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b05      	cmp	r3, #5
 800247c:	d856      	bhi.n	800252c <printParams+0x160>
 800247e:	a201      	add	r2, pc, #4	@ (adr r2, 8002484 <printParams+0xb8>)
 8002480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002484:	0800249d 	.word	0x0800249d
 8002488:	080024b5 	.word	0x080024b5
 800248c:	080024cd 	.word	0x080024cd
 8002490:	080024e5 	.word	0x080024e5
 8002494:	080024fd 	.word	0x080024fd
 8002498:	08002515 	.word	0x08002515
		{
			case BMP280_SKIPPED:
				printf("%s OVERSAMPLING: SKIPPED\r\n", text[i]);
 800249c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	3320      	adds	r3, #32
 80024a4:	443b      	add	r3, r7
 80024a6:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80024aa:	4619      	mov	r1, r3
 80024ac:	4856      	ldr	r0, [pc, #344]	@ (8002608 <printParams+0x23c>)
 80024ae:	f00a f9c5 	bl	800c83c <iprintf>
				break;
 80024b2:	e03f      	b.n	8002534 <printParams+0x168>
			case BMP280_ULTRA_LOW_POWER:
				printf("%s OVERSAMPLING: ULTRA LOW POWER\r\n", text[i]);
 80024b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	3320      	adds	r3, #32
 80024bc:	443b      	add	r3, r7
 80024be:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80024c2:	4619      	mov	r1, r3
 80024c4:	4851      	ldr	r0, [pc, #324]	@ (800260c <printParams+0x240>)
 80024c6:	f00a f9b9 	bl	800c83c <iprintf>
				break;
 80024ca:	e033      	b.n	8002534 <printParams+0x168>
			case BMP280_LOW_POWER:
				printf("%s OVERSAMPLING: LOW POWER\r\n", text[i]);
 80024cc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	3320      	adds	r3, #32
 80024d4:	443b      	add	r3, r7
 80024d6:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80024da:	4619      	mov	r1, r3
 80024dc:	484c      	ldr	r0, [pc, #304]	@ (8002610 <printParams+0x244>)
 80024de:	f00a f9ad 	bl	800c83c <iprintf>
				break;
 80024e2:	e027      	b.n	8002534 <printParams+0x168>
			case BMP280_STANDARD:
				printf("%s OVERSAMPLING: STANDARD\r\n", text[i]);
 80024e4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	3320      	adds	r3, #32
 80024ec:	443b      	add	r3, r7
 80024ee:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80024f2:	4619      	mov	r1, r3
 80024f4:	4847      	ldr	r0, [pc, #284]	@ (8002614 <printParams+0x248>)
 80024f6:	f00a f9a1 	bl	800c83c <iprintf>
				break;
 80024fa:	e01b      	b.n	8002534 <printParams+0x168>
			case BMP280_HIGH_RES:
				printf("%s OVERSAMPLING: HIGH RESOLUTION\r\n", text[i]);
 80024fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	3320      	adds	r3, #32
 8002504:	443b      	add	r3, r7
 8002506:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800250a:	4619      	mov	r1, r3
 800250c:	4842      	ldr	r0, [pc, #264]	@ (8002618 <printParams+0x24c>)
 800250e:	f00a f995 	bl	800c83c <iprintf>
				break;
 8002512:	e00f      	b.n	8002534 <printParams+0x168>
			case BMP280_ULTRA_HIGH_RES:
				printf("%s OVERSAMPLING: ULTRA HIGH RESOLUTION\r\n", text[i]);
 8002514:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	3320      	adds	r3, #32
 800251c:	443b      	add	r3, r7
 800251e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8002522:	4619      	mov	r1, r3
 8002524:	483d      	ldr	r0, [pc, #244]	@ (800261c <printParams+0x250>)
 8002526:	f00a f989 	bl	800c83c <iprintf>
				break;
 800252a:	e003      	b.n	8002534 <printParams+0x168>
			default:
				printf("Oversampling code not recognized!\r\n");
 800252c:	483c      	ldr	r0, [pc, #240]	@ (8002620 <printParams+0x254>)
 800252e:	f00a f9ed 	bl	800c90c <puts>
				break;
 8002532:	bf00      	nop
		}
		if(i <2)
 8002534:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002538:	2b01      	cmp	r3, #1
 800253a:	dc02      	bgt.n	8002542 <printParams+0x176>
			++oversampling;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	3301      	adds	r3, #1
 8002540:	61fb      	str	r3, [r7, #28]
	for(short i = 0; i <3; i++)
 8002542:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002546:	b29b      	uxth	r3, r3
 8002548:	3301      	adds	r3, #1
 800254a:	b29b      	uxth	r3, r3
 800254c:	837b      	strh	r3, [r7, #26]
 800254e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002552:	2b02      	cmp	r3, #2
 8002554:	dd8f      	ble.n	8002476 <printParams+0xaa>
	}

	//standby

	switch(params->standby)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	795b      	ldrb	r3, [r3, #5]
 800255a:	2b07      	cmp	r3, #7
 800255c:	d832      	bhi.n	80025c4 <printParams+0x1f8>
 800255e:	a201      	add	r2, pc, #4	@ (adr r2, 8002564 <printParams+0x198>)
 8002560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002564:	08002585 	.word	0x08002585
 8002568:	0800258d 	.word	0x0800258d
 800256c:	08002595 	.word	0x08002595
 8002570:	0800259d 	.word	0x0800259d
 8002574:	080025a5 	.word	0x080025a5
 8002578:	080025ad 	.word	0x080025ad
 800257c:	080025b5 	.word	0x080025b5
 8002580:	080025bd 	.word	0x080025bd
	{
	case BMP280_STANDBY_05:
		printf("STANDBY TIME 0.5 ms\r\n");
 8002584:	4827      	ldr	r0, [pc, #156]	@ (8002624 <printParams+0x258>)
 8002586:	f00a f9c1 	bl	800c90c <puts>
		break;
 800258a:	e01f      	b.n	80025cc <printParams+0x200>
	case BMP280_STANDBY_62:
		printf("STANDBY TIME 62 ms\r\n");
 800258c:	4826      	ldr	r0, [pc, #152]	@ (8002628 <printParams+0x25c>)
 800258e:	f00a f9bd 	bl	800c90c <puts>
		break;
 8002592:	e01b      	b.n	80025cc <printParams+0x200>
	case BMP280_STANDBY_125:
		printf("STANDBY TIME 125 ms\r\n");
 8002594:	4825      	ldr	r0, [pc, #148]	@ (800262c <printParams+0x260>)
 8002596:	f00a f9b9 	bl	800c90c <puts>
		break;
 800259a:	e017      	b.n	80025cc <printParams+0x200>
	case BMP280_STANDBY_250:
		printf("STANDBY TIME 250 ms\r\n");
 800259c:	4824      	ldr	r0, [pc, #144]	@ (8002630 <printParams+0x264>)
 800259e:	f00a f9b5 	bl	800c90c <puts>
		break;
 80025a2:	e013      	b.n	80025cc <printParams+0x200>
	case BMP280_STANDBY_500:
		printf("STANDBY TIME 500 ms\r\n");
 80025a4:	4823      	ldr	r0, [pc, #140]	@ (8002634 <printParams+0x268>)
 80025a6:	f00a f9b1 	bl	800c90c <puts>
		break;
 80025aa:	e00f      	b.n	80025cc <printParams+0x200>
	case BMP280_STANDBY_1000:
		printf("STANDBY TIME 1s\r\n");
 80025ac:	4822      	ldr	r0, [pc, #136]	@ (8002638 <printParams+0x26c>)
 80025ae:	f00a f9ad 	bl	800c90c <puts>
		break;
 80025b2:	e00b      	b.n	80025cc <printParams+0x200>
	case BMP280_STANDBY_2000:
		printf("STANDBY TIME 2s\r\n");
 80025b4:	4821      	ldr	r0, [pc, #132]	@ (800263c <printParams+0x270>)
 80025b6:	f00a f9a9 	bl	800c90c <puts>
		break;
 80025ba:	e007      	b.n	80025cc <printParams+0x200>
	case BMP280_STANDBY_4000:
		printf("STANDBY TIME 4s\r\n");
 80025bc:	4820      	ldr	r0, [pc, #128]	@ (8002640 <printParams+0x274>)
 80025be:	f00a f9a5 	bl	800c90c <puts>
		break;
 80025c2:	e003      	b.n	80025cc <printParams+0x200>
	default:
		printf("Standby code not recognized\r\n");
 80025c4:	481f      	ldr	r0, [pc, #124]	@ (8002644 <printParams+0x278>)
 80025c6:	f00a f9a1 	bl	800c90c <puts>
		break;
 80025ca:	bf00      	nop

	}
	printf("\r\n");
 80025cc:	481e      	ldr	r0, [pc, #120]	@ (8002648 <printParams+0x27c>)
 80025ce:	f00a f99d 	bl	800c90c <puts>
}
 80025d2:	bf00      	nop
 80025d4:	3720      	adds	r7, #32
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	080102e4 	.word	0x080102e4
 80025e0:	080102f4 	.word	0x080102f4
 80025e4:	08010310 	.word	0x08010310
 80025e8:	0801032c 	.word	0x0801032c
 80025ec:	08010348 	.word	0x08010348
 80025f0:	08010364 	.word	0x08010364
 80025f4:	08010384 	.word	0x08010384
 80025f8:	08010394 	.word	0x08010394
 80025fc:	080103a4 	.word	0x080103a4
 8002600:	080103b4 	.word	0x080103b4
 8002604:	080105b8 	.word	0x080105b8
 8002608:	080103d0 	.word	0x080103d0
 800260c:	080103ec 	.word	0x080103ec
 8002610:	08010410 	.word	0x08010410
 8002614:	08010430 	.word	0x08010430
 8002618:	0801044c 	.word	0x0801044c
 800261c:	08010470 	.word	0x08010470
 8002620:	0801049c 	.word	0x0801049c
 8002624:	080104c0 	.word	0x080104c0
 8002628:	080104d8 	.word	0x080104d8
 800262c:	080104ec 	.word	0x080104ec
 8002630:	08010504 	.word	0x08010504
 8002634:	0801051c 	.word	0x0801051c
 8002638:	08010534 	.word	0x08010534
 800263c:	08010548 	.word	0x08010548
 8002640:	0801055c 	.word	0x0801055c
 8002644:	08010570 	.word	0x08010570
 8002648:	08010590 	.word	0x08010590

0800264c <HAL_RTCEx_WakeUpTimerEventCallback>:


void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef* handler)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	if(handler == &hrtc)
	{
		//printf("Woke up\r\n");

	}
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002664:	b672      	cpsid	i
}
 8002666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002668:	bf00      	nop
 800266a:	e7fd      	b.n	8002668 <Error_Handler+0x8>

0800266c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	4b0f      	ldr	r3, [pc, #60]	@ (80026b0 <HAL_MspInit+0x44>)
 8002674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002676:	4a0e      	ldr	r2, [pc, #56]	@ (80026b0 <HAL_MspInit+0x44>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6613      	str	r3, [r2, #96]	@ 0x60
 800267e:	4b0c      	ldr	r3, [pc, #48]	@ (80026b0 <HAL_MspInit+0x44>)
 8002680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	607b      	str	r3, [r7, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	4b09      	ldr	r3, [pc, #36]	@ (80026b0 <HAL_MspInit+0x44>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268e:	4a08      	ldr	r2, [pc, #32]	@ (80026b0 <HAL_MspInit+0x44>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002694:	6593      	str	r3, [r2, #88]	@ 0x58
 8002696:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <HAL_MspInit+0x44>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000

080026b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b0ac      	sub	sp, #176	@ 0xb0
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	2288      	movs	r2, #136	@ 0x88
 80026d2:	2100      	movs	r1, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f00a fa4d 	bl	800cb74 <memset>
  if(hi2c->Instance==I2C1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a21      	ldr	r2, [pc, #132]	@ (8002764 <HAL_I2C_MspInit+0xb0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d13b      	bne.n	800275c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80026e4:	2340      	movs	r3, #64	@ 0x40
 80026e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80026e8:	2300      	movs	r3, #0
 80026ea:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	4618      	mov	r0, r3
 80026f2:	f002 fb1d 	bl	8004d30 <HAL_RCCEx_PeriphCLKConfig>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80026fc:	f7ff ffb0 	bl	8002660 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002700:	4b19      	ldr	r3, [pc, #100]	@ (8002768 <HAL_I2C_MspInit+0xb4>)
 8002702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002704:	4a18      	ldr	r2, [pc, #96]	@ (8002768 <HAL_I2C_MspInit+0xb4>)
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800270c:	4b16      	ldr	r3, [pc, #88]	@ (8002768 <HAL_I2C_MspInit+0xb4>)
 800270e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002718:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800271c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002720:	2312      	movs	r3, #18
 8002722:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272c:	2303      	movs	r3, #3
 800272e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002732:	2304      	movs	r3, #4
 8002734:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002738:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800273c:	4619      	mov	r1, r3
 800273e:	480b      	ldr	r0, [pc, #44]	@ (800276c <HAL_I2C_MspInit+0xb8>)
 8002740:	f000 fc3e 	bl	8002fc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002744:	4b08      	ldr	r3, [pc, #32]	@ (8002768 <HAL_I2C_MspInit+0xb4>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002748:	4a07      	ldr	r2, [pc, #28]	@ (8002768 <HAL_I2C_MspInit+0xb4>)
 800274a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800274e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002750:	4b05      	ldr	r3, [pc, #20]	@ (8002768 <HAL_I2C_MspInit+0xb4>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002754:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800275c:	bf00      	nop
 800275e:	37b0      	adds	r7, #176	@ 0xb0
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40005400 	.word	0x40005400
 8002768:	40021000 	.word	0x40021000
 800276c:	48000400 	.word	0x48000400

08002770 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b0a4      	sub	sp, #144	@ 0x90
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002778:	f107 0308 	add.w	r3, r7, #8
 800277c:	2288      	movs	r2, #136	@ 0x88
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f00a f9f7 	bl	800cb74 <memset>
  if(hrtc->Instance==RTC)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a14      	ldr	r2, [pc, #80]	@ (80027dc <HAL_RTC_MspInit+0x6c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d120      	bne.n	80027d2 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002790:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002794:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002796:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800279a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800279e:	f107 0308 	add.w	r3, r7, #8
 80027a2:	4618      	mov	r0, r3
 80027a4:	f002 fac4 	bl	8004d30 <HAL_RCCEx_PeriphCLKConfig>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80027ae:	f7ff ff57 	bl	8002660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80027b2:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <HAL_RTC_MspInit+0x70>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b8:	4a09      	ldr	r2, [pc, #36]	@ (80027e0 <HAL_RTC_MspInit+0x70>)
 80027ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2100      	movs	r1, #0
 80027c6:	2003      	movs	r0, #3
 80027c8:	f000 fbc3 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80027cc:	2003      	movs	r0, #3
 80027ce:	f000 fbdc 	bl	8002f8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80027d2:	bf00      	nop
 80027d4:	3790      	adds	r7, #144	@ 0x90
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40002800 	.word	0x40002800
 80027e0:	40021000 	.word	0x40021000

080027e4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b0ac      	sub	sp, #176	@ 0xb0
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	2288      	movs	r2, #136	@ 0x88
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f00a f9b5 	bl	800cb74 <memset>
  if(hsd->Instance==SDMMC1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a33      	ldr	r2, [pc, #204]	@ (80028dc <HAL_SD_MspInit+0xf8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d15f      	bne.n	80028d4 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8002814:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002818:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_MSI;
 800281a:	f04f 6340 	mov.w	r3, #201326592	@ 0xc000000
 800281e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	4618      	mov	r0, r3
 8002828:	f002 fa82 	bl	8004d30 <HAL_RCCEx_PeriphCLKConfig>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8002832:	f7ff ff15 	bl	8002660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002836:	4b2a      	ldr	r3, [pc, #168]	@ (80028e0 <HAL_SD_MspInit+0xfc>)
 8002838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800283a:	4a29      	ldr	r2, [pc, #164]	@ (80028e0 <HAL_SD_MspInit+0xfc>)
 800283c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002840:	6613      	str	r3, [r2, #96]	@ 0x60
 8002842:	4b27      	ldr	r3, [pc, #156]	@ (80028e0 <HAL_SD_MspInit+0xfc>)
 8002844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800284e:	4b24      	ldr	r3, [pc, #144]	@ (80028e0 <HAL_SD_MspInit+0xfc>)
 8002850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002852:	4a23      	ldr	r2, [pc, #140]	@ (80028e0 <HAL_SD_MspInit+0xfc>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800285a:	4b21      	ldr	r3, [pc, #132]	@ (80028e0 <HAL_SD_MspInit+0xfc>)
 800285c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002866:	4b1e      	ldr	r3, [pc, #120]	@ (80028e0 <HAL_SD_MspInit+0xfc>)
 8002868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286a:	4a1d      	ldr	r2, [pc, #116]	@ (80028e0 <HAL_SD_MspInit+0xfc>)
 800286c:	f043 0308 	orr.w	r3, r3, #8
 8002870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002872:	4b1b      	ldr	r3, [pc, #108]	@ (80028e0 <HAL_SD_MspInit+0xfc>)
 8002874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800287e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8002882:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002892:	2303      	movs	r3, #3
 8002894:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002898:	230c      	movs	r3, #12
 800289a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800289e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80028a2:	4619      	mov	r1, r3
 80028a4:	480f      	ldr	r0, [pc, #60]	@ (80028e4 <HAL_SD_MspInit+0x100>)
 80028a6:	f000 fb8b 	bl	8002fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028aa:	2304      	movs	r3, #4
 80028ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028bc:	2303      	movs	r3, #3
 80028be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80028c2:	230c      	movs	r3, #12
 80028c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80028cc:	4619      	mov	r1, r3
 80028ce:	4806      	ldr	r0, [pc, #24]	@ (80028e8 <HAL_SD_MspInit+0x104>)
 80028d0:	f000 fb76 	bl	8002fc0 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80028d4:	bf00      	nop
 80028d6:	37b0      	adds	r7, #176	@ 0xb0
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40012800 	.word	0x40012800
 80028e0:	40021000 	.word	0x40021000
 80028e4:	48000800 	.word	0x48000800
 80028e8:	48000c00 	.word	0x48000c00

080028ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b0ac      	sub	sp, #176	@ 0xb0
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	2288      	movs	r2, #136	@ 0x88
 800290a:	2100      	movs	r1, #0
 800290c:	4618      	mov	r0, r3
 800290e:	f00a f931 	bl	800cb74 <memset>
  if(huart->Instance==USART2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a21      	ldr	r2, [pc, #132]	@ (800299c <HAL_UART_MspInit+0xb0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d13b      	bne.n	8002994 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800291c:	2302      	movs	r3, #2
 800291e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002920:	2300      	movs	r3, #0
 8002922:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	4618      	mov	r0, r3
 800292a:	f002 fa01 	bl	8004d30 <HAL_RCCEx_PeriphCLKConfig>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002934:	f7ff fe94 	bl	8002660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002938:	4b19      	ldr	r3, [pc, #100]	@ (80029a0 <HAL_UART_MspInit+0xb4>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293c:	4a18      	ldr	r2, [pc, #96]	@ (80029a0 <HAL_UART_MspInit+0xb4>)
 800293e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002942:	6593      	str	r3, [r2, #88]	@ 0x58
 8002944:	4b16      	ldr	r3, [pc, #88]	@ (80029a0 <HAL_UART_MspInit+0xb4>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002950:	4b13      	ldr	r3, [pc, #76]	@ (80029a0 <HAL_UART_MspInit+0xb4>)
 8002952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002954:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <HAL_UART_MspInit+0xb4>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800295c:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <HAL_UART_MspInit+0xb4>)
 800295e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002968:	230c      	movs	r3, #12
 800296a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296e:	2302      	movs	r3, #2
 8002970:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297a:	2303      	movs	r3, #3
 800297c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002980:	2307      	movs	r3, #7
 8002982:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002986:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800298a:	4619      	mov	r1, r3
 800298c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002990:	f000 fb16 	bl	8002fc0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002994:	bf00      	nop
 8002996:	37b0      	adds	r7, #176	@ 0xb0
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40004400 	.word	0x40004400
 80029a0:	40021000 	.word	0x40021000

080029a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <NMI_Handler+0x4>

080029ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <HardFault_Handler+0x4>

080029b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029b8:	bf00      	nop
 80029ba:	e7fd      	b.n	80029b8 <MemManage_Handler+0x4>

080029bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <BusFault_Handler+0x4>

080029c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029c8:	bf00      	nop
 80029ca:	e7fd      	b.n	80029c8 <UsageFault_Handler+0x4>

080029cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029fa:	f000 f96b 	bl	8002cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002a08:	4802      	ldr	r0, [pc, #8]	@ (8002a14 <RTC_WKUP_IRQHandler+0x10>)
 8002a0a:	f003 ff8f 	bl	800692c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000244 	.word	0x20000244

08002a18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return 1;
 8002a1c:	2301      	movs	r3, #1
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <_kill>:

int _kill(int pid, int sig)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a32:	f00a f8f1 	bl	800cc18 <__errno>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2216      	movs	r2, #22
 8002a3a:	601a      	str	r2, [r3, #0]
  return -1;
 8002a3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_exit>:

void _exit (int status)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ffe7 	bl	8002a28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a5a:	bf00      	nop
 8002a5c:	e7fd      	b.n	8002a5a <_exit+0x12>

08002a5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	e00a      	b.n	8002a86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a70:	f3af 8000 	nop.w
 8002a74:	4601      	mov	r1, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	60ba      	str	r2, [r7, #8]
 8002a7c:	b2ca      	uxtb	r2, r1
 8002a7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	3301      	adds	r3, #1
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	dbf0      	blt.n	8002a70 <_read+0x12>
  }

  return len;
 8002a8e:	687b      	ldr	r3, [r7, #4]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	e009      	b.n	8002abe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	60ba      	str	r2, [r7, #8]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fc76 	bl	80023a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3301      	adds	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	dbf1      	blt.n	8002aaa <_write+0x12>
  }
  return len;
 8002ac6:	687b      	ldr	r3, [r7, #4]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <_close>:

int _close(int file)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ad8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002af8:	605a      	str	r2, [r3, #4]
  return 0;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_isatty>:

int _isatty(int file)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b10:	2301      	movs	r3, #1
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b085      	sub	sp, #20
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b40:	4a14      	ldr	r2, [pc, #80]	@ (8002b94 <_sbrk+0x5c>)
 8002b42:	4b15      	ldr	r3, [pc, #84]	@ (8002b98 <_sbrk+0x60>)
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b4c:	4b13      	ldr	r3, [pc, #76]	@ (8002b9c <_sbrk+0x64>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b54:	4b11      	ldr	r3, [pc, #68]	@ (8002b9c <_sbrk+0x64>)
 8002b56:	4a12      	ldr	r2, [pc, #72]	@ (8002ba0 <_sbrk+0x68>)
 8002b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b5a:	4b10      	ldr	r3, [pc, #64]	@ (8002b9c <_sbrk+0x64>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d207      	bcs.n	8002b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b68:	f00a f856 	bl	800cc18 <__errno>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	220c      	movs	r2, #12
 8002b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295
 8002b76:	e009      	b.n	8002b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b78:	4b08      	ldr	r3, [pc, #32]	@ (8002b9c <_sbrk+0x64>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b7e:	4b07      	ldr	r3, [pc, #28]	@ (8002b9c <_sbrk+0x64>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	4a05      	ldr	r2, [pc, #20]	@ (8002b9c <_sbrk+0x64>)
 8002b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20018000 	.word	0x20018000
 8002b98:	00000400 	.word	0x00000400
 8002b9c:	200003c4 	.word	0x200003c4
 8002ba0:	20000788 	.word	0x20000788

08002ba4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ba8:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <SystemInit+0x20>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bae:	4a05      	ldr	r2, [pc, #20]	@ (8002bc4 <SystemInit+0x20>)
 8002bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bcc:	f7ff ffea 	bl	8002ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bd0:	480c      	ldr	r0, [pc, #48]	@ (8002c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bd2:	490d      	ldr	r1, [pc, #52]	@ (8002c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002c0c <LoopForever+0xe>)
  movs r3, #0
 8002bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bd8:	e002      	b.n	8002be0 <LoopCopyDataInit>

08002bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bde:	3304      	adds	r3, #4

08002be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be4:	d3f9      	bcc.n	8002bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002be6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002be8:	4c0a      	ldr	r4, [pc, #40]	@ (8002c14 <LoopForever+0x16>)
  movs r3, #0
 8002bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bec:	e001      	b.n	8002bf2 <LoopFillZerobss>

08002bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bf0:	3204      	adds	r2, #4

08002bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf4:	d3fb      	bcc.n	8002bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bf6:	f00a f815 	bl	800cc24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bfa:	f7ff f89b 	bl	8001d34 <main>

08002bfe <LoopForever>:

LoopForever:
    b LoopForever
 8002bfe:	e7fe      	b.n	8002bfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c08:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002c0c:	08010b20 	.word	0x08010b20
  ldr r2, =_sbss
 8002c10:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002c14:	20000784 	.word	0x20000784

08002c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c18:	e7fe      	b.n	8002c18 <ADC1_2_IRQHandler>
	...

08002c1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c26:	4b0c      	ldr	r3, [pc, #48]	@ (8002c58 <HAL_Init+0x3c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	@ (8002c58 <HAL_Init+0x3c>)
 8002c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c30:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c32:	2003      	movs	r0, #3
 8002c34:	f000 f982 	bl	8002f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f000 f80f 	bl	8002c5c <HAL_InitTick>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	71fb      	strb	r3, [r7, #7]
 8002c48:	e001      	b.n	8002c4e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c4a:	f7ff fd0f 	bl	800266c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40022000 	.word	0x40022000

08002c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c68:	4b17      	ldr	r3, [pc, #92]	@ (8002cc8 <HAL_InitTick+0x6c>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d023      	beq.n	8002cb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c70:	4b16      	ldr	r3, [pc, #88]	@ (8002ccc <HAL_InitTick+0x70>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b14      	ldr	r3, [pc, #80]	@ (8002cc8 <HAL_InitTick+0x6c>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f98d 	bl	8002fa6 <HAL_SYSTICK_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10f      	bne.n	8002cb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b0f      	cmp	r3, #15
 8002c96:	d809      	bhi.n	8002cac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca0:	f000 f957 	bl	8002f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd0 <HAL_InitTick+0x74>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e007      	b.n	8002cbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
 8002cb0:	e004      	b.n	8002cbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	e001      	b.n	8002cbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000008 	.word	0x20000008
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cd8:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <HAL_IncTick+0x20>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <HAL_IncTick+0x24>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	4a04      	ldr	r2, [pc, #16]	@ (8002cf8 <HAL_IncTick+0x24>)
 8002ce6:	6013      	str	r3, [r2, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000008 	.word	0x20000008
 8002cf8:	200003c8 	.word	0x200003c8

08002cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8002d00:	4b03      	ldr	r3, [pc, #12]	@ (8002d10 <HAL_GetTick+0x14>)
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	200003c8 	.word	0x200003c8

08002d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d1c:	f7ff ffee 	bl	8002cfc <HAL_GetTick>
 8002d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2c:	d005      	beq.n	8002d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <HAL_Delay+0x44>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4413      	add	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d3a:	bf00      	nop
 8002d3c:	f7ff ffde 	bl	8002cfc <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d8f7      	bhi.n	8002d3c <HAL_Delay+0x28>
  {
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000008 	.word	0x20000008

08002d5c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002d60:	4b05      	ldr	r3, [pc, #20]	@ (8002d78 <HAL_SuspendTick+0x1c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a04      	ldr	r2, [pc, #16]	@ (8002d78 <HAL_SuspendTick+0x1c>)
 8002d66:	f023 0302 	bic.w	r3, r3, #2
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000e010 	.word	0xe000e010

08002d7c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002d80:	4b05      	ldr	r3, [pc, #20]	@ (8002d98 <HAL_ResumeTick+0x1c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a04      	ldr	r2, [pc, #16]	@ (8002d98 <HAL_ResumeTick+0x1c>)
 8002d86:	f043 0302 	orr.w	r3, r3, #2
 8002d8a:	6013      	str	r3, [r2, #0]
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000e010 	.word	0xe000e010

08002d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dac:	4b0c      	ldr	r3, [pc, #48]	@ (8002de0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002db8:	4013      	ands	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dce:	4a04      	ldr	r2, [pc, #16]	@ (8002de0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	60d3      	str	r3, [r2, #12]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de8:	4b04      	ldr	r3, [pc, #16]	@ (8002dfc <__NVIC_GetPriorityGrouping+0x18>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	0a1b      	lsrs	r3, r3, #8
 8002dee:	f003 0307 	and.w	r3, r3, #7
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	db0b      	blt.n	8002e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	f003 021f 	and.w	r2, r3, #31
 8002e18:	4907      	ldr	r1, [pc, #28]	@ (8002e38 <__NVIC_EnableIRQ+0x38>)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2001      	movs	r0, #1
 8002e22:	fa00 f202 	lsl.w	r2, r0, r2
 8002e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000e100 	.word	0xe000e100

08002e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	6039      	str	r1, [r7, #0]
 8002e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	db0a      	blt.n	8002e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	490c      	ldr	r1, [pc, #48]	@ (8002e88 <__NVIC_SetPriority+0x4c>)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	0112      	lsls	r2, r2, #4
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	440b      	add	r3, r1
 8002e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e64:	e00a      	b.n	8002e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4908      	ldr	r1, [pc, #32]	@ (8002e8c <__NVIC_SetPriority+0x50>)
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	3b04      	subs	r3, #4
 8002e74:	0112      	lsls	r2, r2, #4
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	440b      	add	r3, r1
 8002e7a:	761a      	strb	r2, [r3, #24]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000e100 	.word	0xe000e100
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b089      	sub	sp, #36	@ 0x24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f1c3 0307 	rsb	r3, r3, #7
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	bf28      	it	cs
 8002eae:	2304      	movcs	r3, #4
 8002eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	2b06      	cmp	r3, #6
 8002eb8:	d902      	bls.n	8002ec0 <NVIC_EncodePriority+0x30>
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3b03      	subs	r3, #3
 8002ebe:	e000      	b.n	8002ec2 <NVIC_EncodePriority+0x32>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43d9      	mvns	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	4313      	orrs	r3, r2
         );
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	@ 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f08:	d301      	bcc.n	8002f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00f      	b.n	8002f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f38 <SysTick_Config+0x40>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f16:	210f      	movs	r1, #15
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	f7ff ff8e 	bl	8002e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f20:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <SysTick_Config+0x40>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f26:	4b04      	ldr	r3, [pc, #16]	@ (8002f38 <SysTick_Config+0x40>)
 8002f28:	2207      	movs	r2, #7
 8002f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	e000e010 	.word	0xe000e010

08002f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff29 	bl	8002d9c <__NVIC_SetPriorityGrouping>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f64:	f7ff ff3e 	bl	8002de4 <__NVIC_GetPriorityGrouping>
 8002f68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	6978      	ldr	r0, [r7, #20]
 8002f70:	f7ff ff8e 	bl	8002e90 <NVIC_EncodePriority>
 8002f74:	4602      	mov	r2, r0
 8002f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff5d 	bl	8002e3c <__NVIC_SetPriority>
}
 8002f82:	bf00      	nop
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	4603      	mov	r3, r0
 8002f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff31 	bl	8002e00 <__NVIC_EnableIRQ>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff ffa2 	bl	8002ef8 <SysTick_Config>
 8002fb4:	4603      	mov	r3, r0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fce:	e17f      	b.n	80032d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 8171 	beq.w	80032ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d005      	beq.n	8003000 <HAL_GPIO_Init+0x40>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d130      	bne.n	8003062 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	2203      	movs	r2, #3
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003036:	2201      	movs	r2, #1
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	f003 0201 	and.w	r2, r3, #1
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b03      	cmp	r3, #3
 800306c:	d118      	bne.n	80030a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003072:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003074:	2201      	movs	r2, #1
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4013      	ands	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	08db      	lsrs	r3, r3, #3
 800308a:	f003 0201 	and.w	r2, r3, #1
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d017      	beq.n	80030dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	2203      	movs	r2, #3
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d123      	bne.n	8003130 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	08da      	lsrs	r2, r3, #3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3208      	adds	r2, #8
 80030f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	220f      	movs	r2, #15
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	08da      	lsrs	r2, r3, #3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3208      	adds	r2, #8
 800312a:	6939      	ldr	r1, [r7, #16]
 800312c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	2203      	movs	r2, #3
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4013      	ands	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0203 	and.w	r2, r3, #3
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80ac 	beq.w	80032ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003172:	4b5f      	ldr	r3, [pc, #380]	@ (80032f0 <HAL_GPIO_Init+0x330>)
 8003174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003176:	4a5e      	ldr	r2, [pc, #376]	@ (80032f0 <HAL_GPIO_Init+0x330>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	6613      	str	r3, [r2, #96]	@ 0x60
 800317e:	4b5c      	ldr	r3, [pc, #368]	@ (80032f0 <HAL_GPIO_Init+0x330>)
 8003180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800318a:	4a5a      	ldr	r2, [pc, #360]	@ (80032f4 <HAL_GPIO_Init+0x334>)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	3302      	adds	r3, #2
 8003192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003196:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	220f      	movs	r2, #15
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4013      	ands	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031b4:	d025      	beq.n	8003202 <HAL_GPIO_Init+0x242>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a4f      	ldr	r2, [pc, #316]	@ (80032f8 <HAL_GPIO_Init+0x338>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d01f      	beq.n	80031fe <HAL_GPIO_Init+0x23e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a4e      	ldr	r2, [pc, #312]	@ (80032fc <HAL_GPIO_Init+0x33c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d019      	beq.n	80031fa <HAL_GPIO_Init+0x23a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a4d      	ldr	r2, [pc, #308]	@ (8003300 <HAL_GPIO_Init+0x340>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <HAL_GPIO_Init+0x236>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a4c      	ldr	r2, [pc, #304]	@ (8003304 <HAL_GPIO_Init+0x344>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00d      	beq.n	80031f2 <HAL_GPIO_Init+0x232>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003308 <HAL_GPIO_Init+0x348>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <HAL_GPIO_Init+0x22e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a4a      	ldr	r2, [pc, #296]	@ (800330c <HAL_GPIO_Init+0x34c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d101      	bne.n	80031ea <HAL_GPIO_Init+0x22a>
 80031e6:	2306      	movs	r3, #6
 80031e8:	e00c      	b.n	8003204 <HAL_GPIO_Init+0x244>
 80031ea:	2307      	movs	r3, #7
 80031ec:	e00a      	b.n	8003204 <HAL_GPIO_Init+0x244>
 80031ee:	2305      	movs	r3, #5
 80031f0:	e008      	b.n	8003204 <HAL_GPIO_Init+0x244>
 80031f2:	2304      	movs	r3, #4
 80031f4:	e006      	b.n	8003204 <HAL_GPIO_Init+0x244>
 80031f6:	2303      	movs	r3, #3
 80031f8:	e004      	b.n	8003204 <HAL_GPIO_Init+0x244>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e002      	b.n	8003204 <HAL_GPIO_Init+0x244>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_GPIO_Init+0x244>
 8003202:	2300      	movs	r3, #0
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	f002 0203 	and.w	r2, r2, #3
 800320a:	0092      	lsls	r2, r2, #2
 800320c:	4093      	lsls	r3, r2
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003214:	4937      	ldr	r1, [pc, #220]	@ (80032f4 <HAL_GPIO_Init+0x334>)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	3302      	adds	r3, #2
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003222:	4b3b      	ldr	r3, [pc, #236]	@ (8003310 <HAL_GPIO_Init+0x350>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	43db      	mvns	r3, r3
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003246:	4a32      	ldr	r2, [pc, #200]	@ (8003310 <HAL_GPIO_Init+0x350>)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800324c:	4b30      	ldr	r3, [pc, #192]	@ (8003310 <HAL_GPIO_Init+0x350>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	43db      	mvns	r3, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003270:	4a27      	ldr	r2, [pc, #156]	@ (8003310 <HAL_GPIO_Init+0x350>)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003276:	4b26      	ldr	r3, [pc, #152]	@ (8003310 <HAL_GPIO_Init+0x350>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	43db      	mvns	r3, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4013      	ands	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800329a:	4a1d      	ldr	r2, [pc, #116]	@ (8003310 <HAL_GPIO_Init+0x350>)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003310 <HAL_GPIO_Init+0x350>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4013      	ands	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032c4:	4a12      	ldr	r2, [pc, #72]	@ (8003310 <HAL_GPIO_Init+0x350>)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	3301      	adds	r3, #1
 80032ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	fa22 f303 	lsr.w	r3, r2, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f47f ae78 	bne.w	8002fd0 <HAL_GPIO_Init+0x10>
  }
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40010000 	.word	0x40010000
 80032f8:	48000400 	.word	0x48000400
 80032fc:	48000800 	.word	0x48000800
 8003300:	48000c00 	.word	0x48000c00
 8003304:	48001000 	.word	0x48001000
 8003308:	48001400 	.word	0x48001400
 800330c:	48001800 	.word	0x48001800
 8003310:	40010400 	.word	0x40010400

08003314 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	887b      	ldrh	r3, [r7, #2]
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	e001      	b.n	8003336 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003332:	2300      	movs	r3, #0
 8003334:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003336:	7bfb      	ldrb	r3, [r7, #15]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	807b      	strh	r3, [r7, #2]
 8003350:	4613      	mov	r3, r2
 8003352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003354:	787b      	ldrb	r3, [r7, #1]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800335a:	887a      	ldrh	r2, [r7, #2]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003360:	e002      	b.n	8003368 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4013      	ands	r3, r2
 800338c:	041a      	lsls	r2, r3, #16
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	43d9      	mvns	r1, r3
 8003392:	887b      	ldrh	r3, [r7, #2]
 8003394:	400b      	ands	r3, r1
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	619a      	str	r2, [r3, #24]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e08d      	b.n	80034d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff f970 	bl	80026b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2224      	movs	r2, #36	@ 0x24
 80033d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0201 	bic.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003408:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d107      	bne.n	8003422 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	e006      	b.n	8003430 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800342e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d108      	bne.n	800344a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	e007      	b.n	800345a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003458:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003468:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800346c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800347c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69d9      	ldr	r1, [r3, #28]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1a      	ldr	r2, [r3, #32]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	4608      	mov	r0, r1
 80034ea:	4611      	mov	r1, r2
 80034ec:	461a      	mov	r2, r3
 80034ee:	4603      	mov	r3, r0
 80034f0:	817b      	strh	r3, [r7, #10]
 80034f2:	460b      	mov	r3, r1
 80034f4:	813b      	strh	r3, [r7, #8]
 80034f6:	4613      	mov	r3, r2
 80034f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b20      	cmp	r3, #32
 8003504:	f040 80f9 	bne.w	80036fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_I2C_Mem_Write+0x34>
 800350e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003510:	2b00      	cmp	r3, #0
 8003512:	d105      	bne.n	8003520 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800351a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0ed      	b.n	80036fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_I2C_Mem_Write+0x4e>
 800352a:	2302      	movs	r3, #2
 800352c:	e0e6      	b.n	80036fc <HAL_I2C_Mem_Write+0x21c>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003536:	f7ff fbe1 	bl	8002cfc <HAL_GetTick>
 800353a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2319      	movs	r3, #25
 8003542:	2201      	movs	r2, #1
 8003544:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 fac3 	bl	8003ad4 <I2C_WaitOnFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0d1      	b.n	80036fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2221      	movs	r2, #33	@ 0x21
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2240      	movs	r2, #64	@ 0x40
 8003564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a3a      	ldr	r2, [r7, #32]
 8003572:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003578:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003580:	88f8      	ldrh	r0, [r7, #6]
 8003582:	893a      	ldrh	r2, [r7, #8]
 8003584:	8979      	ldrh	r1, [r7, #10]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	4603      	mov	r3, r0
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f9d3 	bl	800393c <I2C_RequestMemoryWrite>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0a9      	b.n	80036fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2bff      	cmp	r3, #255	@ 0xff
 80035b0:	d90e      	bls.n	80035d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	22ff      	movs	r2, #255	@ 0xff
 80035b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	8979      	ldrh	r1, [r7, #10]
 80035c0:	2300      	movs	r3, #0
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fc47 	bl	8003e5c <I2C_TransferConfig>
 80035ce:	e00f      	b.n	80035f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	8979      	ldrh	r1, [r7, #10]
 80035e2:	2300      	movs	r3, #0
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 fc36 	bl	8003e5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 fac6 	bl	8003b86 <I2C_WaitOnTXISFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e07b      	b.n	80036fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d034      	beq.n	80036a8 <HAL_I2C_Mem_Write+0x1c8>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003642:	2b00      	cmp	r3, #0
 8003644:	d130      	bne.n	80036a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364c:	2200      	movs	r2, #0
 800364e:	2180      	movs	r1, #128	@ 0x80
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 fa3f 	bl	8003ad4 <I2C_WaitOnFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e04d      	b.n	80036fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003664:	b29b      	uxth	r3, r3
 8003666:	2bff      	cmp	r3, #255	@ 0xff
 8003668:	d90e      	bls.n	8003688 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	22ff      	movs	r2, #255	@ 0xff
 800366e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003674:	b2da      	uxtb	r2, r3
 8003676:	8979      	ldrh	r1, [r7, #10]
 8003678:	2300      	movs	r3, #0
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 fbeb 	bl	8003e5c <I2C_TransferConfig>
 8003686:	e00f      	b.n	80036a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003696:	b2da      	uxtb	r2, r3
 8003698:	8979      	ldrh	r1, [r7, #10]
 800369a:	2300      	movs	r3, #0
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 fbda 	bl	8003e5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d19e      	bne.n	80035f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 faac 	bl	8003c14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e01a      	b.n	80036fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2220      	movs	r2, #32
 80036cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003704 <HAL_I2C_Mem_Write+0x224>)
 80036da:	400b      	ands	r3, r1
 80036dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e000      	b.n	80036fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80036fa:	2302      	movs	r3, #2
  }
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	fe00e800 	.word	0xfe00e800

08003708 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af02      	add	r7, sp, #8
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	4608      	mov	r0, r1
 8003712:	4611      	mov	r1, r2
 8003714:	461a      	mov	r2, r3
 8003716:	4603      	mov	r3, r0
 8003718:	817b      	strh	r3, [r7, #10]
 800371a:	460b      	mov	r3, r1
 800371c:	813b      	strh	r3, [r7, #8]
 800371e:	4613      	mov	r3, r2
 8003720:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b20      	cmp	r3, #32
 800372c:	f040 80fd 	bne.w	800392a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <HAL_I2C_Mem_Read+0x34>
 8003736:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003738:	2b00      	cmp	r3, #0
 800373a:	d105      	bne.n	8003748 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003742:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0f1      	b.n	800392c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_I2C_Mem_Read+0x4e>
 8003752:	2302      	movs	r3, #2
 8003754:	e0ea      	b.n	800392c <HAL_I2C_Mem_Read+0x224>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800375e:	f7ff facd 	bl	8002cfc <HAL_GetTick>
 8003762:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	2319      	movs	r3, #25
 800376a:	2201      	movs	r2, #1
 800376c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f9af 	bl	8003ad4 <I2C_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0d5      	b.n	800392c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2222      	movs	r2, #34	@ 0x22
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2240      	movs	r2, #64	@ 0x40
 800378c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a3a      	ldr	r2, [r7, #32]
 800379a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037a8:	88f8      	ldrh	r0, [r7, #6]
 80037aa:	893a      	ldrh	r2, [r7, #8]
 80037ac:	8979      	ldrh	r1, [r7, #10]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	4603      	mov	r3, r0
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f913 	bl	80039e4 <I2C_RequestMemoryRead>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0ad      	b.n	800392c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2bff      	cmp	r3, #255	@ 0xff
 80037d8:	d90e      	bls.n	80037f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	8979      	ldrh	r1, [r7, #10]
 80037e8:	4b52      	ldr	r3, [pc, #328]	@ (8003934 <HAL_I2C_Mem_Read+0x22c>)
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 fb33 	bl	8003e5c <I2C_TransferConfig>
 80037f6:	e00f      	b.n	8003818 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003806:	b2da      	uxtb	r2, r3
 8003808:	8979      	ldrh	r1, [r7, #10]
 800380a:	4b4a      	ldr	r3, [pc, #296]	@ (8003934 <HAL_I2C_Mem_Read+0x22c>)
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 fb22 	bl	8003e5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381e:	2200      	movs	r2, #0
 8003820:	2104      	movs	r1, #4
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f956 	bl	8003ad4 <I2C_WaitOnFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e07c      	b.n	800392c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d034      	beq.n	80038d8 <HAL_I2C_Mem_Read+0x1d0>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003872:	2b00      	cmp	r3, #0
 8003874:	d130      	bne.n	80038d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387c:	2200      	movs	r2, #0
 800387e:	2180      	movs	r1, #128	@ 0x80
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f927 	bl	8003ad4 <I2C_WaitOnFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e04d      	b.n	800392c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	2bff      	cmp	r3, #255	@ 0xff
 8003898:	d90e      	bls.n	80038b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	8979      	ldrh	r1, [r7, #10]
 80038a8:	2300      	movs	r3, #0
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 fad3 	bl	8003e5c <I2C_TransferConfig>
 80038b6:	e00f      	b.n	80038d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	8979      	ldrh	r1, [r7, #10]
 80038ca:	2300      	movs	r3, #0
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fac2 	bl	8003e5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d19a      	bne.n	8003818 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f994 	bl	8003c14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e01a      	b.n	800392c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2220      	movs	r2, #32
 80038fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <HAL_I2C_Mem_Read+0x230>)
 800390a:	400b      	ands	r3, r1
 800390c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	e000      	b.n	800392c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800392a:	2302      	movs	r3, #2
  }
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	80002400 	.word	0x80002400
 8003938:	fe00e800 	.word	0xfe00e800

0800393c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	4608      	mov	r0, r1
 8003946:	4611      	mov	r1, r2
 8003948:	461a      	mov	r2, r3
 800394a:	4603      	mov	r3, r0
 800394c:	817b      	strh	r3, [r7, #10]
 800394e:	460b      	mov	r3, r1
 8003950:	813b      	strh	r3, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	8979      	ldrh	r1, [r7, #10]
 800395c:	4b20      	ldr	r3, [pc, #128]	@ (80039e0 <I2C_RequestMemoryWrite+0xa4>)
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 fa79 	bl	8003e5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	69b9      	ldr	r1, [r7, #24]
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f909 	bl	8003b86 <I2C_WaitOnTXISFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e02c      	b.n	80039d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d105      	bne.n	8003990 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003984:	893b      	ldrh	r3, [r7, #8]
 8003986:	b2da      	uxtb	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	629a      	str	r2, [r3, #40]	@ 0x28
 800398e:	e015      	b.n	80039bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003990:	893b      	ldrh	r3, [r7, #8]
 8003992:	0a1b      	lsrs	r3, r3, #8
 8003994:	b29b      	uxth	r3, r3
 8003996:	b2da      	uxtb	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	69b9      	ldr	r1, [r7, #24]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f8ef 	bl	8003b86 <I2C_WaitOnTXISFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e012      	b.n	80039d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039b2:	893b      	ldrh	r3, [r7, #8]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	2200      	movs	r2, #0
 80039c4:	2180      	movs	r1, #128	@ 0x80
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f884 	bl	8003ad4 <I2C_WaitOnFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	80002000 	.word	0x80002000

080039e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	4608      	mov	r0, r1
 80039ee:	4611      	mov	r1, r2
 80039f0:	461a      	mov	r2, r3
 80039f2:	4603      	mov	r3, r0
 80039f4:	817b      	strh	r3, [r7, #10]
 80039f6:	460b      	mov	r3, r1
 80039f8:	813b      	strh	r3, [r7, #8]
 80039fa:	4613      	mov	r3, r2
 80039fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	8979      	ldrh	r1, [r7, #10]
 8003a04:	4b20      	ldr	r3, [pc, #128]	@ (8003a88 <I2C_RequestMemoryRead+0xa4>)
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fa26 	bl	8003e5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	69b9      	ldr	r1, [r7, #24]
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f8b6 	bl	8003b86 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e02c      	b.n	8003a7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a24:	88fb      	ldrh	r3, [r7, #6]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d105      	bne.n	8003a36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a2a:	893b      	ldrh	r3, [r7, #8]
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a34:	e015      	b.n	8003a62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a36:	893b      	ldrh	r3, [r7, #8]
 8003a38:	0a1b      	lsrs	r3, r3, #8
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	69b9      	ldr	r1, [r7, #24]
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f89c 	bl	8003b86 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e012      	b.n	8003a7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a58:	893b      	ldrh	r3, [r7, #8]
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2140      	movs	r1, #64	@ 0x40
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f831 	bl	8003ad4 <I2C_WaitOnFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	80002000 	.word	0x80002000

08003a8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d103      	bne.n	8003aaa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d007      	beq.n	8003ac8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	619a      	str	r2, [r3, #24]
  }
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ae4:	e03b      	b.n	8003b5e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	6839      	ldr	r1, [r7, #0]
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f8d6 	bl	8003c9c <I2C_IsErrorOccurred>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e041      	b.n	8003b7e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d02d      	beq.n	8003b5e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b02:	f7ff f8fb 	bl	8002cfc <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d122      	bne.n	8003b5e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699a      	ldr	r2, [r3, #24]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	4013      	ands	r3, r2
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	bf0c      	ite	eq
 8003b28:	2301      	moveq	r3, #1
 8003b2a:	2300      	movne	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	461a      	mov	r2, r3
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d113      	bne.n	8003b5e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3a:	f043 0220 	orr.w	r2, r3, #32
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e00f      	b.n	8003b7e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699a      	ldr	r2, [r3, #24]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4013      	ands	r3, r2
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	bf0c      	ite	eq
 8003b6e:	2301      	moveq	r3, #1
 8003b70:	2300      	movne	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	461a      	mov	r2, r3
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d0b4      	beq.n	8003ae6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b92:	e033      	b.n	8003bfc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f87f 	bl	8003c9c <I2C_IsErrorOccurred>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e031      	b.n	8003c0c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d025      	beq.n	8003bfc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb0:	f7ff f8a4 	bl	8002cfc <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d302      	bcc.n	8003bc6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d11a      	bne.n	8003bfc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d013      	beq.n	8003bfc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd8:	f043 0220 	orr.w	r2, r3, #32
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e007      	b.n	8003c0c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d1c4      	bne.n	8003b94 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c20:	e02f      	b.n	8003c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f838 	bl	8003c9c <I2C_IsErrorOccurred>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e02d      	b.n	8003c92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c36:	f7ff f861 	bl	8002cfc <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d302      	bcc.n	8003c4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d11a      	bne.n	8003c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	d013      	beq.n	8003c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5e:	f043 0220 	orr.w	r2, r3, #32
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e007      	b.n	8003c92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d1c8      	bne.n	8003c22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	@ 0x28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d068      	beq.n	8003d9a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2210      	movs	r2, #16
 8003cce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cd0:	e049      	b.n	8003d66 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d045      	beq.n	8003d66 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cda:	f7ff f80f 	bl	8002cfc <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d302      	bcc.n	8003cf0 <I2C_IsErrorOccurred+0x54>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d13a      	bne.n	8003d66 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cfa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d12:	d121      	bne.n	8003d58 <I2C_IsErrorOccurred+0xbc>
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d1a:	d01d      	beq.n	8003d58 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003d1c:	7cfb      	ldrb	r3, [r7, #19]
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d01a      	beq.n	8003d58 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d32:	f7fe ffe3 	bl	8002cfc <HAL_GetTick>
 8003d36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d38:	e00e      	b.n	8003d58 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d3a:	f7fe ffdf 	bl	8002cfc <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b19      	cmp	r3, #25
 8003d46:	d907      	bls.n	8003d58 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	f043 0320 	orr.w	r3, r3, #32
 8003d4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003d56:	e006      	b.n	8003d66 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d1e9      	bne.n	8003d3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d003      	beq.n	8003d7c <I2C_IsErrorOccurred+0xe0>
 8003d74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0aa      	beq.n	8003cd2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d103      	bne.n	8003d8c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	f043 0304 	orr.w	r3, r3, #4
 8003d92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00b      	beq.n	8003dc4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003dbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00b      	beq.n	8003de6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	f043 0308 	orr.w	r3, r3, #8
 8003dd4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00b      	beq.n	8003e08 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	f043 0302 	orr.w	r3, r3, #2
 8003df6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003e08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01c      	beq.n	8003e4a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7ff fe3b 	bl	8003a8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6859      	ldr	r1, [r3, #4]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b0d      	ldr	r3, [pc, #52]	@ (8003e58 <I2C_IsErrorOccurred+0x1bc>)
 8003e22:	400b      	ands	r3, r1
 8003e24:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3728      	adds	r7, #40	@ 0x28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	fe00e800 	.word	0xfe00e800

08003e5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	607b      	str	r3, [r7, #4]
 8003e66:	460b      	mov	r3, r1
 8003e68:	817b      	strh	r3, [r7, #10]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e6e:	897b      	ldrh	r3, [r7, #10]
 8003e70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e74:	7a7b      	ldrb	r3, [r7, #9]
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e7c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e8a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	0d5b      	lsrs	r3, r3, #21
 8003e96:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e9a:	4b08      	ldr	r3, [pc, #32]	@ (8003ebc <I2C_TransferConfig+0x60>)
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	ea02 0103 	and.w	r1, r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	03ff63ff 	.word	0x03ff63ff

08003ec0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d138      	bne.n	8003f48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e032      	b.n	8003f4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2224      	movs	r2, #36	@ 0x24
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0201 	bic.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6819      	ldr	r1, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e000      	b.n	8003f4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f48:	2302      	movs	r3, #2
  }
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b085      	sub	sp, #20
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d139      	bne.n	8003fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e033      	b.n	8003fe2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2224      	movs	r2, #36	@ 0x24
 8003f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003fa8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e000      	b.n	8003fe2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fe0:	2302      	movs	r3, #2
  }
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
	...

08003ff0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ff4:	4b05      	ldr	r3, [pc, #20]	@ (800400c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a04      	ldr	r2, [pc, #16]	@ (800400c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ffe:	6013      	str	r3, [r2, #0]
}
 8004000:	bf00      	nop
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40007000 	.word	0x40007000

08004010 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004014:	4b04      	ldr	r3, [pc, #16]	@ (8004028 <HAL_PWREx_GetVoltageRange+0x18>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40007000 	.word	0x40007000

0800402c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800403a:	d130      	bne.n	800409e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800403c:	4b23      	ldr	r3, [pc, #140]	@ (80040cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004048:	d038      	beq.n	80040bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800404a:	4b20      	ldr	r3, [pc, #128]	@ (80040cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004052:	4a1e      	ldr	r2, [pc, #120]	@ (80040cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004054:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004058:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800405a:	4b1d      	ldr	r3, [pc, #116]	@ (80040d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2232      	movs	r2, #50	@ 0x32
 8004060:	fb02 f303 	mul.w	r3, r2, r3
 8004064:	4a1b      	ldr	r2, [pc, #108]	@ (80040d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004066:	fba2 2303 	umull	r2, r3, r2, r3
 800406a:	0c9b      	lsrs	r3, r3, #18
 800406c:	3301      	adds	r3, #1
 800406e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004070:	e002      	b.n	8004078 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3b01      	subs	r3, #1
 8004076:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004078:	4b14      	ldr	r3, [pc, #80]	@ (80040cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004084:	d102      	bne.n	800408c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f2      	bne.n	8004072 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800408c:	4b0f      	ldr	r3, [pc, #60]	@ (80040cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004098:	d110      	bne.n	80040bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e00f      	b.n	80040be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800409e:	4b0b      	ldr	r3, [pc, #44]	@ (80040cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040aa:	d007      	beq.n	80040bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040ac:	4b07      	ldr	r3, [pc, #28]	@ (80040cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040b4:	4a05      	ldr	r2, [pc, #20]	@ (80040cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40007000 	.word	0x40007000
 80040d0:	20000000 	.word	0x20000000
 80040d4:	431bde83 	.word	0x431bde83

080040d8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 80040e2:	4b11      	ldr	r3, [pc, #68]	@ (8004128 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f023 0307 	bic.w	r3, r3, #7
 80040ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004128 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80040ec:	f043 0302 	orr.w	r3, r3, #2
 80040f0:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80040f2:	4b0e      	ldr	r3, [pc, #56]	@ (800412c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	4a0d      	ldr	r2, [pc, #52]	@ (800412c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80040f8:	f043 0304 	orr.w	r3, r3, #4
 80040fc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004104:	bf30      	wfi
 8004106:	e002      	b.n	800410e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004108:	bf40      	sev
    __WFE();
 800410a:	bf20      	wfe
    __WFE();
 800410c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800410e:	4b07      	ldr	r3, [pc, #28]	@ (800412c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	4a06      	ldr	r2, [pc, #24]	@ (800412c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004114:	f023 0304 	bic.w	r3, r3, #4
 8004118:	6113      	str	r3, [r2, #16]
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40007000 	.word	0x40007000
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e3ca      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004142:	4b97      	ldr	r3, [pc, #604]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800414c:	4b94      	ldr	r3, [pc, #592]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0310 	and.w	r3, r3, #16
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 80e4 	beq.w	800432c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d007      	beq.n	800417a <HAL_RCC_OscConfig+0x4a>
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	2b0c      	cmp	r3, #12
 800416e:	f040 808b 	bne.w	8004288 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2b01      	cmp	r3, #1
 8004176:	f040 8087 	bne.w	8004288 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800417a:	4b89      	ldr	r3, [pc, #548]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <HAL_RCC_OscConfig+0x62>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e3a2      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1a      	ldr	r2, [r3, #32]
 8004196:	4b82      	ldr	r3, [pc, #520]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d004      	beq.n	80041ac <HAL_RCC_OscConfig+0x7c>
 80041a2:	4b7f      	ldr	r3, [pc, #508]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041aa:	e005      	b.n	80041b8 <HAL_RCC_OscConfig+0x88>
 80041ac:	4b7c      	ldr	r3, [pc, #496]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 80041ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d223      	bcs.n	8004204 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fd55 	bl	8004c70 <RCC_SetFlashLatencyFromMSIRange>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e383      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041d0:	4b73      	ldr	r3, [pc, #460]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a72      	ldr	r2, [pc, #456]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 80041d6:	f043 0308 	orr.w	r3, r3, #8
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	4b70      	ldr	r3, [pc, #448]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	496d      	ldr	r1, [pc, #436]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041ee:	4b6c      	ldr	r3, [pc, #432]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	4968      	ldr	r1, [pc, #416]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	604b      	str	r3, [r1, #4]
 8004202:	e025      	b.n	8004250 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004204:	4b66      	ldr	r3, [pc, #408]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a65      	ldr	r2, [pc, #404]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 800420a:	f043 0308 	orr.w	r3, r3, #8
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	4b63      	ldr	r3, [pc, #396]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	4960      	ldr	r1, [pc, #384]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 800421e:	4313      	orrs	r3, r2
 8004220:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004222:	4b5f      	ldr	r3, [pc, #380]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	495b      	ldr	r1, [pc, #364]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004232:	4313      	orrs	r3, r2
 8004234:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d109      	bne.n	8004250 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fd15 	bl	8004c70 <RCC_SetFlashLatencyFromMSIRange>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e343      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004250:	f000 fc4a 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8004254:	4602      	mov	r2, r0
 8004256:	4b52      	ldr	r3, [pc, #328]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	091b      	lsrs	r3, r3, #4
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	4950      	ldr	r1, [pc, #320]	@ (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004262:	5ccb      	ldrb	r3, [r1, r3]
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
 800426c:	4a4e      	ldr	r2, [pc, #312]	@ (80043a8 <HAL_RCC_OscConfig+0x278>)
 800426e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004270:	4b4e      	ldr	r3, [pc, #312]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7fe fcf1 	bl	8002c5c <HAL_InitTick>
 800427a:	4603      	mov	r3, r0
 800427c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d052      	beq.n	800432a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	e327      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d032      	beq.n	80042f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004290:	4b43      	ldr	r3, [pc, #268]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a42      	ldr	r2, [pc, #264]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800429c:	f7fe fd2e 	bl	8002cfc <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042a4:	f7fe fd2a 	bl	8002cfc <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e310      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042b6:	4b3a      	ldr	r3, [pc, #232]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042c2:	4b37      	ldr	r3, [pc, #220]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a36      	ldr	r2, [pc, #216]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042c8:	f043 0308 	orr.w	r3, r3, #8
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	4b34      	ldr	r3, [pc, #208]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	4931      	ldr	r1, [pc, #196]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042e0:	4b2f      	ldr	r3, [pc, #188]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	492c      	ldr	r1, [pc, #176]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	604b      	str	r3, [r1, #4]
 80042f4:	e01a      	b.n	800432c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042f6:	4b2a      	ldr	r3, [pc, #168]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a29      	ldr	r2, [pc, #164]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004302:	f7fe fcfb 	bl	8002cfc <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800430a:	f7fe fcf7 	bl	8002cfc <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e2dd      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800431c:	4b20      	ldr	r3, [pc, #128]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f0      	bne.n	800430a <HAL_RCC_OscConfig+0x1da>
 8004328:	e000      	b.n	800432c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800432a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d074      	beq.n	8004422 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b08      	cmp	r3, #8
 800433c:	d005      	beq.n	800434a <HAL_RCC_OscConfig+0x21a>
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	2b0c      	cmp	r3, #12
 8004342:	d10e      	bne.n	8004362 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2b03      	cmp	r3, #3
 8004348:	d10b      	bne.n	8004362 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434a:	4b15      	ldr	r3, [pc, #84]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d064      	beq.n	8004420 <HAL_RCC_OscConfig+0x2f0>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d160      	bne.n	8004420 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e2ba      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800436a:	d106      	bne.n	800437a <HAL_RCC_OscConfig+0x24a>
 800436c:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a0b      	ldr	r2, [pc, #44]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	e026      	b.n	80043c8 <HAL_RCC_OscConfig+0x298>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004382:	d115      	bne.n	80043b0 <HAL_RCC_OscConfig+0x280>
 8004384:	4b06      	ldr	r3, [pc, #24]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a05      	ldr	r2, [pc, #20]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 800438a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	4b03      	ldr	r3, [pc, #12]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a02      	ldr	r2, [pc, #8]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	e014      	b.n	80043c8 <HAL_RCC_OscConfig+0x298>
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
 80043a4:	08010608 	.word	0x08010608
 80043a8:	20000000 	.word	0x20000000
 80043ac:	20000004 	.word	0x20000004
 80043b0:	4ba0      	ldr	r3, [pc, #640]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a9f      	ldr	r2, [pc, #636]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 80043b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	4b9d      	ldr	r3, [pc, #628]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a9c      	ldr	r2, [pc, #624]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 80043c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d013      	beq.n	80043f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fe fc94 	bl	8002cfc <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d8:	f7fe fc90 	bl	8002cfc <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	@ 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e276      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ea:	4b92      	ldr	r3, [pc, #584]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0x2a8>
 80043f6:	e014      	b.n	8004422 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fe fc80 	bl	8002cfc <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004400:	f7fe fc7c 	bl	8002cfc <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	@ 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e262      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004412:	4b88      	ldr	r3, [pc, #544]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x2d0>
 800441e:	e000      	b.n	8004422 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d060      	beq.n	80044f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2b04      	cmp	r3, #4
 8004432:	d005      	beq.n	8004440 <HAL_RCC_OscConfig+0x310>
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b0c      	cmp	r3, #12
 8004438:	d119      	bne.n	800446e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d116      	bne.n	800446e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004440:	4b7c      	ldr	r3, [pc, #496]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_RCC_OscConfig+0x328>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e23f      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004458:	4b76      	ldr	r3, [pc, #472]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	061b      	lsls	r3, r3, #24
 8004466:	4973      	ldr	r1, [pc, #460]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 8004468:	4313      	orrs	r3, r2
 800446a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800446c:	e040      	b.n	80044f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d023      	beq.n	80044be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004476:	4b6f      	ldr	r3, [pc, #444]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a6e      	ldr	r2, [pc, #440]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 800447c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004482:	f7fe fc3b 	bl	8002cfc <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800448a:	f7fe fc37 	bl	8002cfc <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e21d      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800449c:	4b65      	ldr	r3, [pc, #404]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f0      	beq.n	800448a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a8:	4b62      	ldr	r3, [pc, #392]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	061b      	lsls	r3, r3, #24
 80044b6:	495f      	ldr	r1, [pc, #380]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	604b      	str	r3, [r1, #4]
 80044bc:	e018      	b.n	80044f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044be:	4b5d      	ldr	r3, [pc, #372]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a5c      	ldr	r2, [pc, #368]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 80044c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ca:	f7fe fc17 	bl	8002cfc <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d2:	f7fe fc13 	bl	8002cfc <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e1f9      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044e4:	4b53      	ldr	r3, [pc, #332]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1f0      	bne.n	80044d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d03c      	beq.n	8004576 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01c      	beq.n	800453e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004504:	4b4b      	ldr	r3, [pc, #300]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 8004506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800450a:	4a4a      	ldr	r2, [pc, #296]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004514:	f7fe fbf2 	bl	8002cfc <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800451c:	f7fe fbee 	bl	8002cfc <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e1d4      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800452e:	4b41      	ldr	r3, [pc, #260]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 8004530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ef      	beq.n	800451c <HAL_RCC_OscConfig+0x3ec>
 800453c:	e01b      	b.n	8004576 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800453e:	4b3d      	ldr	r3, [pc, #244]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 8004540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004544:	4a3b      	ldr	r2, [pc, #236]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 8004546:	f023 0301 	bic.w	r3, r3, #1
 800454a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454e:	f7fe fbd5 	bl	8002cfc <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004556:	f7fe fbd1 	bl	8002cfc <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e1b7      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004568:	4b32      	ldr	r3, [pc, #200]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 800456a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1ef      	bne.n	8004556 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 80a6 	beq.w	80046d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004584:	2300      	movs	r3, #0
 8004586:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004588:	4b2a      	ldr	r3, [pc, #168]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 800458a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10d      	bne.n	80045b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004594:	4b27      	ldr	r3, [pc, #156]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004598:	4a26      	ldr	r2, [pc, #152]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 800459a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800459e:	6593      	str	r3, [r2, #88]	@ 0x58
 80045a0:	4b24      	ldr	r3, [pc, #144]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 80045a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ac:	2301      	movs	r3, #1
 80045ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b0:	4b21      	ldr	r3, [pc, #132]	@ (8004638 <HAL_RCC_OscConfig+0x508>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d118      	bne.n	80045ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004638 <HAL_RCC_OscConfig+0x508>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004638 <HAL_RCC_OscConfig+0x508>)
 80045c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c8:	f7fe fb98 	bl	8002cfc <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d0:	f7fe fb94 	bl	8002cfc <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e17a      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045e2:	4b15      	ldr	r3, [pc, #84]	@ (8004638 <HAL_RCC_OscConfig+0x508>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d108      	bne.n	8004608 <HAL_RCC_OscConfig+0x4d8>
 80045f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 80045f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004606:	e029      	b.n	800465c <HAL_RCC_OscConfig+0x52c>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b05      	cmp	r3, #5
 800460e:	d115      	bne.n	800463c <HAL_RCC_OscConfig+0x50c>
 8004610:	4b08      	ldr	r3, [pc, #32]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004616:	4a07      	ldr	r2, [pc, #28]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 8004618:	f043 0304 	orr.w	r3, r3, #4
 800461c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004620:	4b04      	ldr	r3, [pc, #16]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004626:	4a03      	ldr	r2, [pc, #12]	@ (8004634 <HAL_RCC_OscConfig+0x504>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004630:	e014      	b.n	800465c <HAL_RCC_OscConfig+0x52c>
 8004632:	bf00      	nop
 8004634:	40021000 	.word	0x40021000
 8004638:	40007000 	.word	0x40007000
 800463c:	4b9c      	ldr	r3, [pc, #624]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004642:	4a9b      	ldr	r2, [pc, #620]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 8004644:	f023 0301 	bic.w	r3, r3, #1
 8004648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800464c:	4b98      	ldr	r3, [pc, #608]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 800464e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004652:	4a97      	ldr	r2, [pc, #604]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 8004654:	f023 0304 	bic.w	r3, r3, #4
 8004658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d016      	beq.n	8004692 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004664:	f7fe fb4a 	bl	8002cfc <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800466a:	e00a      	b.n	8004682 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466c:	f7fe fb46 	bl	8002cfc <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e12a      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004682:	4b8b      	ldr	r3, [pc, #556]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0ed      	beq.n	800466c <HAL_RCC_OscConfig+0x53c>
 8004690:	e015      	b.n	80046be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004692:	f7fe fb33 	bl	8002cfc <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004698:	e00a      	b.n	80046b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469a:	f7fe fb2f 	bl	8002cfc <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e113      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046b0:	4b7f      	ldr	r3, [pc, #508]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1ed      	bne.n	800469a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046be:	7ffb      	ldrb	r3, [r7, #31]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d105      	bne.n	80046d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c4:	4b7a      	ldr	r3, [pc, #488]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 80046c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c8:	4a79      	ldr	r2, [pc, #484]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 80046ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ce:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80fe 	beq.w	80048d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046de:	2b02      	cmp	r3, #2
 80046e0:	f040 80d0 	bne.w	8004884 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80046e4:	4b72      	ldr	r3, [pc, #456]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f003 0203 	and.w	r2, r3, #3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d130      	bne.n	800475a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004702:	3b01      	subs	r3, #1
 8004704:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	429a      	cmp	r2, r3
 8004708:	d127      	bne.n	800475a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004714:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004716:	429a      	cmp	r2, r3
 8004718:	d11f      	bne.n	800475a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004724:	2a07      	cmp	r2, #7
 8004726:	bf14      	ite	ne
 8004728:	2201      	movne	r2, #1
 800472a:	2200      	moveq	r2, #0
 800472c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800472e:	4293      	cmp	r3, r2
 8004730:	d113      	bne.n	800475a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	3b01      	subs	r3, #1
 8004740:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004742:	429a      	cmp	r2, r3
 8004744:	d109      	bne.n	800475a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	3b01      	subs	r3, #1
 8004754:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d06e      	beq.n	8004838 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	2b0c      	cmp	r3, #12
 800475e:	d069      	beq.n	8004834 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004760:	4b53      	ldr	r3, [pc, #332]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d105      	bne.n	8004778 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800476c:	4b50      	ldr	r3, [pc, #320]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0ad      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800477c:	4b4c      	ldr	r3, [pc, #304]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a4b      	ldr	r2, [pc, #300]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 8004782:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004786:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004788:	f7fe fab8 	bl	8002cfc <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004790:	f7fe fab4 	bl	8002cfc <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e09a      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a2:	4b43      	ldr	r3, [pc, #268]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ae:	4b40      	ldr	r3, [pc, #256]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	4b40      	ldr	r3, [pc, #256]	@ (80048b4 <HAL_RCC_OscConfig+0x784>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80047be:	3a01      	subs	r2, #1
 80047c0:	0112      	lsls	r2, r2, #4
 80047c2:	4311      	orrs	r1, r2
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047c8:	0212      	lsls	r2, r2, #8
 80047ca:	4311      	orrs	r1, r2
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047d0:	0852      	lsrs	r2, r2, #1
 80047d2:	3a01      	subs	r2, #1
 80047d4:	0552      	lsls	r2, r2, #21
 80047d6:	4311      	orrs	r1, r2
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80047dc:	0852      	lsrs	r2, r2, #1
 80047de:	3a01      	subs	r2, #1
 80047e0:	0652      	lsls	r2, r2, #25
 80047e2:	4311      	orrs	r1, r2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80047e8:	0912      	lsrs	r2, r2, #4
 80047ea:	0452      	lsls	r2, r2, #17
 80047ec:	430a      	orrs	r2, r1
 80047ee:	4930      	ldr	r1, [pc, #192]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047f4:	4b2e      	ldr	r3, [pc, #184]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a2d      	ldr	r2, [pc, #180]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 80047fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004800:	4b2b      	ldr	r3, [pc, #172]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4a2a      	ldr	r2, [pc, #168]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 8004806:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800480a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800480c:	f7fe fa76 	bl	8002cfc <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004814:	f7fe fa72 	bl	8002cfc <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e058      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004826:	4b22      	ldr	r3, [pc, #136]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004832:	e050      	b.n	80048d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e04f      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004838:	4b1d      	ldr	r3, [pc, #116]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d148      	bne.n	80048d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004844:	4b1a      	ldr	r3, [pc, #104]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a19      	ldr	r2, [pc, #100]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 800484a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800484e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004850:	4b17      	ldr	r3, [pc, #92]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a16      	ldr	r2, [pc, #88]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 8004856:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800485a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800485c:	f7fe fa4e 	bl	8002cfc <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004864:	f7fe fa4a 	bl	8002cfc <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e030      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004876:	4b0e      	ldr	r3, [pc, #56]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCC_OscConfig+0x734>
 8004882:	e028      	b.n	80048d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b0c      	cmp	r3, #12
 8004888:	d023      	beq.n	80048d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488a:	4b09      	ldr	r3, [pc, #36]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a08      	ldr	r2, [pc, #32]	@ (80048b0 <HAL_RCC_OscConfig+0x780>)
 8004890:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004896:	f7fe fa31 	bl	8002cfc <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800489c:	e00c      	b.n	80048b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489e:	f7fe fa2d 	bl	8002cfc <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d905      	bls.n	80048b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e013      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
 80048b0:	40021000 	.word	0x40021000
 80048b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b8:	4b09      	ldr	r3, [pc, #36]	@ (80048e0 <HAL_RCC_OscConfig+0x7b0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1ec      	bne.n	800489e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80048c4:	4b06      	ldr	r3, [pc, #24]	@ (80048e0 <HAL_RCC_OscConfig+0x7b0>)
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	4905      	ldr	r1, [pc, #20]	@ (80048e0 <HAL_RCC_OscConfig+0x7b0>)
 80048ca:	4b06      	ldr	r3, [pc, #24]	@ (80048e4 <HAL_RCC_OscConfig+0x7b4>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	60cb      	str	r3, [r1, #12]
 80048d0:	e001      	b.n	80048d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3720      	adds	r7, #32
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40021000 	.word	0x40021000
 80048e4:	feeefffc 	.word	0xfeeefffc

080048e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0e7      	b.n	8004acc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048fc:	4b75      	ldr	r3, [pc, #468]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1ec>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d910      	bls.n	800492c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490a:	4b72      	ldr	r3, [pc, #456]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1ec>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f023 0207 	bic.w	r2, r3, #7
 8004912:	4970      	ldr	r1, [pc, #448]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1ec>)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	4313      	orrs	r3, r2
 8004918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800491a:	4b6e      	ldr	r3, [pc, #440]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1ec>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d001      	beq.n	800492c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e0cf      	b.n	8004acc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d010      	beq.n	800495a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	4b66      	ldr	r3, [pc, #408]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f0>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004944:	429a      	cmp	r2, r3
 8004946:	d908      	bls.n	800495a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004948:	4b63      	ldr	r3, [pc, #396]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f0>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	4960      	ldr	r1, [pc, #384]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8004956:	4313      	orrs	r3, r2
 8004958:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d04c      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2b03      	cmp	r3, #3
 800496c:	d107      	bne.n	800497e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800496e:	4b5a      	ldr	r3, [pc, #360]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d121      	bne.n	80049be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e0a6      	b.n	8004acc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d107      	bne.n	8004996 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004986:	4b54      	ldr	r3, [pc, #336]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d115      	bne.n	80049be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e09a      	b.n	8004acc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d107      	bne.n	80049ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800499e:	4b4e      	ldr	r3, [pc, #312]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d109      	bne.n	80049be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e08e      	b.n	8004acc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049ae:	4b4a      	ldr	r3, [pc, #296]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e086      	b.n	8004acc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049be:	4b46      	ldr	r3, [pc, #280]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f0>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f023 0203 	bic.w	r2, r3, #3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4943      	ldr	r1, [pc, #268]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f0>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d0:	f7fe f994 	bl	8002cfc <HAL_GetTick>
 80049d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d8:	f7fe f990 	bl	8002cfc <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e06e      	b.n	8004acc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ee:	4b3a      	ldr	r3, [pc, #232]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f0>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 020c 	and.w	r2, r3, #12
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d1eb      	bne.n	80049d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d010      	beq.n	8004a2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	4b31      	ldr	r3, [pc, #196]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d208      	bcs.n	8004a2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	492b      	ldr	r1, [pc, #172]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a2e:	4b29      	ldr	r3, [pc, #164]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1ec>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d210      	bcs.n	8004a5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3c:	4b25      	ldr	r3, [pc, #148]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1ec>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f023 0207 	bic.w	r2, r3, #7
 8004a44:	4923      	ldr	r1, [pc, #140]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1ec>)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4c:	4b21      	ldr	r3, [pc, #132]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1ec>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d001      	beq.n	8004a5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e036      	b.n	8004acc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d008      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	4918      	ldr	r1, [pc, #96]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d009      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a88:	4b13      	ldr	r3, [pc, #76]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	4910      	ldr	r1, [pc, #64]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a9c:	f000 f824 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	091b      	lsrs	r3, r3, #4
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	490b      	ldr	r1, [pc, #44]	@ (8004adc <HAL_RCC_ClockConfig+0x1f4>)
 8004aae:	5ccb      	ldrb	r3, [r1, r3]
 8004ab0:	f003 031f 	and.w	r3, r3, #31
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab8:	4a09      	ldr	r2, [pc, #36]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1f8>)
 8004aba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004abc:	4b09      	ldr	r3, [pc, #36]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1fc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fe f8cb 	bl	8002c5c <HAL_InitTick>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	72fb      	strb	r3, [r7, #11]

  return status;
 8004aca:	7afb      	ldrb	r3, [r7, #11]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40022000 	.word	0x40022000
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	08010608 	.word	0x08010608
 8004ae0:	20000000 	.word	0x20000000
 8004ae4:	20000004 	.word	0x20000004

08004ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b089      	sub	sp, #36	@ 0x24
 8004aec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	61fb      	str	r3, [r7, #28]
 8004af2:	2300      	movs	r3, #0
 8004af4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004af6:	4b3e      	ldr	r3, [pc, #248]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b00:	4b3b      	ldr	r3, [pc, #236]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <HAL_RCC_GetSysClockFreq+0x34>
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b0c      	cmp	r3, #12
 8004b14:	d121      	bne.n	8004b5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d11e      	bne.n	8004b5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b1c:	4b34      	ldr	r3, [pc, #208]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0308 	and.w	r3, r3, #8
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d107      	bne.n	8004b38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b28:	4b31      	ldr	r3, [pc, #196]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b2e:	0a1b      	lsrs	r3, r3, #8
 8004b30:	f003 030f 	and.w	r3, r3, #15
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	e005      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b38:	4b2d      	ldr	r3, [pc, #180]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b44:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10d      	bne.n	8004b70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b58:	e00a      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d102      	bne.n	8004b66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b60:	4b25      	ldr	r3, [pc, #148]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b62:	61bb      	str	r3, [r7, #24]
 8004b64:	e004      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b6c:	4b23      	ldr	r3, [pc, #140]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x114>)
 8004b6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	2b0c      	cmp	r3, #12
 8004b74:	d134      	bne.n	8004be0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b76:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d003      	beq.n	8004b8e <HAL_RCC_GetSysClockFreq+0xa6>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d003      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0xac>
 8004b8c:	e005      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b90:	617b      	str	r3, [r7, #20]
      break;
 8004b92:	e005      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b94:	4b19      	ldr	r3, [pc, #100]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x114>)
 8004b96:	617b      	str	r3, [r7, #20]
      break;
 8004b98:	e002      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	617b      	str	r3, [r7, #20]
      break;
 8004b9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ba0:	4b13      	ldr	r3, [pc, #76]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	3301      	adds	r3, #1
 8004bac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bae:	4b10      	ldr	r3, [pc, #64]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	0a1b      	lsrs	r3, r3, #8
 8004bb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	fb03 f202 	mul.w	r2, r3, r2
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	0e5b      	lsrs	r3, r3, #25
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004be0:	69bb      	ldr	r3, [r7, #24]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3724      	adds	r7, #36	@ 0x24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	08010620 	.word	0x08010620
 8004bf8:	00f42400 	.word	0x00f42400
 8004bfc:	007a1200 	.word	0x007a1200

08004c00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c04:	4b03      	ldr	r3, [pc, #12]	@ (8004c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c06:	681b      	ldr	r3, [r3, #0]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	20000000 	.word	0x20000000

08004c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c1c:	f7ff fff0 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b06      	ldr	r3, [pc, #24]	@ (8004c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	0a1b      	lsrs	r3, r3, #8
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	4904      	ldr	r1, [pc, #16]	@ (8004c40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c2e:	5ccb      	ldrb	r3, [r1, r3]
 8004c30:	f003 031f 	and.w	r3, r3, #31
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	08010618 	.word	0x08010618

08004c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c48:	f7ff ffda 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	4b06      	ldr	r3, [pc, #24]	@ (8004c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	0adb      	lsrs	r3, r3, #11
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	4904      	ldr	r1, [pc, #16]	@ (8004c6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c5a:	5ccb      	ldrb	r3, [r1, r3]
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	08010618 	.word	0x08010618

08004c70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c78:	2300      	movs	r3, #0
 8004c7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8004d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c88:	f7ff f9c2 	bl	8004010 <HAL_PWREx_GetVoltageRange>
 8004c8c:	6178      	str	r0, [r7, #20]
 8004c8e:	e014      	b.n	8004cba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c90:	4b25      	ldr	r3, [pc, #148]	@ (8004d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c94:	4a24      	ldr	r2, [pc, #144]	@ (8004d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c9c:	4b22      	ldr	r3, [pc, #136]	@ (8004d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ca8:	f7ff f9b2 	bl	8004010 <HAL_PWREx_GetVoltageRange>
 8004cac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cae:	4b1e      	ldr	r3, [pc, #120]	@ (8004d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cc0:	d10b      	bne.n	8004cda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b80      	cmp	r3, #128	@ 0x80
 8004cc6:	d919      	bls.n	8004cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2ba0      	cmp	r3, #160	@ 0xa0
 8004ccc:	d902      	bls.n	8004cd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cce:	2302      	movs	r3, #2
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	e013      	b.n	8004cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	e010      	b.n	8004cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b80      	cmp	r3, #128	@ 0x80
 8004cde:	d902      	bls.n	8004ce6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	613b      	str	r3, [r7, #16]
 8004ce4:	e00a      	b.n	8004cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b80      	cmp	r3, #128	@ 0x80
 8004cea:	d102      	bne.n	8004cf2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cec:	2302      	movs	r3, #2
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	e004      	b.n	8004cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b70      	cmp	r3, #112	@ 0x70
 8004cf6:	d101      	bne.n	8004cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f023 0207 	bic.w	r2, r3, #7
 8004d04:	4909      	ldr	r1, [pc, #36]	@ (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d0c:	4b07      	ldr	r3, [pc, #28]	@ (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d001      	beq.n	8004d1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	40022000 	.word	0x40022000

08004d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d38:	2300      	movs	r3, #0
 8004d3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d041      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d50:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d54:	d02a      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d56:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d5a:	d824      	bhi.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d60:	d008      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d66:	d81e      	bhi.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d70:	d010      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d72:	e018      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d74:	4b86      	ldr	r3, [pc, #536]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	4a85      	ldr	r2, [pc, #532]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d7e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d80:	e015      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3304      	adds	r3, #4
 8004d86:	2100      	movs	r1, #0
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f001 f839 	bl	8005e00 <RCCEx_PLLSAI1_Config>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d92:	e00c      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3320      	adds	r3, #32
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f001 f924 	bl	8005fe8 <RCCEx_PLLSAI2_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004da4:	e003      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	74fb      	strb	r3, [r7, #19]
      break;
 8004daa:	e000      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dae:	7cfb      	ldrb	r3, [r7, #19]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10b      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004db4:	4b76      	ldr	r3, [pc, #472]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dc2:	4973      	ldr	r1, [pc, #460]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004dca:	e001      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dcc:	7cfb      	ldrb	r3, [r7, #19]
 8004dce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d041      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004de0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004de4:	d02a      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004de6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004dea:	d824      	bhi.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004dec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004df0:	d008      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004df2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004df6:	d81e      	bhi.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e00:	d010      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e02:	e018      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e04:	4b62      	ldr	r3, [pc, #392]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	4a61      	ldr	r2, [pc, #388]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e0e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e10:	e015      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3304      	adds	r3, #4
 8004e16:	2100      	movs	r1, #0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fff1 	bl	8005e00 <RCCEx_PLLSAI1_Config>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e22:	e00c      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3320      	adds	r3, #32
 8004e28:	2100      	movs	r1, #0
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f001 f8dc 	bl	8005fe8 <RCCEx_PLLSAI2_Config>
 8004e30:	4603      	mov	r3, r0
 8004e32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e34:	e003      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	74fb      	strb	r3, [r7, #19]
      break;
 8004e3a:	e000      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e3e:	7cfb      	ldrb	r3, [r7, #19]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10b      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e44:	4b52      	ldr	r3, [pc, #328]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e4a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e52:	494f      	ldr	r1, [pc, #316]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004e5a:	e001      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5c:	7cfb      	ldrb	r3, [r7, #19]
 8004e5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 80a0 	beq.w	8004fae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e72:	4b47      	ldr	r3, [pc, #284]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e82:	2300      	movs	r3, #0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00d      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e88:	4b41      	ldr	r3, [pc, #260]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e8c:	4a40      	ldr	r2, [pc, #256]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e94:	4b3e      	ldr	r3, [pc, #248]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e9c:	60bb      	str	r3, [r7, #8]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a3a      	ldr	r2, [pc, #232]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eb0:	f7fd ff24 	bl	8002cfc <HAL_GetTick>
 8004eb4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004eb6:	e009      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb8:	f7fd ff20 	bl	8002cfc <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d902      	bls.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	74fb      	strb	r3, [r7, #19]
        break;
 8004eca:	e005      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ecc:	4b31      	ldr	r3, [pc, #196]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0ef      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d15c      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ede:	4b2c      	ldr	r3, [pc, #176]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ee8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01f      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d019      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004efc:	4b24      	ldr	r3, [pc, #144]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f08:	4b21      	ldr	r3, [pc, #132]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f0e:	4a20      	ldr	r2, [pc, #128]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f18:	4b1d      	ldr	r3, [pc, #116]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f28:	4a19      	ldr	r2, [pc, #100]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d016      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3a:	f7fd fedf 	bl	8002cfc <HAL_GetTick>
 8004f3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f40:	e00b      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f42:	f7fd fedb 	bl	8002cfc <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d902      	bls.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	74fb      	strb	r3, [r7, #19]
            break;
 8004f58:	e006      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0ec      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f68:	7cfb      	ldrb	r3, [r7, #19]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10c      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f6e:	4b08      	ldr	r3, [pc, #32]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f7e:	4904      	ldr	r1, [pc, #16]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f86:	e009      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f88:	7cfb      	ldrb	r3, [r7, #19]
 8004f8a:	74bb      	strb	r3, [r7, #18]
 8004f8c:	e006      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f8e:	bf00      	nop
 8004f90:	40021000 	.word	0x40021000
 8004f94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f98:	7cfb      	ldrb	r3, [r7, #19]
 8004f9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f9c:	7c7b      	ldrb	r3, [r7, #17]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d105      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa2:	4b9e      	ldr	r3, [pc, #632]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa6:	4a9d      	ldr	r2, [pc, #628]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fba:	4b98      	ldr	r3, [pc, #608]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc0:	f023 0203 	bic.w	r2, r3, #3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc8:	4994      	ldr	r1, [pc, #592]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fdc:	4b8f      	ldr	r3, [pc, #572]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe2:	f023 020c 	bic.w	r2, r3, #12
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fea:	498c      	ldr	r1, [pc, #560]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ffe:	4b87      	ldr	r3, [pc, #540]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005004:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500c:	4983      	ldr	r1, [pc, #524]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005020:	4b7e      	ldr	r3, [pc, #504]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005026:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502e:	497b      	ldr	r1, [pc, #492]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005042:	4b76      	ldr	r3, [pc, #472]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005048:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005050:	4972      	ldr	r1, [pc, #456]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005064:	4b6d      	ldr	r3, [pc, #436]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800506a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005072:	496a      	ldr	r1, [pc, #424]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005086:	4b65      	ldr	r3, [pc, #404]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800508c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005094:	4961      	ldr	r1, [pc, #388]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050a8:	4b5c      	ldr	r3, [pc, #368]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b6:	4959      	ldr	r1, [pc, #356]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050ca:	4b54      	ldr	r3, [pc, #336]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d8:	4950      	ldr	r1, [pc, #320]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050ec:	4b4b      	ldr	r3, [pc, #300]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fa:	4948      	ldr	r1, [pc, #288]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800510e:	4b43      	ldr	r3, [pc, #268]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005114:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800511c:	493f      	ldr	r1, [pc, #252]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d028      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005130:	4b3a      	ldr	r3, [pc, #232]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005136:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800513e:	4937      	ldr	r1, [pc, #220]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800514a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800514e:	d106      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005150:	4b32      	ldr	r3, [pc, #200]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4a31      	ldr	r2, [pc, #196]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005156:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800515a:	60d3      	str	r3, [r2, #12]
 800515c:	e011      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005162:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005166:	d10c      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3304      	adds	r3, #4
 800516c:	2101      	movs	r1, #1
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fe46 	bl	8005e00 <RCCEx_PLLSAI1_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005178:	7cfb      	ldrb	r3, [r7, #19]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800517e:	7cfb      	ldrb	r3, [r7, #19]
 8005180:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d028      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800518e:	4b23      	ldr	r3, [pc, #140]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005194:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519c:	491f      	ldr	r1, [pc, #124]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051ac:	d106      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051ae:	4b1b      	ldr	r3, [pc, #108]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	4a1a      	ldr	r2, [pc, #104]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051b8:	60d3      	str	r3, [r2, #12]
 80051ba:	e011      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051c4:	d10c      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3304      	adds	r3, #4
 80051ca:	2101      	movs	r1, #1
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 fe17 	bl	8005e00 <RCCEx_PLLSAI1_Config>
 80051d2:	4603      	mov	r3, r0
 80051d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051d6:	7cfb      	ldrb	r3, [r7, #19]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80051dc:	7cfb      	ldrb	r3, [r7, #19]
 80051de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d02b      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051ec:	4b0b      	ldr	r3, [pc, #44]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051fa:	4908      	ldr	r1, [pc, #32]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005206:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800520a:	d109      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800520c:	4b03      	ldr	r3, [pc, #12]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	4a02      	ldr	r2, [pc, #8]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005216:	60d3      	str	r3, [r2, #12]
 8005218:	e014      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800521a:	bf00      	nop
 800521c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005224:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005228:	d10c      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	3304      	adds	r3, #4
 800522e:	2101      	movs	r1, #1
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fde5 	bl	8005e00 <RCCEx_PLLSAI1_Config>
 8005236:	4603      	mov	r3, r0
 8005238:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800523a:	7cfb      	ldrb	r3, [r7, #19]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005240:	7cfb      	ldrb	r3, [r7, #19]
 8005242:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d02f      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005250:	4b2b      	ldr	r3, [pc, #172]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005256:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800525e:	4928      	ldr	r1, [pc, #160]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800526a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800526e:	d10d      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3304      	adds	r3, #4
 8005274:	2102      	movs	r1, #2
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fdc2 	bl	8005e00 <RCCEx_PLLSAI1_Config>
 800527c:	4603      	mov	r3, r0
 800527e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005280:	7cfb      	ldrb	r3, [r7, #19]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d014      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005286:	7cfb      	ldrb	r3, [r7, #19]
 8005288:	74bb      	strb	r3, [r7, #18]
 800528a:	e011      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005294:	d10c      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3320      	adds	r3, #32
 800529a:	2102      	movs	r1, #2
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fea3 	bl	8005fe8 <RCCEx_PLLSAI2_Config>
 80052a2:	4603      	mov	r3, r0
 80052a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052a6:	7cfb      	ldrb	r3, [r7, #19]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052ac:	7cfb      	ldrb	r3, [r7, #19]
 80052ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052bc:	4b10      	ldr	r3, [pc, #64]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052ca:	490d      	ldr	r1, [pc, #52]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052de:	4b08      	ldr	r3, [pc, #32]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ee:	4904      	ldr	r1, [pc, #16]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40021000 	.word	0x40021000

08005304 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b088      	sub	sp, #32
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800530c:	2300      	movs	r3, #0
 800530e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005316:	d13e      	bne.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005318:	4bb2      	ldr	r3, [pc, #712]	@ (80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800531a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005322:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800532a:	d028      	beq.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005332:	f200 8542 	bhi.w	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800533c:	d005      	beq.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005344:	d00e      	beq.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005346:	f000 bd38 	b.w	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800534a:	4ba6      	ldr	r3, [pc, #664]	@ (80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b02      	cmp	r3, #2
 8005356:	f040 8532 	bne.w	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 800535a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800535e:	61fb      	str	r3, [r7, #28]
      break;
 8005360:	f000 bd2d 	b.w	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005364:	4b9f      	ldr	r3, [pc, #636]	@ (80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b02      	cmp	r3, #2
 8005370:	f040 8527 	bne.w	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8005374:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005378:	61fb      	str	r3, [r7, #28]
      break;
 800537a:	f000 bd22 	b.w	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800537e:	4b99      	ldr	r3, [pc, #612]	@ (80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005386:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800538a:	f040 851c 	bne.w	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800538e:	4b96      	ldr	r3, [pc, #600]	@ (80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8005390:	61fb      	str	r3, [r7, #28]
      break;
 8005392:	f000 bd18 	b.w	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005396:	4b93      	ldr	r3, [pc, #588]	@ (80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d036      	beq.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d840      	bhi.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d003      	beq.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d020      	beq.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80053b8:	e039      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80053ba:	4b8a      	ldr	r3, [pc, #552]	@ (80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d116      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80053c6:	4b87      	ldr	r3, [pc, #540]	@ (80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80053d2:	4b84      	ldr	r3, [pc, #528]	@ (80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	091b      	lsrs	r3, r3, #4
 80053d8:	f003 030f 	and.w	r3, r3, #15
 80053dc:	e005      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80053de:	4b81      	ldr	r3, [pc, #516]	@ (80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80053e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053e4:	0a1b      	lsrs	r3, r3, #8
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	4a80      	ldr	r2, [pc, #512]	@ (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80053ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80053f2:	e01f      	b.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	61bb      	str	r3, [r7, #24]
      break;
 80053f8:	e01c      	b.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053fa:	4b7a      	ldr	r3, [pc, #488]	@ (80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005406:	d102      	bne.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005408:	4b79      	ldr	r3, [pc, #484]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800540a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800540c:	e012      	b.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	61bb      	str	r3, [r7, #24]
      break;
 8005412:	e00f      	b.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005414:	4b73      	ldr	r3, [pc, #460]	@ (80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800541c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005420:	d102      	bne.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005422:	4b74      	ldr	r3, [pc, #464]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005424:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005426:	e005      	b.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	61bb      	str	r3, [r7, #24]
      break;
 800542c:	e002      	b.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	61bb      	str	r3, [r7, #24]
      break;
 8005432:	bf00      	nop
    }

    switch(PeriphClk)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800543a:	f000 80dd 	beq.w	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005444:	f200 84c1 	bhi.w	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800544e:	f000 80d3 	beq.w	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005458:	f200 84b7 	bhi.w	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005462:	f000 835f 	beq.w	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800546c:	f200 84ad 	bhi.w	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005476:	f000 847e 	beq.w	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005480:	f200 84a3 	bhi.w	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800548a:	f000 82cd 	beq.w	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005494:	f200 8499 	bhi.w	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800549e:	f000 80ab 	beq.w	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054a8:	f200 848f 	bhi.w	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b2:	f000 8090 	beq.w	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054bc:	f200 8485 	bhi.w	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054c6:	d07f      	beq.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054ce:	f200 847c 	bhi.w	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054d8:	f000 8403 	beq.w	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054e2:	f200 8472 	bhi.w	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ec:	f000 83af 	beq.w	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054f6:	f200 8468 	bhi.w	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005500:	f000 8379 	beq.w	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800550a:	f200 845e 	bhi.w	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b80      	cmp	r3, #128	@ 0x80
 8005512:	f000 8344 	beq.w	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b80      	cmp	r3, #128	@ 0x80
 800551a:	f200 8456 	bhi.w	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b20      	cmp	r3, #32
 8005522:	d84b      	bhi.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 844f 	beq.w	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3b01      	subs	r3, #1
 8005530:	2b1f      	cmp	r3, #31
 8005532:	f200 844a 	bhi.w	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005536:	a201      	add	r2, pc, #4	@ (adr r2, 800553c <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	08005725 	.word	0x08005725
 8005540:	08005793 	.word	0x08005793
 8005544:	08005dcb 	.word	0x08005dcb
 8005548:	08005827 	.word	0x08005827
 800554c:	08005dcb 	.word	0x08005dcb
 8005550:	08005dcb 	.word	0x08005dcb
 8005554:	08005dcb 	.word	0x08005dcb
 8005558:	080058ad 	.word	0x080058ad
 800555c:	08005dcb 	.word	0x08005dcb
 8005560:	08005dcb 	.word	0x08005dcb
 8005564:	08005dcb 	.word	0x08005dcb
 8005568:	08005dcb 	.word	0x08005dcb
 800556c:	08005dcb 	.word	0x08005dcb
 8005570:	08005dcb 	.word	0x08005dcb
 8005574:	08005dcb 	.word	0x08005dcb
 8005578:	08005925 	.word	0x08005925
 800557c:	08005dcb 	.word	0x08005dcb
 8005580:	08005dcb 	.word	0x08005dcb
 8005584:	08005dcb 	.word	0x08005dcb
 8005588:	08005dcb 	.word	0x08005dcb
 800558c:	08005dcb 	.word	0x08005dcb
 8005590:	08005dcb 	.word	0x08005dcb
 8005594:	08005dcb 	.word	0x08005dcb
 8005598:	08005dcb 	.word	0x08005dcb
 800559c:	08005dcb 	.word	0x08005dcb
 80055a0:	08005dcb 	.word	0x08005dcb
 80055a4:	08005dcb 	.word	0x08005dcb
 80055a8:	08005dcb 	.word	0x08005dcb
 80055ac:	08005dcb 	.word	0x08005dcb
 80055b0:	08005dcb 	.word	0x08005dcb
 80055b4:	08005dcb 	.word	0x08005dcb
 80055b8:	080059a7 	.word	0x080059a7
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b40      	cmp	r3, #64	@ 0x40
 80055c0:	f000 82c1 	beq.w	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80055c4:	f000 bc01 	b.w	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80055c8:	69b9      	ldr	r1, [r7, #24]
 80055ca:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80055ce:	f000 fde9 	bl	80061a4 <RCCEx_GetSAIxPeriphCLKFreq>
 80055d2:	61f8      	str	r0, [r7, #28]
      break;
 80055d4:	e3fa      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80055d6:	69b9      	ldr	r1, [r7, #24]
 80055d8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80055dc:	f000 fde2 	bl	80061a4 <RCCEx_GetSAIxPeriphCLKFreq>
 80055e0:	61f8      	str	r0, [r7, #28]
      break;
 80055e2:	e3f3      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80055e4:	40021000 	.word	0x40021000
 80055e8:	0003d090 	.word	0x0003d090
 80055ec:	08010620 	.word	0x08010620
 80055f0:	00f42400 	.word	0x00f42400
 80055f4:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80055f8:	4ba9      	ldr	r3, [pc, #676]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80055fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055fe:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800560a:	d00c      	beq.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005612:	d87f      	bhi.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800561a:	d04e      	beq.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005622:	d01d      	beq.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8005624:	e076      	b.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005626:	4b9e      	ldr	r3, [pc, #632]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b02      	cmp	r3, #2
 8005630:	d172      	bne.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005632:	4b9b      	ldr	r3, [pc, #620]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d005      	beq.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 800563e:	4b98      	ldr	r3, [pc, #608]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	091b      	lsrs	r3, r3, #4
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	e005      	b.n	8005656 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800564a:	4b95      	ldr	r3, [pc, #596]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800564c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005650:	0a1b      	lsrs	r3, r3, #8
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	4a93      	ldr	r2, [pc, #588]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565c:	61fb      	str	r3, [r7, #28]
          break;
 800565e:	e05b      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005660:	4b8f      	ldr	r3, [pc, #572]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005668:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800566c:	d156      	bne.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800566e:	4b8c      	ldr	r3, [pc, #560]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005676:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800567a:	d14f      	bne.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800567c:	4b88      	ldr	r3, [pc, #544]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	0a1b      	lsrs	r3, r3, #8
 8005682:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005686:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	fb03 f202 	mul.w	r2, r3, r2
 8005690:	4b83      	ldr	r3, [pc, #524]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	091b      	lsrs	r3, r3, #4
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	3301      	adds	r3, #1
 800569c:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80056a2:	4b7f      	ldr	r3, [pc, #508]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	0d5b      	lsrs	r3, r3, #21
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	3301      	adds	r3, #1
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b6:	61fb      	str	r3, [r7, #28]
          break;
 80056b8:	e030      	b.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80056ba:	4b79      	ldr	r3, [pc, #484]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056c6:	d12b      	bne.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80056c8:	4b75      	ldr	r3, [pc, #468]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056d4:	d124      	bne.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80056d6:	4b72      	ldr	r3, [pc, #456]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	0a1b      	lsrs	r3, r3, #8
 80056dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056e0:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	fb03 f202 	mul.w	r2, r3, r2
 80056ea:	4b6d      	ldr	r3, [pc, #436]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	091b      	lsrs	r3, r3, #4
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	3301      	adds	r3, #1
 80056f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fa:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80056fc:	4b68      	ldr	r3, [pc, #416]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	0d5b      	lsrs	r3, r3, #21
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	3301      	adds	r3, #1
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005710:	61fb      	str	r3, [r7, #28]
          break;
 8005712:	e005      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8005714:	bf00      	nop
 8005716:	e359      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005718:	bf00      	nop
 800571a:	e357      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800571c:	bf00      	nop
 800571e:	e355      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005720:	bf00      	nop
        break;
 8005722:	e353      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005724:	4b5e      	ldr	r3, [pc, #376]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	2b03      	cmp	r3, #3
 8005734:	d827      	bhi.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8005736:	a201      	add	r2, pc, #4	@ (adr r2, 800573c <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8005738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573c:	0800574d 	.word	0x0800574d
 8005740:	08005755 	.word	0x08005755
 8005744:	0800575d 	.word	0x0800575d
 8005748:	08005771 	.word	0x08005771
          frequency = HAL_RCC_GetPCLK2Freq();
 800574c:	f7ff fa7a 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 8005750:	61f8      	str	r0, [r7, #28]
          break;
 8005752:	e01d      	b.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005754:	f7ff f9c8 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8005758:	61f8      	str	r0, [r7, #28]
          break;
 800575a:	e019      	b.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800575c:	4b50      	ldr	r3, [pc, #320]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005768:	d10f      	bne.n	800578a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800576a:	4b4f      	ldr	r3, [pc, #316]	@ (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800576c:	61fb      	str	r3, [r7, #28]
          break;
 800576e:	e00c      	b.n	800578a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005770:	4b4b      	ldr	r3, [pc, #300]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b02      	cmp	r3, #2
 800577c:	d107      	bne.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800577e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005782:	61fb      	str	r3, [r7, #28]
          break;
 8005784:	e003      	b.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8005786:	bf00      	nop
 8005788:	e320      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800578a:	bf00      	nop
 800578c:	e31e      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800578e:	bf00      	nop
        break;
 8005790:	e31c      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005792:	4b43      	ldr	r3, [pc, #268]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005798:	f003 030c 	and.w	r3, r3, #12
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	2b0c      	cmp	r3, #12
 80057a2:	d83a      	bhi.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80057a4:	a201      	add	r2, pc, #4	@ (adr r2, 80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	080057e1 	.word	0x080057e1
 80057b0:	0800581b 	.word	0x0800581b
 80057b4:	0800581b 	.word	0x0800581b
 80057b8:	0800581b 	.word	0x0800581b
 80057bc:	080057e9 	.word	0x080057e9
 80057c0:	0800581b 	.word	0x0800581b
 80057c4:	0800581b 	.word	0x0800581b
 80057c8:	0800581b 	.word	0x0800581b
 80057cc:	080057f1 	.word	0x080057f1
 80057d0:	0800581b 	.word	0x0800581b
 80057d4:	0800581b 	.word	0x0800581b
 80057d8:	0800581b 	.word	0x0800581b
 80057dc:	08005805 	.word	0x08005805
          frequency = HAL_RCC_GetPCLK1Freq();
 80057e0:	f7ff fa1a 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 80057e4:	61f8      	str	r0, [r7, #28]
          break;
 80057e6:	e01d      	b.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80057e8:	f7ff f97e 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 80057ec:	61f8      	str	r0, [r7, #28]
          break;
 80057ee:	e019      	b.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057f0:	4b2b      	ldr	r3, [pc, #172]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057fc:	d10f      	bne.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80057fe:	4b2a      	ldr	r3, [pc, #168]	@ (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005800:	61fb      	str	r3, [r7, #28]
          break;
 8005802:	e00c      	b.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005804:	4b26      	ldr	r3, [pc, #152]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b02      	cmp	r3, #2
 8005810:	d107      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8005812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005816:	61fb      	str	r3, [r7, #28]
          break;
 8005818:	e003      	b.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 800581a:	bf00      	nop
 800581c:	e2d6      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800581e:	bf00      	nop
 8005820:	e2d4      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005822:	bf00      	nop
        break;
 8005824:	e2d2      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005826:	4b1e      	ldr	r3, [pc, #120]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800582c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	2b30      	cmp	r3, #48	@ 0x30
 8005836:	d021      	beq.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	2b30      	cmp	r3, #48	@ 0x30
 800583c:	d829      	bhi.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	2b20      	cmp	r3, #32
 8005842:	d011      	beq.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	2b20      	cmp	r3, #32
 8005848:	d823      	bhi.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	2b10      	cmp	r3, #16
 8005854:	d004      	beq.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8005856:	e01c      	b.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005858:	f7ff f9de 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 800585c:	61f8      	str	r0, [r7, #28]
          break;
 800585e:	e01d      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8005860:	f7ff f942 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8005864:	61f8      	str	r0, [r7, #28]
          break;
 8005866:	e019      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005868:	4b0d      	ldr	r3, [pc, #52]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005874:	d10f      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8005876:	4b0c      	ldr	r3, [pc, #48]	@ (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005878:	61fb      	str	r3, [r7, #28]
          break;
 800587a:	e00c      	b.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800587c:	4b08      	ldr	r3, [pc, #32]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b02      	cmp	r3, #2
 8005888:	d107      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 800588a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800588e:	61fb      	str	r3, [r7, #28]
          break;
 8005890:	e003      	b.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8005892:	bf00      	nop
 8005894:	e29a      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005896:	bf00      	nop
 8005898:	e298      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800589a:	bf00      	nop
        break;
 800589c:	e296      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800589e:	bf00      	nop
 80058a0:	40021000 	.word	0x40021000
 80058a4:	08010620 	.word	0x08010620
 80058a8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80058ac:	4b9b      	ldr	r3, [pc, #620]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80058bc:	d021      	beq.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2bc0      	cmp	r3, #192	@ 0xc0
 80058c2:	d829      	bhi.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	2b80      	cmp	r3, #128	@ 0x80
 80058c8:	d011      	beq.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b80      	cmp	r3, #128	@ 0x80
 80058ce:	d823      	bhi.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b40      	cmp	r3, #64	@ 0x40
 80058da:	d004      	beq.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 80058dc:	e01c      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058de:	f7ff f99b 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 80058e2:	61f8      	str	r0, [r7, #28]
          break;
 80058e4:	e01d      	b.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80058e6:	f7ff f8ff 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 80058ea:	61f8      	str	r0, [r7, #28]
          break;
 80058ec:	e019      	b.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058ee:	4b8b      	ldr	r3, [pc, #556]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058fa:	d10f      	bne.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80058fc:	4b88      	ldr	r3, [pc, #544]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80058fe:	61fb      	str	r3, [r7, #28]
          break;
 8005900:	e00c      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005902:	4b86      	ldr	r3, [pc, #536]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b02      	cmp	r3, #2
 800590e:	d107      	bne.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8005910:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005914:	61fb      	str	r3, [r7, #28]
          break;
 8005916:	e003      	b.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8005918:	bf00      	nop
 800591a:	e257      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800591c:	bf00      	nop
 800591e:	e255      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005920:	bf00      	nop
        break;
 8005922:	e253      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005924:	4b7d      	ldr	r3, [pc, #500]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800592a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005936:	d025      	beq.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800593e:	d82c      	bhi.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005946:	d013      	beq.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800594e:	d824      	bhi.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d004      	beq.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800595c:	d004      	beq.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800595e:	e01c      	b.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005960:	f7ff f95a 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 8005964:	61f8      	str	r0, [r7, #28]
          break;
 8005966:	e01d      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005968:	f7ff f8be 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 800596c:	61f8      	str	r0, [r7, #28]
          break;
 800596e:	e019      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005970:	4b6a      	ldr	r3, [pc, #424]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800597c:	d10f      	bne.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800597e:	4b68      	ldr	r3, [pc, #416]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005980:	61fb      	str	r3, [r7, #28]
          break;
 8005982:	e00c      	b.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005984:	4b65      	ldr	r3, [pc, #404]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b02      	cmp	r3, #2
 8005990:	d107      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8005992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005996:	61fb      	str	r3, [r7, #28]
          break;
 8005998:	e003      	b.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 800599a:	bf00      	nop
 800599c:	e216      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800599e:	bf00      	nop
 80059a0:	e214      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80059a2:	bf00      	nop
        break;
 80059a4:	e212      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80059a6:	4b5d      	ldr	r3, [pc, #372]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80059a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80059b0:	613b      	str	r3, [r7, #16]
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059b8:	d025      	beq.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059c0:	d82c      	bhi.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059c8:	d013      	beq.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059d0:	d824      	bhi.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d004      	beq.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059de:	d004      	beq.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 80059e0:	e01c      	b.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 80059e2:	f7ff f919 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 80059e6:	61f8      	str	r0, [r7, #28]
          break;
 80059e8:	e01d      	b.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 80059ea:	f7ff f87d 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 80059ee:	61f8      	str	r0, [r7, #28]
          break;
 80059f0:	e019      	b.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059f2:	4b4a      	ldr	r3, [pc, #296]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059fe:	d10f      	bne.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8005a00:	4b47      	ldr	r3, [pc, #284]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005a02:	61fb      	str	r3, [r7, #28]
          break;
 8005a04:	e00c      	b.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a06:	4b45      	ldr	r3, [pc, #276]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d107      	bne.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8005a14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a18:	61fb      	str	r3, [r7, #28]
          break;
 8005a1a:	e003      	b.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8005a1c:	bf00      	nop
 8005a1e:	e1d5      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005a20:	bf00      	nop
 8005a22:	e1d3      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005a24:	bf00      	nop
        break;
 8005a26:	e1d1      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005a28:	4b3c      	ldr	r3, [pc, #240]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a3a:	d00c      	beq.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a42:	d864      	bhi.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a4a:	d008      	beq.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a52:	d030      	beq.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8005a54:	e05b      	b.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a56:	f7ff f847 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8005a5a:	61f8      	str	r0, [r7, #28]
          break;
 8005a5c:	e05c      	b.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a6a:	d152      	bne.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8005a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d04c      	beq.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005a78:	4b28      	ldr	r3, [pc, #160]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	0a1b      	lsrs	r3, r3, #8
 8005a7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a82:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	fb03 f202 	mul.w	r2, r3, r2
 8005a8c:	4b23      	ldr	r3, [pc, #140]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	091b      	lsrs	r3, r3, #4
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	3301      	adds	r3, #1
 8005a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	0e5b      	lsrs	r3, r3, #25
 8005aa4:	f003 0303 	and.w	r3, r3, #3
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab2:	61fb      	str	r3, [r7, #28]
          break;
 8005ab4:	e02d      	b.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8005ab6:	4b19      	ldr	r3, [pc, #100]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005abe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ac2:	d128      	bne.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8005ac4:	4b15      	ldr	r3, [pc, #84]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d022      	beq.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005ad0:	4b12      	ldr	r3, [pc, #72]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	0a1b      	lsrs	r3, r3, #8
 8005ad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ada:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	fb03 f202 	mul.w	r2, r3, r2
 8005ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	091b      	lsrs	r3, r3, #4
 8005aea:	f003 0307 	and.w	r3, r3, #7
 8005aee:	3301      	adds	r3, #1
 8005af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8005af6:	4b09      	ldr	r3, [pc, #36]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	0e5b      	lsrs	r3, r3, #25
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	3301      	adds	r3, #1
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0a:	61fb      	str	r3, [r7, #28]
          break;
 8005b0c:	e003      	b.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8005b0e:	bf00      	nop
 8005b10:	e15c      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005b12:	bf00      	nop
 8005b14:	e15a      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005b16:	bf00      	nop
        break;
 8005b18:	e158      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8005b1a:	bf00      	nop
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005b24:	4b9d      	ldr	r3, [pc, #628]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b2e:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d103      	bne.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005b36:	f7ff f885 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 8005b3a:	61f8      	str	r0, [r7, #28]
        break;
 8005b3c:	e146      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b3e:	f7fe ffd3 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8005b42:	61f8      	str	r0, [r7, #28]
        break;
 8005b44:	e142      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005b46:	4b95      	ldr	r3, [pc, #596]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b4c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b58:	d013      	beq.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b60:	d819      	bhi.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d004      	beq.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b6e:	d004      	beq.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8005b70:	e011      	b.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b72:	f7ff f851 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 8005b76:	61f8      	str	r0, [r7, #28]
          break;
 8005b78:	e010      	b.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b7a:	f7fe ffb5 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8005b7e:	61f8      	str	r0, [r7, #28]
          break;
 8005b80:	e00c      	b.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b82:	4b86      	ldr	r3, [pc, #536]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b8e:	d104      	bne.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8005b90:	4b83      	ldr	r3, [pc, #524]	@ (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005b92:	61fb      	str	r3, [r7, #28]
          break;
 8005b94:	e001      	b.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8005b96:	bf00      	nop
 8005b98:	e118      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005b9a:	bf00      	nop
        break;
 8005b9c:	e116      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005b9e:	4b7f      	ldr	r3, [pc, #508]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005ba8:	613b      	str	r3, [r7, #16]
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bb0:	d013      	beq.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bb8:	d819      	bhi.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d004      	beq.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bc6:	d004      	beq.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8005bc8:	e011      	b.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bca:	f7ff f825 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 8005bce:	61f8      	str	r0, [r7, #28]
          break;
 8005bd0:	e010      	b.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bd2:	f7fe ff89 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8005bd6:	61f8      	str	r0, [r7, #28]
          break;
 8005bd8:	e00c      	b.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bda:	4b70      	ldr	r3, [pc, #448]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005be6:	d104      	bne.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8005be8:	4b6d      	ldr	r3, [pc, #436]	@ (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005bea:	61fb      	str	r3, [r7, #28]
          break;
 8005bec:	e001      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8005bee:	bf00      	nop
 8005bf0:	e0ec      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005bf2:	bf00      	nop
        break;
 8005bf4:	e0ea      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005bf6:	4b69      	ldr	r3, [pc, #420]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c00:	613b      	str	r3, [r7, #16]
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c08:	d013      	beq.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c10:	d819      	bhi.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c1e:	d004      	beq.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8005c20:	e011      	b.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c22:	f7fe fff9 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 8005c26:	61f8      	str	r0, [r7, #28]
          break;
 8005c28:	e010      	b.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c2a:	f7fe ff5d 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8005c2e:	61f8      	str	r0, [r7, #28]
          break;
 8005c30:	e00c      	b.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c32:	4b5a      	ldr	r3, [pc, #360]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c3e:	d104      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8005c40:	4b57      	ldr	r3, [pc, #348]	@ (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005c42:	61fb      	str	r3, [r7, #28]
          break;
 8005c44:	e001      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8005c46:	bf00      	nop
 8005c48:	e0c0      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005c4a:	bf00      	nop
        break;
 8005c4c:	e0be      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005c4e:	4b53      	ldr	r3, [pc, #332]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c54:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c60:	d02c      	beq.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c68:	d833      	bhi.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c70:	d01a      	beq.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c78:	d82b      	bhi.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d004      	beq.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c86:	d004      	beq.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8005c88:	e023      	b.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c8a:	f7fe ffc5 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 8005c8e:	61f8      	str	r0, [r7, #28]
          break;
 8005c90:	e026      	b.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005c92:	4b42      	ldr	r3, [pc, #264]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d11a      	bne.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8005ca0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005ca4:	61fb      	str	r3, [r7, #28]
          break;
 8005ca6:	e016      	b.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ca8:	4b3c      	ldr	r3, [pc, #240]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cb4:	d111      	bne.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8005cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005cb8:	61fb      	str	r3, [r7, #28]
          break;
 8005cba:	e00e      	b.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005cbc:	4b37      	ldr	r3, [pc, #220]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d109      	bne.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8005cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cce:	61fb      	str	r3, [r7, #28]
          break;
 8005cd0:	e005      	b.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8005cd2:	bf00      	nop
 8005cd4:	e07a      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005cd6:	bf00      	nop
 8005cd8:	e078      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005cda:	bf00      	nop
 8005cdc:	e076      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005cde:	bf00      	nop
        break;
 8005ce0:	e074      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005ce2:	4b2e      	ldr	r3, [pc, #184]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005cec:	613b      	str	r3, [r7, #16]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cf4:	d02c      	beq.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cfc:	d833      	bhi.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d04:	d01a      	beq.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d0c:	d82b      	bhi.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d004      	beq.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d1a:	d004      	beq.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8005d1c:	e023      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d1e:	f7fe ff7b 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 8005d22:	61f8      	str	r0, [r7, #28]
          break;
 8005d24:	e026      	b.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005d26:	4b1d      	ldr	r3, [pc, #116]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d11a      	bne.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8005d34:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005d38:	61fb      	str	r3, [r7, #28]
          break;
 8005d3a:	e016      	b.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d3c:	4b17      	ldr	r3, [pc, #92]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d48:	d111      	bne.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8005d4a:	4b15      	ldr	r3, [pc, #84]	@ (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005d4c:	61fb      	str	r3, [r7, #28]
          break;
 8005d4e:	e00e      	b.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d50:	4b12      	ldr	r3, [pc, #72]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d109      	bne.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8005d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d62:	61fb      	str	r3, [r7, #28]
          break;
 8005d64:	e005      	b.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8005d66:	bf00      	nop
 8005d68:	e030      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005d6a:	bf00      	nop
 8005d6c:	e02e      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005d6e:	bf00      	nop
 8005d70:	e02c      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005d72:	bf00      	nop
        break;
 8005d74:	e02a      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8005d76:	4b09      	ldr	r3, [pc, #36]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d8e:	d009      	beq.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8005d90:	e012      	b.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d92:	f7fe ff41 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 8005d96:	61f8      	str	r0, [r7, #28]
          break;
 8005d98:	e00e      	b.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8005d9a:	bf00      	nop
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005da4:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005db0:	d101      	bne.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8005db2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005db4:	61fb      	str	r3, [r7, #28]
          break;
 8005db6:	bf00      	nop
        break;
 8005db8:	e008      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005dba:	bf00      	nop
 8005dbc:	e006      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005dbe:	bf00      	nop
 8005dc0:	e004      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005dc2:	bf00      	nop
 8005dc4:	e002      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005dc6:	bf00      	nop
 8005dc8:	e000      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005dca:	bf00      	nop
    }
  }

  return(frequency);
 8005dcc:	69fb      	ldr	r3, [r7, #28]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3720      	adds	r7, #32
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	40021000 	.word	0x40021000
 8005ddc:	00f42400 	.word	0x00f42400

08005de0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005de4:	4b05      	ldr	r3, [pc, #20]	@ (8005dfc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a04      	ldr	r2, [pc, #16]	@ (8005dfc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005dea:	f043 0304 	orr.w	r3, r3, #4
 8005dee:	6013      	str	r3, [r2, #0]
}
 8005df0:	bf00      	nop
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	40021000 	.word	0x40021000

08005e00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e0e:	4b75      	ldr	r3, [pc, #468]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d018      	beq.n	8005e4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e1a:	4b72      	ldr	r3, [pc, #456]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f003 0203 	and.w	r2, r3, #3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d10d      	bne.n	8005e46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
       ||
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d009      	beq.n	8005e46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005e32:	4b6c      	ldr	r3, [pc, #432]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	091b      	lsrs	r3, r3, #4
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
       ||
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d047      	beq.n	8005ed6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	73fb      	strb	r3, [r7, #15]
 8005e4a:	e044      	b.n	8005ed6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d018      	beq.n	8005e86 <RCCEx_PLLSAI1_Config+0x86>
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d825      	bhi.n	8005ea4 <RCCEx_PLLSAI1_Config+0xa4>
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d002      	beq.n	8005e62 <RCCEx_PLLSAI1_Config+0x62>
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d009      	beq.n	8005e74 <RCCEx_PLLSAI1_Config+0x74>
 8005e60:	e020      	b.n	8005ea4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e62:	4b60      	ldr	r3, [pc, #384]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d11d      	bne.n	8005eaa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e72:	e01a      	b.n	8005eaa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e74:	4b5b      	ldr	r3, [pc, #364]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d116      	bne.n	8005eae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e84:	e013      	b.n	8005eae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e86:	4b57      	ldr	r3, [pc, #348]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10f      	bne.n	8005eb2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e92:	4b54      	ldr	r3, [pc, #336]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d109      	bne.n	8005eb2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ea2:	e006      	b.n	8005eb2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea8:	e004      	b.n	8005eb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005eaa:	bf00      	nop
 8005eac:	e002      	b.n	8005eb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005eae:	bf00      	nop
 8005eb0:	e000      	b.n	8005eb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005eb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10d      	bne.n	8005ed6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005eba:	4b4a      	ldr	r3, [pc, #296]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6819      	ldr	r1, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	430b      	orrs	r3, r1
 8005ed0:	4944      	ldr	r1, [pc, #272]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d17d      	bne.n	8005fd8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005edc:	4b41      	ldr	r3, [pc, #260]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a40      	ldr	r2, [pc, #256]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ee2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee8:	f7fc ff08 	bl	8002cfc <HAL_GetTick>
 8005eec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005eee:	e009      	b.n	8005f04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ef0:	f7fc ff04 	bl	8002cfc <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d902      	bls.n	8005f04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	73fb      	strb	r3, [r7, #15]
        break;
 8005f02:	e005      	b.n	8005f10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f04:	4b37      	ldr	r3, [pc, #220]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1ef      	bne.n	8005ef0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d160      	bne.n	8005fd8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d111      	bne.n	8005f40 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f1c:	4b31      	ldr	r3, [pc, #196]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005f24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6892      	ldr	r2, [r2, #8]
 8005f2c:	0211      	lsls	r1, r2, #8
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	68d2      	ldr	r2, [r2, #12]
 8005f32:	0912      	lsrs	r2, r2, #4
 8005f34:	0452      	lsls	r2, r2, #17
 8005f36:	430a      	orrs	r2, r1
 8005f38:	492a      	ldr	r1, [pc, #168]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	610b      	str	r3, [r1, #16]
 8005f3e:	e027      	b.n	8005f90 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d112      	bne.n	8005f6c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f46:	4b27      	ldr	r3, [pc, #156]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005f4e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6892      	ldr	r2, [r2, #8]
 8005f56:	0211      	lsls	r1, r2, #8
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6912      	ldr	r2, [r2, #16]
 8005f5c:	0852      	lsrs	r2, r2, #1
 8005f5e:	3a01      	subs	r2, #1
 8005f60:	0552      	lsls	r2, r2, #21
 8005f62:	430a      	orrs	r2, r1
 8005f64:	491f      	ldr	r1, [pc, #124]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	610b      	str	r3, [r1, #16]
 8005f6a:	e011      	b.n	8005f90 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005f74:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	6892      	ldr	r2, [r2, #8]
 8005f7c:	0211      	lsls	r1, r2, #8
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6952      	ldr	r2, [r2, #20]
 8005f82:	0852      	lsrs	r2, r2, #1
 8005f84:	3a01      	subs	r2, #1
 8005f86:	0652      	lsls	r2, r2, #25
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	4916      	ldr	r1, [pc, #88]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005f90:	4b14      	ldr	r3, [pc, #80]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a13      	ldr	r2, [pc, #76]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005f9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9c:	f7fc feae 	bl	8002cfc <HAL_GetTick>
 8005fa0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fa2:	e009      	b.n	8005fb8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fa4:	f7fc feaa 	bl	8002cfc <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d902      	bls.n	8005fb8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	73fb      	strb	r3, [r7, #15]
          break;
 8005fb6:	e005      	b.n	8005fc4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0ef      	beq.n	8005fa4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005fca:	4b06      	ldr	r3, [pc, #24]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fcc:	691a      	ldr	r2, [r3, #16]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	4904      	ldr	r1, [pc, #16]	@ (8005fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	40021000 	.word	0x40021000

08005fe8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ff6:	4b6a      	ldr	r3, [pc, #424]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d018      	beq.n	8006034 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006002:	4b67      	ldr	r3, [pc, #412]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f003 0203 	and.w	r2, r3, #3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d10d      	bne.n	800602e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
       ||
 8006016:	2b00      	cmp	r3, #0
 8006018:	d009      	beq.n	800602e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800601a:	4b61      	ldr	r3, [pc, #388]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	091b      	lsrs	r3, r3, #4
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
       ||
 800602a:	429a      	cmp	r2, r3
 800602c:	d047      	beq.n	80060be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	73fb      	strb	r3, [r7, #15]
 8006032:	e044      	b.n	80060be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b03      	cmp	r3, #3
 800603a:	d018      	beq.n	800606e <RCCEx_PLLSAI2_Config+0x86>
 800603c:	2b03      	cmp	r3, #3
 800603e:	d825      	bhi.n	800608c <RCCEx_PLLSAI2_Config+0xa4>
 8006040:	2b01      	cmp	r3, #1
 8006042:	d002      	beq.n	800604a <RCCEx_PLLSAI2_Config+0x62>
 8006044:	2b02      	cmp	r3, #2
 8006046:	d009      	beq.n	800605c <RCCEx_PLLSAI2_Config+0x74>
 8006048:	e020      	b.n	800608c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800604a:	4b55      	ldr	r3, [pc, #340]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d11d      	bne.n	8006092 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800605a:	e01a      	b.n	8006092 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800605c:	4b50      	ldr	r3, [pc, #320]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006064:	2b00      	cmp	r3, #0
 8006066:	d116      	bne.n	8006096 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800606c:	e013      	b.n	8006096 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800606e:	4b4c      	ldr	r3, [pc, #304]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10f      	bne.n	800609a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800607a:	4b49      	ldr	r3, [pc, #292]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d109      	bne.n	800609a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800608a:	e006      	b.n	800609a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	73fb      	strb	r3, [r7, #15]
      break;
 8006090:	e004      	b.n	800609c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006092:	bf00      	nop
 8006094:	e002      	b.n	800609c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006096:	bf00      	nop
 8006098:	e000      	b.n	800609c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800609a:	bf00      	nop
    }

    if(status == HAL_OK)
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10d      	bne.n	80060be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80060a2:	4b3f      	ldr	r3, [pc, #252]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6819      	ldr	r1, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	430b      	orrs	r3, r1
 80060b8:	4939      	ldr	r1, [pc, #228]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d167      	bne.n	8006194 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80060c4:	4b36      	ldr	r3, [pc, #216]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a35      	ldr	r2, [pc, #212]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060d0:	f7fc fe14 	bl	8002cfc <HAL_GetTick>
 80060d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060d6:	e009      	b.n	80060ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060d8:	f7fc fe10 	bl	8002cfc <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d902      	bls.n	80060ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	73fb      	strb	r3, [r7, #15]
        break;
 80060ea:	e005      	b.n	80060f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060ec:	4b2c      	ldr	r3, [pc, #176]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1ef      	bne.n	80060d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d14a      	bne.n	8006194 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d111      	bne.n	8006128 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006104:	4b26      	ldr	r3, [pc, #152]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800610c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	6892      	ldr	r2, [r2, #8]
 8006114:	0211      	lsls	r1, r2, #8
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	68d2      	ldr	r2, [r2, #12]
 800611a:	0912      	lsrs	r2, r2, #4
 800611c:	0452      	lsls	r2, r2, #17
 800611e:	430a      	orrs	r2, r1
 8006120:	491f      	ldr	r1, [pc, #124]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006122:	4313      	orrs	r3, r2
 8006124:	614b      	str	r3, [r1, #20]
 8006126:	e011      	b.n	800614c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006128:	4b1d      	ldr	r3, [pc, #116]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006130:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6892      	ldr	r2, [r2, #8]
 8006138:	0211      	lsls	r1, r2, #8
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6912      	ldr	r2, [r2, #16]
 800613e:	0852      	lsrs	r2, r2, #1
 8006140:	3a01      	subs	r2, #1
 8006142:	0652      	lsls	r2, r2, #25
 8006144:	430a      	orrs	r2, r1
 8006146:	4916      	ldr	r1, [pc, #88]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006148:	4313      	orrs	r3, r2
 800614a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800614c:	4b14      	ldr	r3, [pc, #80]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a13      	ldr	r2, [pc, #76]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006156:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006158:	f7fc fdd0 	bl	8002cfc <HAL_GetTick>
 800615c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800615e:	e009      	b.n	8006174 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006160:	f7fc fdcc 	bl	8002cfc <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d902      	bls.n	8006174 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	73fb      	strb	r3, [r7, #15]
          break;
 8006172:	e005      	b.n	8006180 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006174:	4b0a      	ldr	r3, [pc, #40]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0ef      	beq.n	8006160 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d106      	bne.n	8006194 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006186:	4b06      	ldr	r3, [pc, #24]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006188:	695a      	ldr	r2, [r3, #20]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	4904      	ldr	r1, [pc, #16]	@ (80061a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006190:	4313      	orrs	r3, r2
 8006192:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006194:	7bfb      	ldrb	r3, [r7, #15]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40021000 	.word	0x40021000

080061a4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b089      	sub	sp, #36	@ 0x24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061c0:	d10c      	bne.n	80061dc <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80061c2:	4b6e      	ldr	r3, [pc, #440]	@ (800637c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80061c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80061cc:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061d4:	d112      	bne.n	80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80061d6:	4b6a      	ldr	r3, [pc, #424]	@ (8006380 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80061d8:	61fb      	str	r3, [r7, #28]
 80061da:	e00f      	b.n	80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061e2:	d10b      	bne.n	80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80061e4:	4b65      	ldr	r3, [pc, #404]	@ (800637c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80061e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ea:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80061ee:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80061f6:	d101      	bne.n	80061fc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80061f8:	4b61      	ldr	r3, [pc, #388]	@ (8006380 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80061fa:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f040 80b4 	bne.w	800636c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800620e:	d003      	beq.n	8006218 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006216:	d135      	bne.n	8006284 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006218:	4b58      	ldr	r3, [pc, #352]	@ (800637c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006220:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006224:	f040 80a1 	bne.w	800636a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8006228:	4b54      	ldr	r3, [pc, #336]	@ (800637c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 809a 	beq.w	800636a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006236:	4b51      	ldr	r3, [pc, #324]	@ (800637c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	091b      	lsrs	r3, r3, #4
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	3301      	adds	r3, #1
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	fbb2 f3f3 	udiv	r3, r2, r3
 8006248:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800624a:	4b4c      	ldr	r3, [pc, #304]	@ (800637c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	0a1b      	lsrs	r3, r3, #8
 8006250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006254:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800625c:	4b47      	ldr	r3, [pc, #284]	@ (800637c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8006268:	2311      	movs	r3, #17
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	e001      	b.n	8006272 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800626e:	2307      	movs	r3, #7
 8006270:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	fb03 f202 	mul.w	r2, r3, r2
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006280:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006282:	e072      	b.n	800636a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d133      	bne.n	80062f2 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800628a:	4b3c      	ldr	r3, [pc, #240]	@ (800637c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006292:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006296:	d169      	bne.n	800636c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8006298:	4b38      	ldr	r3, [pc, #224]	@ (800637c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d063      	beq.n	800636c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80062a4:	4b35      	ldr	r3, [pc, #212]	@ (800637c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	091b      	lsrs	r3, r3, #4
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	3301      	adds	r3, #1
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80062b8:	4b30      	ldr	r3, [pc, #192]	@ (800637c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	0a1b      	lsrs	r3, r3, #8
 80062be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062c2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10a      	bne.n	80062e0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80062ca:	4b2c      	ldr	r3, [pc, #176]	@ (800637c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 80062d6:	2311      	movs	r3, #17
 80062d8:	617b      	str	r3, [r7, #20]
 80062da:	e001      	b.n	80062e0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 80062dc:	2307      	movs	r3, #7
 80062de:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	fb03 f202 	mul.w	r2, r3, r2
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ee:	61fb      	str	r3, [r7, #28]
 80062f0:	e03c      	b.n	800636c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062f8:	d003      	beq.n	8006302 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006300:	d134      	bne.n	800636c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006302:	4b1e      	ldr	r3, [pc, #120]	@ (800637c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800630a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800630e:	d12d      	bne.n	800636c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8006310:	4b1a      	ldr	r3, [pc, #104]	@ (800637c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d027      	beq.n	800636c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800631c:	4b17      	ldr	r3, [pc, #92]	@ (800637c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	091b      	lsrs	r3, r3, #4
 8006322:	f003 0307 	and.w	r3, r3, #7
 8006326:	3301      	adds	r3, #1
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	fbb2 f3f3 	udiv	r3, r2, r3
 800632e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006330:	4b12      	ldr	r3, [pc, #72]	@ (800637c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	0a1b      	lsrs	r3, r3, #8
 8006336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800633a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10a      	bne.n	8006358 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006342:	4b0e      	ldr	r3, [pc, #56]	@ (800637c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800634e:	2311      	movs	r3, #17
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	e001      	b.n	8006358 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8006354:	2307      	movs	r3, #7
 8006356:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	fb03 f202 	mul.w	r2, r3, r2
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	fbb2 f3f3 	udiv	r3, r2, r3
 8006366:	61fb      	str	r3, [r7, #28]
 8006368:	e000      	b.n	800636c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800636a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800636c:	69fb      	ldr	r3, [r7, #28]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3724      	adds	r7, #36	@ 0x24
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40021000 	.word	0x40021000
 8006380:	001fff68 	.word	0x001fff68

08006384 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d079      	beq.n	800648a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d106      	bne.n	80063b0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fc f9e0 	bl	8002770 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f003 0310 	and.w	r3, r3, #16
 80063c2:	2b10      	cmp	r3, #16
 80063c4:	d058      	beq.n	8006478 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	22ca      	movs	r2, #202	@ 0xca
 80063cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2253      	movs	r2, #83	@ 0x53
 80063d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f92a 	bl	8006630 <RTC_EnterInitMode>
 80063dc:	4603      	mov	r3, r0
 80063de:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d127      	bne.n	8006436 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6812      	ldr	r2, [r2, #0]
 80063f0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80063f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063f8:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6899      	ldr	r1, [r3, #8]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	431a      	orrs	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	68d2      	ldr	r2, [r2, #12]
 8006420:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6919      	ldr	r1, [r3, #16]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	041a      	lsls	r2, r3, #16
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f92e 	bl	8006698 <RTC_ExitInitMode>
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d113      	bne.n	800646e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0203 	bic.w	r2, r2, #3
 8006454:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	69da      	ldr	r2, [r3, #28]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	431a      	orrs	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	22ff      	movs	r2, #255	@ 0xff
 8006474:	625a      	str	r2, [r3, #36]	@ 0x24
 8006476:	e001      	b.n	800647c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d103      	bne.n	800648a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800648a:	7bfb      	ldrb	r3, [r7, #15]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80064c2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80064c6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	0c1b      	lsrs	r3, r3, #16
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	0a1b      	lsrs	r3, r3, #8
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	0d9b      	lsrs	r3, r3, #22
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	b2da      	uxtb	r2, r3
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d11a      	bne.n	8006542 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	4618      	mov	r0, r3
 8006512:	f000 f8ff 	bl	8006714 <RTC_Bcd2ToByte>
 8006516:	4603      	mov	r3, r0
 8006518:	461a      	mov	r2, r3
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	785b      	ldrb	r3, [r3, #1]
 8006522:	4618      	mov	r0, r3
 8006524:	f000 f8f6 	bl	8006714 <RTC_Bcd2ToByte>
 8006528:	4603      	mov	r3, r0
 800652a:	461a      	mov	r2, r3
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	789b      	ldrb	r3, [r3, #2]
 8006534:	4618      	mov	r0, r3
 8006536:	f000 f8ed 	bl	8006714 <RTC_Bcd2ToByte>
 800653a:	4603      	mov	r3, r0
 800653c:	461a      	mov	r2, r3
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3718      	adds	r7, #24
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006562:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006566:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	0c1b      	lsrs	r3, r3, #16
 800656c:	b2da      	uxtb	r2, r3
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	0a1b      	lsrs	r3, r3, #8
 8006576:	b2db      	uxtb	r3, r3
 8006578:	f003 031f 	and.w	r3, r3, #31
 800657c:	b2da      	uxtb	r2, r3
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	b2db      	uxtb	r3, r3
 8006586:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800658a:	b2da      	uxtb	r2, r3
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	0b5b      	lsrs	r3, r3, #13
 8006594:	b2db      	uxtb	r3, r3
 8006596:	f003 0307 	and.w	r3, r3, #7
 800659a:	b2da      	uxtb	r2, r3
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d11a      	bne.n	80065dc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	78db      	ldrb	r3, [r3, #3]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 f8b2 	bl	8006714 <RTC_Bcd2ToByte>
 80065b0:	4603      	mov	r3, r0
 80065b2:	461a      	mov	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	785b      	ldrb	r3, [r3, #1]
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 f8a9 	bl	8006714 <RTC_Bcd2ToByte>
 80065c2:	4603      	mov	r3, r0
 80065c4:	461a      	mov	r2, r3
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	789b      	ldrb	r3, [r3, #2]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 f8a0 	bl	8006714 <RTC_Bcd2ToByte>
 80065d4:	4603      	mov	r3, r0
 80065d6:	461a      	mov	r2, r3
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a0d      	ldr	r2, [pc, #52]	@ (800662c <HAL_RTC_WaitForSynchro+0x44>)
 80065f6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80065f8:	f7fc fb80 	bl	8002cfc <HAL_GetTick>
 80065fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065fe:	e009      	b.n	8006614 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006600:	f7fc fb7c 	bl	8002cfc <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800660e:	d901      	bls.n	8006614 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e007      	b.n	8006624 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0ee      	beq.n	8006600 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	0003ff5f 	.word	0x0003ff5f

08006630 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006638:	2300      	movs	r3, #0
 800663a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006646:	2b00      	cmp	r3, #0
 8006648:	d120      	bne.n	800668c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f04f 32ff 	mov.w	r2, #4294967295
 8006652:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006654:	f7fc fb52 	bl	8002cfc <HAL_GetTick>
 8006658:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800665a:	e00d      	b.n	8006678 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800665c:	f7fc fb4e 	bl	8002cfc <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800666a:	d905      	bls.n	8006678 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2203      	movs	r2, #3
 8006674:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006682:	2b00      	cmp	r3, #0
 8006684:	d102      	bne.n	800668c <RTC_EnterInitMode+0x5c>
 8006686:	7bfb      	ldrb	r3, [r7, #15]
 8006688:	2b03      	cmp	r3, #3
 800668a:	d1e7      	bne.n	800665c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800668c:	7bfb      	ldrb	r3, [r7, #15]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80066a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006710 <RTC_ExitInitMode+0x78>)
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	4a19      	ldr	r2, [pc, #100]	@ (8006710 <RTC_ExitInitMode+0x78>)
 80066aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066ae:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80066b0:	4b17      	ldr	r3, [pc, #92]	@ (8006710 <RTC_ExitInitMode+0x78>)
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f003 0320 	and.w	r3, r3, #32
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10c      	bne.n	80066d6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff ff93 	bl	80065e8 <HAL_RTC_WaitForSynchro>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01e      	beq.n	8006706 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2203      	movs	r2, #3
 80066cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	73fb      	strb	r3, [r7, #15]
 80066d4:	e017      	b.n	8006706 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80066d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006710 <RTC_ExitInitMode+0x78>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	4a0d      	ldr	r2, [pc, #52]	@ (8006710 <RTC_ExitInitMode+0x78>)
 80066dc:	f023 0320 	bic.w	r3, r3, #32
 80066e0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7ff ff80 	bl	80065e8 <HAL_RTC_WaitForSynchro>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2203      	movs	r2, #3
 80066f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80066fa:	4b05      	ldr	r3, [pc, #20]	@ (8006710 <RTC_ExitInitMode+0x78>)
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	4a04      	ldr	r2, [pc, #16]	@ (8006710 <RTC_ExitInitMode+0x78>)
 8006700:	f043 0320 	orr.w	r3, r3, #32
 8006704:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006706:	7bfb      	ldrb	r3, [r7, #15]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	40002800 	.word	0x40002800

08006714 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	091b      	lsrs	r3, r3, #4
 8006722:	b2db      	uxtb	r3, r3
 8006724:	461a      	mov	r2, r3
 8006726:	0092      	lsls	r2, r2, #2
 8006728:	4413      	add	r3, r2
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	f003 030f 	and.w	r3, r3, #15
 8006734:	b2da      	uxtb	r2, r3
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	4413      	add	r3, r2
 800673a:	b2db      	uxtb	r3, r3
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 3020 	ldrb.w	r3, [r3, #32]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800675e:	2302      	movs	r3, #2
 8006760:	e07f      	b.n	8006862 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2202      	movs	r2, #2
 800676e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	22ca      	movs	r2, #202	@ 0xca
 8006778:	625a      	str	r2, [r3, #36]	@ 0x24
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2253      	movs	r2, #83	@ 0x53
 8006780:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006790:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	b2da      	uxtb	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80067a2:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d120      	bne.n	80067f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 80067b2:	f7fc faa3 	bl	8002cfc <HAL_GetTick>
 80067b6:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80067b8:	e015      	b.n	80067e6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067ba:	f7fc fa9f 	bl	8002cfc <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067c8:	d90d      	bls.n	80067e6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	22ff      	movs	r2, #255	@ 0xff
 80067d0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2203      	movs	r2, #3
 80067d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e03d      	b.n	8006862 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0e2      	beq.n	80067ba <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f023 0107 	bic.w	r1, r3, #7
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	430a      	orrs	r2, r1
 800680e:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006810:	4b16      	ldr	r3, [pc, #88]	@ (800686c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a15      	ldr	r2, [pc, #84]	@ (800686c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8006816:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800681a:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800681c:	4b13      	ldr	r3, [pc, #76]	@ (800686c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	4a12      	ldr	r2, [pc, #72]	@ (800686c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8006822:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006826:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689a      	ldr	r2, [r3, #8]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006836:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689a      	ldr	r2, [r3, #8]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006846:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	22ff      	movs	r2, #255	@ 0xff
 800684e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	40010400 	.word	0x40010400

08006870 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8006882:	2302      	movs	r3, #2
 8006884:	e04d      	b.n	8006922 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2202      	movs	r2, #2
 8006892:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	22ca      	movs	r2, #202	@ 0xca
 800689c:	625a      	str	r2, [r3, #36]	@ 0x24
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2253      	movs	r2, #83	@ 0x53
 80068a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068b4:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80068c4:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80068c6:	f7fc fa19 	bl	8002cfc <HAL_GetTick>
 80068ca:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80068cc:	e015      	b.n	80068fa <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068ce:	f7fc fa15 	bl	8002cfc <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068dc:	d90d      	bls.n	80068fa <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	22ff      	movs	r2, #255	@ 0xff
 80068e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2203      	movs	r2, #3
 80068ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e013      	b.n	8006922 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0e2      	beq.n	80068ce <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	22ff      	movs	r2, #255	@ 0xff
 800690e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006934:	4b0f      	ldr	r3, [pc, #60]	@ (8006974 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8006936:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800693a:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00b      	beq.n	8006962 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	b2da      	uxtb	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800695a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7fb fe75 	bl	800264c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40010400 	.word	0x40010400

08006978 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e02d      	b.n	80069e6 <HAL_SD_Init+0x6e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d105      	bne.n	80069a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7fb ff21 	bl	80027e4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2203      	movs	r2, #3
 80069a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f820 	bl	80069f0 <HAL_SD_InitCard>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e015      	b.n	80069e6 <HAL_SD_Init+0x6e>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Configure the bus wide with the specified value in the SD_HandleTypeDef */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fdef 	bl	80075a4 <HAL_SD_ConfigWideBusOperation>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e00a      	b.n	80069e6 <HAL_SD_Init+0x6e>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80069f0:	b5b0      	push	{r4, r5, r7, lr}
 80069f2:	b08e      	sub	sp, #56	@ 0x38
 80069f4:	af04      	add	r7, sp, #16
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80069f8:	2300      	movs	r3, #0
 80069fa:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80069fc:	2300      	movs	r3, #0
 80069fe:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006a00:	2300      	movs	r3, #0
 8006a02:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006a0c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006a10:	f7fe fc78 	bl	8005304 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a14:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8006a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d109      	bne.n	8006a30 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006a2a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e07b      	b.n	8006b28 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8006a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a32:	09db      	lsrs	r3, r3, #7
 8006a34:	4a3e      	ldr	r2, [pc, #248]	@ (8006b30 <HAL_SD_InitCard+0x140>)
 8006a36:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3a:	091b      	lsrs	r3, r3, #4
 8006a3c:	3b02      	subs	r3, #2
 8006a3e:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681d      	ldr	r5, [r3, #0]
 8006a44:	466c      	mov	r4, sp
 8006a46:	f107 0314 	add.w	r3, r7, #20
 8006a4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a52:	f107 0308 	add.w	r3, r7, #8
 8006a56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a58:	4628      	mov	r0, r5
 8006a5a:	f001 ff00 	bl	800885e <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a6c:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f001 ff3e 	bl	80088f4 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a86:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	3302      	adds	r3, #2
 8006a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006a94:	4a27      	ldr	r2, [pc, #156]	@ (8006b34 <HAL_SD_InitCard+0x144>)
 8006a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fc f938 	bl	8002d14 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 ff19 	bl	80078dc <SD_PowerON>
 8006aaa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00b      	beq.n	8006aca <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e02e      	b.n	8006b28 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fe46 	bl	800775c <SD_InitCard>
 8006ad0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00b      	beq.n	8006af0 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e01b      	b.n	8006b28 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006af8:	4618      	mov	r0, r3
 8006afa:	f001 ff8e 	bl	8008a1a <SDMMC_CmdBlockLength>
 8006afe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00f      	beq.n	8006b26 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a0b      	ldr	r2, [pc, #44]	@ (8006b38 <HAL_SD_InitCard+0x148>)
 8006b0c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	431a      	orrs	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e000      	b.n	8006b28 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3728      	adds	r7, #40	@ 0x28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8006b30:	014f8b59 	.word	0x014f8b59
 8006b34:	00012110 	.word	0x00012110
 8006b38:	004005ff 	.word	0x004005ff

08006b3c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b092      	sub	sp, #72	@ 0x48
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006b4a:	f7fc f8d7 	bl	8002cfc <HAL_GetTick>
 8006b4e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d107      	bne.n	8006b6e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b62:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e1bd      	b.n	8006eea <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	f040 81b0 	bne.w	8006edc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	441a      	add	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d907      	bls.n	8006ba0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b94:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e1a4      	b.n	8006eea <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2203      	movs	r2, #3
 8006ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2200      	movs	r2, #0
 8006bae:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d002      	beq.n	8006bbe <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bba:	025b      	lsls	r3, r3, #9
 8006bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	025b      	lsls	r3, r3, #9
 8006bc8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006bca:	2390      	movs	r3, #144	@ 0x90
 8006bcc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006bce:	2302      	movs	r3, #2
 8006bd0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	627b      	str	r3, [r7, #36]	@ 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f107 0214 	add.w	r2, r7, #20
 8006be2:	4611      	mov	r1, r2
 8006be4:	4618      	mov	r0, r3
 8006be6:	f001 feec 	bl	80089c2 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d90a      	bls.n	8006c06 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f001 ff50 	bl	8008aa2 <SDMMC_CmdReadMultiBlock>
 8006c02:	6478      	str	r0, [r7, #68]	@ 0x44
 8006c04:	e009      	b.n	8006c1a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006c12:	4618      	mov	r0, r3
 8006c14:	f001 ff23 	bl	8008a5e <SDMMC_CmdReadSingleBlock>
 8006c18:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d012      	beq.n	8006c46 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a7a      	ldr	r2, [pc, #488]	@ (8006e10 <HAL_SD_ReadBlocks+0x2d4>)
 8006c26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e151      	b.n	8006eea <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006c4a:	e061      	b.n	8006d10 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d03c      	beq.n	8006cd4 <HAL_SD_ReadBlocks+0x198>
 8006c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d039      	beq.n	8006cd4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006c60:	2300      	movs	r3, #0
 8006c62:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c64:	e033      	b.n	8006cce <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f001 fe24 	bl	80088b8 <SDMMC_ReadFIFO>
 8006c70:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c78:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c82:	3b01      	subs	r3, #1
 8006c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c88:	0a1b      	lsrs	r3, r3, #8
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c8e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c92:	3301      	adds	r3, #1
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c9e:	0c1b      	lsrs	r3, r3, #16
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca8:	3301      	adds	r3, #1
 8006caa:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb4:	0e1b      	lsrs	r3, r3, #24
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cba:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8006cc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cca:	3301      	adds	r3, #1
 8006ccc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cd0:	2b07      	cmp	r3, #7
 8006cd2:	d9c8      	bls.n	8006c66 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006cd4:	f7fc f812 	bl	8002cfc <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d902      	bls.n	8006cea <HAL_SD_ReadBlocks+0x1ae>
 8006ce4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d112      	bne.n	8006d10 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a48      	ldr	r2, [pc, #288]	@ (8006e10 <HAL_SD_ReadBlocks+0x2d4>)
 8006cf0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e0ec      	b.n	8006eea <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d16:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d096      	beq.n	8006c4c <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d022      	beq.n	8006d72 <HAL_SD_ReadBlocks+0x236>
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d91f      	bls.n	8006d72 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d01b      	beq.n	8006d72 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f001 ff16 	bl	8008b70 <SDMMC_CmdStopTransfer>
 8006d44:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d012      	beq.n	8006d72 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a2f      	ldr	r2, [pc, #188]	@ (8006e10 <HAL_SD_ReadBlocks+0x2d4>)
 8006d52:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e0bb      	b.n	8006eea <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d78:	f003 0308 	and.w	r3, r3, #8
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d012      	beq.n	8006da6 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a22      	ldr	r2, [pc, #136]	@ (8006e10 <HAL_SD_ReadBlocks+0x2d4>)
 8006d86:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8c:	f043 0208 	orr.w	r2, r3, #8
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e0a1      	b.n	8006eea <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d012      	beq.n	8006dda <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a15      	ldr	r2, [pc, #84]	@ (8006e10 <HAL_SD_ReadBlocks+0x2d4>)
 8006dba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc0:	f043 0202 	orr.w	r2, r3, #2
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e087      	b.n	8006eea <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006de0:	f003 0320 	and.w	r3, r3, #32
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d064      	beq.n	8006eb2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a08      	ldr	r2, [pc, #32]	@ (8006e10 <HAL_SD_ReadBlocks+0x2d4>)
 8006dee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df4:	f043 0220 	orr.w	r2, r3, #32
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e06d      	b.n	8006eea <HAL_SD_ReadBlocks+0x3ae>
 8006e0e:	bf00      	nop
 8006e10:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f001 fd4d 	bl	80088b8 <SDMMC_ReadFIFO>
 8006e1e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e26:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e30:	3b01      	subs	r3, #1
 8006e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e36:	0a1b      	lsrs	r3, r3, #8
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e3c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e40:	3301      	adds	r3, #1
 8006e42:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e46:	3b01      	subs	r3, #1
 8006e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e4c:	0c1b      	lsrs	r3, r3, #16
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e52:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e56:	3301      	adds	r3, #1
 8006e58:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e62:	0e1b      	lsrs	r3, r3, #24
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e68:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e72:	3b01      	subs	r3, #1
 8006e74:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006e76:	f7fb ff41 	bl	8002cfc <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d902      	bls.n	8006e8c <HAL_SD_ReadBlocks+0x350>
 8006e86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d112      	bne.n	8006eb2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a18      	ldr	r2, [pc, #96]	@ (8006ef4 <HAL_SD_ReadBlocks+0x3b8>)
 8006e92:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e98:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e01b      	b.n	8006eea <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d002      	beq.n	8006ec6 <HAL_SD_ReadBlocks+0x38a>
 8006ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1a6      	bne.n	8006e14 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006ece:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	e006      	b.n	8006eea <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
  }
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3748      	adds	r7, #72	@ 0x48
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	004005ff 	.word	0x004005ff

08006ef8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b092      	sub	sp, #72	@ 0x48
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
 8006f04:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006f06:	f7fb fef9 	bl	8002cfc <HAL_GetTick>
 8006f0a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d107      	bne.n	8006f2a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e165      	b.n	80071f6 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	f040 8158 	bne.w	80071e8 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006f3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	441a      	add	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d907      	bls.n	8006f5c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f50:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e14c      	b.n	80071f6 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2203      	movs	r2, #3
 8006f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d002      	beq.n	8006f7a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f76:	025b      	lsls	r3, r3, #9
 8006f78:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	025b      	lsls	r3, r3, #9
 8006f84:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006f86:	2390      	movs	r3, #144	@ 0x90
 8006f88:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	62bb      	str	r3, [r7, #40]	@ 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006f92:	2301      	movs	r3, #1
 8006f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f107 0218 	add.w	r2, r7, #24
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f001 fd0e 	bl	80089c2 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d90a      	bls.n	8006fc2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f001 fdb6 	bl	8008b2a <SDMMC_CmdWriteMultiBlock>
 8006fbe:	6478      	str	r0, [r7, #68]	@ 0x44
 8006fc0:	e009      	b.n	8006fd6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2210      	movs	r2, #16
 8006fc6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f001 fd89 	bl	8008ae6 <SDMMC_CmdWriteSingleBlock>
 8006fd4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d012      	beq.n	8007002 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a87      	ldr	r2, [pc, #540]	@ (8007200 <HAL_SD_WriteBlocks+0x308>)
 8006fe2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fea:	431a      	orrs	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e0f9      	b.n	80071f6 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007006:	e065      	b.n	80070d4 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800700e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d040      	beq.n	8007098 <HAL_SD_WriteBlocks+0x1a0>
 8007016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007018:	2b00      	cmp	r3, #0
 800701a:	d03d      	beq.n	8007098 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800701c:	2300      	movs	r3, #0
 800701e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007020:	e037      	b.n	8007092 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800702a:	3301      	adds	r3, #1
 800702c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800702e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007030:	3b01      	subs	r3, #1
 8007032:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	021a      	lsls	r2, r3, #8
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	4313      	orrs	r3, r2
 800703e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007042:	3301      	adds	r3, #1
 8007044:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007048:	3b01      	subs	r3, #1
 800704a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800704c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	041a      	lsls	r2, r3, #16
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	4313      	orrs	r3, r2
 8007056:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800705a:	3301      	adds	r3, #1
 800705c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800705e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007060:	3b01      	subs	r3, #1
 8007062:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	061a      	lsls	r2, r3, #24
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	4313      	orrs	r3, r2
 800706e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007072:	3301      	adds	r3, #1
 8007074:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007078:	3b01      	subs	r3, #1
 800707a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f107 0214 	add.w	r2, r7, #20
 8007084:	4611      	mov	r1, r2
 8007086:	4618      	mov	r0, r3
 8007088:	f001 fc23 	bl	80088d2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800708c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800708e:	3301      	adds	r3, #1
 8007090:	643b      	str	r3, [r7, #64]	@ 0x40
 8007092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007094:	2b07      	cmp	r3, #7
 8007096:	d9c4      	bls.n	8007022 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007098:	f7fb fe30 	bl	8002cfc <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d902      	bls.n	80070ae <HAL_SD_WriteBlocks+0x1b6>
 80070a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d112      	bne.n	80070d4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a53      	ldr	r2, [pc, #332]	@ (8007200 <HAL_SD_WriteBlocks+0x308>)
 80070b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070bc:	431a      	orrs	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e090      	b.n	80071f6 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070da:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d092      	beq.n	8007008 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d022      	beq.n	8007136 <HAL_SD_WriteBlocks+0x23e>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d91f      	bls.n	8007136 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d01b      	beq.n	8007136 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4618      	mov	r0, r3
 8007104:	f001 fd34 	bl	8008b70 <SDMMC_CmdStopTransfer>
 8007108:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800710a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800710c:	2b00      	cmp	r3, #0
 800710e:	d012      	beq.n	8007136 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a3a      	ldr	r2, [pc, #232]	@ (8007200 <HAL_SD_WriteBlocks+0x308>)
 8007116:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800711c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800711e:	431a      	orrs	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e05f      	b.n	80071f6 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800713c:	f003 0308 	and.w	r3, r3, #8
 8007140:	2b00      	cmp	r3, #0
 8007142:	d012      	beq.n	800716a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a2d      	ldr	r2, [pc, #180]	@ (8007200 <HAL_SD_WriteBlocks+0x308>)
 800714a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007150:	f043 0208 	orr.w	r2, r3, #8
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e045      	b.n	80071f6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007170:	f003 0302 	and.w	r3, r3, #2
 8007174:	2b00      	cmp	r3, #0
 8007176:	d012      	beq.n	800719e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a20      	ldr	r2, [pc, #128]	@ (8007200 <HAL_SD_WriteBlocks+0x308>)
 800717e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007184:	f043 0202 	orr.w	r2, r3, #2
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e02b      	b.n	80071f6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071a4:	f003 0310 	and.w	r3, r3, #16
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d012      	beq.n	80071d2 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a13      	ldr	r2, [pc, #76]	@ (8007200 <HAL_SD_WriteBlocks+0x308>)
 80071b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b8:	f043 0210 	orr.w	r2, r3, #16
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e011      	b.n	80071f6 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80071da:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	e006      	b.n	80071f6 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
  }
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3748      	adds	r7, #72	@ 0x48
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	004005ff 	.word	0x004005ff

08007204 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007212:	0f9b      	lsrs	r3, r3, #30
 8007214:	b2da      	uxtb	r2, r3
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800721e:	0e9b      	lsrs	r3, r3, #26
 8007220:	b2db      	uxtb	r3, r3
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	b2da      	uxtb	r2, r3
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007230:	0e1b      	lsrs	r3, r3, #24
 8007232:	b2db      	uxtb	r3, r3
 8007234:	f003 0303 	and.w	r3, r3, #3
 8007238:	b2da      	uxtb	r2, r3
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007242:	0c1b      	lsrs	r3, r3, #16
 8007244:	b2da      	uxtb	r2, r3
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800724e:	0a1b      	lsrs	r3, r3, #8
 8007250:	b2da      	uxtb	r2, r3
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800725a:	b2da      	uxtb	r2, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007264:	0d1b      	lsrs	r3, r3, #20
 8007266:	b29a      	uxth	r2, r3
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007270:	0c1b      	lsrs	r3, r3, #16
 8007272:	b2db      	uxtb	r3, r3
 8007274:	f003 030f 	and.w	r3, r3, #15
 8007278:	b2da      	uxtb	r2, r3
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007282:	0bdb      	lsrs	r3, r3, #15
 8007284:	b2db      	uxtb	r3, r3
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	b2da      	uxtb	r2, r3
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007294:	0b9b      	lsrs	r3, r3, #14
 8007296:	b2db      	uxtb	r3, r3
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	b2da      	uxtb	r2, r3
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072a6:	0b5b      	lsrs	r3, r3, #13
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072b8:	0b1b      	lsrs	r3, r3, #12
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2200      	movs	r2, #0
 80072ca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d163      	bne.n	800739c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072d8:	009a      	lsls	r2, r3, #2
 80072da:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80072de:	4013      	ands	r3, r2
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80072e4:	0f92      	lsrs	r2, r2, #30
 80072e6:	431a      	orrs	r2, r3
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072f0:	0edb      	lsrs	r3, r3, #27
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007302:	0e1b      	lsrs	r3, r3, #24
 8007304:	b2db      	uxtb	r3, r3
 8007306:	f003 0307 	and.w	r3, r3, #7
 800730a:	b2da      	uxtb	r2, r3
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007314:	0d5b      	lsrs	r3, r3, #21
 8007316:	b2db      	uxtb	r3, r3
 8007318:	f003 0307 	and.w	r3, r3, #7
 800731c:	b2da      	uxtb	r2, r3
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007326:	0c9b      	lsrs	r3, r3, #18
 8007328:	b2db      	uxtb	r3, r3
 800732a:	f003 0307 	and.w	r3, r3, #7
 800732e:	b2da      	uxtb	r2, r3
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007338:	0bdb      	lsrs	r3, r3, #15
 800733a:	b2db      	uxtb	r3, r3
 800733c:	f003 0307 	and.w	r3, r3, #7
 8007340:	b2da      	uxtb	r2, r3
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	7e1b      	ldrb	r3, [r3, #24]
 8007354:	b2db      	uxtb	r3, r3
 8007356:	f003 0307 	and.w	r3, r3, #7
 800735a:	3302      	adds	r3, #2
 800735c:	2201      	movs	r2, #1
 800735e:	fa02 f303 	lsl.w	r3, r2, r3
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007366:	fb03 f202 	mul.w	r2, r3, r2
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	7a1b      	ldrb	r3, [r3, #8]
 8007372:	b2db      	uxtb	r3, r3
 8007374:	f003 030f 	and.w	r3, r3, #15
 8007378:	2201      	movs	r2, #1
 800737a:	409a      	lsls	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007388:	0a52      	lsrs	r2, r2, #9
 800738a:	fb03 f202 	mul.w	r2, r3, r2
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007398:	661a      	str	r2, [r3, #96]	@ 0x60
 800739a:	e031      	b.n	8007400 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d11d      	bne.n	80073e0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073a8:	041b      	lsls	r3, r3, #16
 80073aa:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073b2:	0c1b      	lsrs	r3, r3, #16
 80073b4:	431a      	orrs	r2, r3
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	3301      	adds	r3, #1
 80073c0:	029a      	lsls	r2, r3, #10
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073d4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	661a      	str	r2, [r3, #96]	@ 0x60
 80073de:	e00f      	b.n	8007400 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a58      	ldr	r2, [pc, #352]	@ (8007548 <HAL_SD_GetCardCSD+0x344>)
 80073e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e09d      	b.n	800753c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007404:	0b9b      	lsrs	r3, r3, #14
 8007406:	b2db      	uxtb	r3, r3
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	b2da      	uxtb	r2, r3
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007416:	09db      	lsrs	r3, r3, #7
 8007418:	b2db      	uxtb	r3, r3
 800741a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800741e:	b2da      	uxtb	r2, r3
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007428:	b2db      	uxtb	r3, r3
 800742a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800742e:	b2da      	uxtb	r2, r3
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007438:	0fdb      	lsrs	r3, r3, #31
 800743a:	b2da      	uxtb	r2, r3
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007444:	0f5b      	lsrs	r3, r3, #29
 8007446:	b2db      	uxtb	r3, r3
 8007448:	f003 0303 	and.w	r3, r3, #3
 800744c:	b2da      	uxtb	r2, r3
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007456:	0e9b      	lsrs	r3, r3, #26
 8007458:	b2db      	uxtb	r3, r3
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	b2da      	uxtb	r2, r3
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007468:	0d9b      	lsrs	r3, r3, #22
 800746a:	b2db      	uxtb	r3, r3
 800746c:	f003 030f 	and.w	r3, r3, #15
 8007470:	b2da      	uxtb	r2, r3
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800747a:	0d5b      	lsrs	r3, r3, #21
 800747c:	b2db      	uxtb	r3, r3
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	b2da      	uxtb	r2, r3
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007496:	0c1b      	lsrs	r3, r3, #16
 8007498:	b2db      	uxtb	r3, r3
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074aa:	0bdb      	lsrs	r3, r3, #15
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074be:	0b9b      	lsrs	r3, r3, #14
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074d2:	0b5b      	lsrs	r3, r3, #13
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e6:	0b1b      	lsrs	r3, r3, #12
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074fa:	0a9b      	lsrs	r3, r3, #10
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	b2da      	uxtb	r2, r3
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800750e:	0a1b      	lsrs	r3, r3, #8
 8007510:	b2db      	uxtb	r3, r3
 8007512:	f003 0303 	and.w	r3, r3, #3
 8007516:	b2da      	uxtb	r2, r3
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007522:	085b      	lsrs	r3, r3, #1
 8007524:	b2db      	uxtb	r3, r3
 8007526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800752a:	b2da      	uxtb	r2, r3
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	004005ff 	.word	0x004005ff

0800754c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80075a4:	b5b0      	push	{r4, r5, r7, lr}
 80075a6:	b090      	sub	sp, #64	@ 0x40
 80075a8:	af04      	add	r7, sp, #16
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2203      	movs	r2, #3
 80075b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d02e      	beq.n	8007622 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075ca:	d106      	bne.n	80075da <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80075d8:	e029      	b.n	800762e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075e0:	d10a      	bne.n	80075f8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fa30 	bl	8007a48 <SD_WideBus_Enable>
 80075e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f0:	431a      	orrs	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80075f6:	e01a      	b.n	800762e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10a      	bne.n	8007614 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fa6d 	bl	8007ade <SD_WideBus_Disable>
 8007604:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800760a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760c:	431a      	orrs	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	639a      	str	r2, [r3, #56]	@ 0x38
 8007612:	e00c      	b.n	800762e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007618:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007620:	e005      	b.n	800762e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007626:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007632:	2b00      	cmp	r3, #0
 8007634:	d007      	beq.n	8007646 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a35      	ldr	r2, [pc, #212]	@ (8007710 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800763c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007644:	e042      	b.n	80076cc <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007646:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800764a:	f7fd fe5b 	bl	8005304 <HAL_RCCEx_GetPeriphCLKFreq>
 800764e:	6278      	str	r0, [r7, #36]	@ 0x24
    if (sdmmc_clk != 0U)
 8007650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007652:	2b00      	cmp	r3, #0
 8007654:	d031      	beq.n	80076ba <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	695b      	ldr	r3, [r3, #20]
 8007670:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	3302      	adds	r3, #2
 8007678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800767a:	fbb2 f3f3 	udiv	r3, r2, r3
 800767e:	4a25      	ldr	r2, [pc, #148]	@ (8007714 <HAL_SD_ConfigWideBusOperation+0x170>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d907      	bls.n	8007694 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8007684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007686:	4a24      	ldr	r2, [pc, #144]	@ (8007718 <HAL_SD_ConfigWideBusOperation+0x174>)
 8007688:	fba2 2303 	umull	r2, r3, r2, r3
 800768c:	0ddb      	lsrs	r3, r3, #23
 800768e:	3b02      	subs	r3, #2
 8007690:	623b      	str	r3, [r7, #32]
 8007692:	e002      	b.n	800769a <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681d      	ldr	r5, [r3, #0]
 800769e:	466c      	mov	r4, sp
 80076a0:	f107 0318 	add.w	r3, r7, #24
 80076a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80076a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80076ac:	f107 030c 	add.w	r3, r7, #12
 80076b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076b2:	4628      	mov	r0, r5
 80076b4:	f001 f8d3 	bl	800885e <SDMMC_Init>
 80076b8:	e008      	b.n	80076cc <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	639a      	str	r2, [r3, #56]	@ 0x38
      status = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80076d4:	4618      	mov	r0, r3
 80076d6:	f001 f9a0 	bl	8008a1a <SDMMC_CmdBlockLength>
 80076da:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80076dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00c      	beq.n	80076fc <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007710 <HAL_SD_ConfigWideBusOperation+0x16c>)
 80076e8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f0:	431a      	orrs	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8007704:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007708:	4618      	mov	r0, r3
 800770a:	3730      	adds	r7, #48	@ 0x30
 800770c:	46bd      	mov	sp, r7
 800770e:	bdb0      	pop	{r4, r5, r7, pc}
 8007710:	004005ff 	.word	0x004005ff
 8007714:	017d7840 	.word	0x017d7840
 8007718:	55e63b89 	.word	0x55e63b89

0800771c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007724:	2300      	movs	r3, #0
 8007726:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007728:	f107 030c 	add.w	r3, r7, #12
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f962 	bl	80079f8 <SD_SendStatus>
 8007734:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d005      	beq.n	8007748 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	0a5b      	lsrs	r3, r3, #9
 800774c:	f003 030f 	and.w	r3, r3, #15
 8007750:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007752:	693b      	ldr	r3, [r7, #16]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3718      	adds	r7, #24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800775c:	b5b0      	push	{r4, r5, r7, lr}
 800775e:	b090      	sub	sp, #64	@ 0x40
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007764:	2301      	movs	r3, #1
 8007766:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4618      	mov	r0, r3
 800776e:	f001 f8d0 	bl	8008912 <SDMMC_GetPowerState>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d102      	bne.n	800777e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007778:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800777c:	e0aa      	b.n	80078d4 <SD_InitCard+0x178>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007782:	2b03      	cmp	r3, #3
 8007784:	d02f      	beq.n	80077e6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f001 fafa 	bl	8008d84 <SDMMC_CmdSendCID>
 8007790:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <SD_InitCard+0x40>
    {
      return errorstate;
 8007798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800779a:	e09b      	b.n	80078d4 <SD_InitCard+0x178>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2100      	movs	r1, #0
 80077a2:	4618      	mov	r0, r3
 80077a4:	f001 f8fa 	bl	800899c <SDMMC_GetResponse>
 80077a8:	4602      	mov	r2, r0
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2104      	movs	r1, #4
 80077b4:	4618      	mov	r0, r3
 80077b6:	f001 f8f1 	bl	800899c <SDMMC_GetResponse>
 80077ba:	4602      	mov	r2, r0
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2108      	movs	r1, #8
 80077c6:	4618      	mov	r0, r3
 80077c8:	f001 f8e8 	bl	800899c <SDMMC_GetResponse>
 80077cc:	4602      	mov	r2, r0
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	210c      	movs	r1, #12
 80077d8:	4618      	mov	r0, r3
 80077da:	f001 f8df 	bl	800899c <SDMMC_GetResponse>
 80077de:	4602      	mov	r2, r0
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d00d      	beq.n	800780a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f107 020e 	add.w	r2, r7, #14
 80077f6:	4611      	mov	r1, r2
 80077f8:	4618      	mov	r0, r3
 80077fa:	f001 fb00 	bl	8008dfe <SDMMC_CmdSetRelAdd>
 80077fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007802:	2b00      	cmp	r3, #0
 8007804:	d001      	beq.n	800780a <SD_InitCard+0xae>
    {
      return errorstate;
 8007806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007808:	e064      	b.n	80078d4 <SD_InitCard+0x178>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800780e:	2b03      	cmp	r3, #3
 8007810:	d036      	beq.n	8007880 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007812:	89fb      	ldrh	r3, [r7, #14]
 8007814:	461a      	mov	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007822:	041b      	lsls	r3, r3, #16
 8007824:	4619      	mov	r1, r3
 8007826:	4610      	mov	r0, r2
 8007828:	f001 faca 	bl	8008dc0 <SDMMC_CmdSendCSD>
 800782c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800782e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007836:	e04d      	b.n	80078d4 <SD_InitCard+0x178>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2100      	movs	r1, #0
 800783e:	4618      	mov	r0, r3
 8007840:	f001 f8ac 	bl	800899c <SDMMC_GetResponse>
 8007844:	4602      	mov	r2, r0
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2104      	movs	r1, #4
 8007850:	4618      	mov	r0, r3
 8007852:	f001 f8a3 	bl	800899c <SDMMC_GetResponse>
 8007856:	4602      	mov	r2, r0
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2108      	movs	r1, #8
 8007862:	4618      	mov	r0, r3
 8007864:	f001 f89a 	bl	800899c <SDMMC_GetResponse>
 8007868:	4602      	mov	r2, r0
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	210c      	movs	r1, #12
 8007874:	4618      	mov	r0, r3
 8007876:	f001 f891 	bl	800899c <SDMMC_GetResponse>
 800787a:	4602      	mov	r2, r0
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2104      	movs	r1, #4
 8007886:	4618      	mov	r0, r3
 8007888:	f001 f888 	bl	800899c <SDMMC_GetResponse>
 800788c:	4603      	mov	r3, r0
 800788e:	0d1a      	lsrs	r2, r3, #20
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007894:	f107 0310 	add.w	r3, r7, #16
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff fcb2 	bl	8007204 <HAL_SD_GetCardCSD>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d002      	beq.n	80078ac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078a6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80078aa:	e013      	b.n	80078d4 <SD_InitCard+0x178>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6819      	ldr	r1, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b4:	041b      	lsls	r3, r3, #16
 80078b6:	2200      	movs	r2, #0
 80078b8:	461c      	mov	r4, r3
 80078ba:	4615      	mov	r5, r2
 80078bc:	4622      	mov	r2, r4
 80078be:	462b      	mov	r3, r5
 80078c0:	4608      	mov	r0, r1
 80078c2:	f001 f977 	bl	8008bb4 <SDMMC_CmdSelDesel>
 80078c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80078c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <SD_InitCard+0x176>
  {
    return errorstate;
 80078ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078d0:	e000      	b.n	80078d4 <SD_InitCard+0x178>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3740      	adds	r7, #64	@ 0x40
 80078d8:	46bd      	mov	sp, r7
 80078da:	bdb0      	pop	{r4, r5, r7, pc}

080078dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80078e8:	2300      	movs	r3, #0
 80078ea:	617b      	str	r3, [r7, #20]
 80078ec:	2300      	movs	r3, #0
 80078ee:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f001 f980 	bl	8008bfa <SDMMC_CmdGoIdleState>
 80078fa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	e072      	b.n	80079ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4618      	mov	r0, r3
 800790c:	f001 f993 	bl	8008c36 <SDMMC_CmdOperCond>
 8007910:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00d      	beq.n	8007934 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4618      	mov	r0, r3
 8007924:	f001 f969 	bl	8008bfa <SDMMC_CmdGoIdleState>
 8007928:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d004      	beq.n	800793a <SD_PowerON+0x5e>
    {
      return errorstate;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	e05b      	b.n	80079ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800793e:	2b01      	cmp	r3, #1
 8007940:	d137      	bne.n	80079b2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2100      	movs	r1, #0
 8007948:	4618      	mov	r0, r3
 800794a:	f001 f993 	bl	8008c74 <SDMMC_CmdAppCommand>
 800794e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d02d      	beq.n	80079b2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007956:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800795a:	e047      	b.n	80079ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2100      	movs	r1, #0
 8007962:	4618      	mov	r0, r3
 8007964:	f001 f986 	bl	8008c74 <SDMMC_CmdAppCommand>
 8007968:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <SD_PowerON+0x98>
    {
      return errorstate;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	e03b      	b.n	80079ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	491e      	ldr	r1, [pc, #120]	@ (80079f4 <SD_PowerON+0x118>)
 800797a:	4618      	mov	r0, r3
 800797c:	f001 f99c 	bl	8008cb8 <SDMMC_CmdAppOperCommand>
 8007980:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d002      	beq.n	800798e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007988:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800798c:	e02e      	b.n	80079ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2100      	movs	r1, #0
 8007994:	4618      	mov	r0, r3
 8007996:	f001 f801 	bl	800899c <SDMMC_GetResponse>
 800799a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	0fdb      	lsrs	r3, r3, #31
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d101      	bne.n	80079a8 <SD_PowerON+0xcc>
 80079a4:	2301      	movs	r3, #1
 80079a6:	e000      	b.n	80079aa <SD_PowerON+0xce>
 80079a8:	2300      	movs	r3, #0
 80079aa:	613b      	str	r3, [r7, #16]

    count++;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	3301      	adds	r3, #1
 80079b0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d802      	bhi.n	80079c2 <SD_PowerON+0xe6>
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d0cc      	beq.n	800795c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d902      	bls.n	80079d2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80079cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80079d0:	e00c      	b.n	80079ec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	645a      	str	r2, [r3, #68]	@ 0x44
 80079e2:	e002      	b.n	80079ea <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	c1100000 	.word	0xc1100000

080079f8 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d102      	bne.n	8007a0e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007a08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a0c:	e018      	b.n	8007a40 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a16:	041b      	lsls	r3, r3, #16
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f001 fa10 	bl	8008e40 <SDMMC_CmdSendStatus>
 8007a20:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	e009      	b.n	8007a40 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2100      	movs	r1, #0
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 ffb2 	bl	800899c <SDMMC_GetResponse>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007a50:	2300      	movs	r3, #0
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	2300      	movs	r3, #0
 8007a56:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 ff9c 	bl	800899c <SDMMC_GetResponse>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a6e:	d102      	bne.n	8007a76 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007a74:	e02f      	b.n	8007ad6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007a76:	f107 030c 	add.w	r3, r7, #12
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f879 	bl	8007b74 <SD_FindSCR>
 8007a82:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	e023      	b.n	8007ad6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d01c      	beq.n	8007ad2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aa0:	041b      	lsls	r3, r3, #16
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	f001 f8e5 	bl	8008c74 <SDMMC_CmdAppCommand>
 8007aaa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	e00f      	b.n	8007ad6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2102      	movs	r1, #2
 8007abc:	4618      	mov	r0, r3
 8007abe:	f001 f91e 	bl	8008cfe <SDMMC_CmdBusWidth>
 8007ac2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	e003      	b.n	8007ad6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	e001      	b.n	8007ad6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007ad2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b086      	sub	sp, #24
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	2300      	movs	r3, #0
 8007aec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2100      	movs	r1, #0
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 ff51 	bl	800899c <SDMMC_GetResponse>
 8007afa:	4603      	mov	r3, r0
 8007afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b04:	d102      	bne.n	8007b0c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007b06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007b0a:	e02f      	b.n	8007b6c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007b0c:	f107 030c 	add.w	r3, r7, #12
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f82e 	bl	8007b74 <SD_FindSCR>
 8007b18:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	e023      	b.n	8007b6c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d01c      	beq.n	8007b68 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b36:	041b      	lsls	r3, r3, #16
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	f001 f89a 	bl	8008c74 <SDMMC_CmdAppCommand>
 8007b40:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	e00f      	b.n	8007b6c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2100      	movs	r1, #0
 8007b52:	4618      	mov	r0, r3
 8007b54:	f001 f8d3 	bl	8008cfe <SDMMC_CmdBusWidth>
 8007b58:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	e003      	b.n	8007b6c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007b64:	2300      	movs	r3, #0
 8007b66:	e001      	b.n	8007b6c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b68:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007b74:	b590      	push	{r4, r7, lr}
 8007b76:	b08f      	sub	sp, #60	@ 0x3c
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007b7e:	f7fb f8bd 	bl	8002cfc <HAL_GetTick>
 8007b82:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007b88:	2300      	movs	r3, #0
 8007b8a:	60bb      	str	r3, [r7, #8]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2108      	movs	r1, #8
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f000 ff3d 	bl	8008a1a <SDMMC_CmdBlockLength>
 8007ba0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <SD_FindSCR+0x38>
  {
    return errorstate;
 8007ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007baa:	e0a9      	b.n	8007d00 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bb4:	041b      	lsls	r3, r3, #16
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4610      	mov	r0, r2
 8007bba:	f001 f85b 	bl	8008c74 <SDMMC_CmdAppCommand>
 8007bbe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <SD_FindSCR+0x56>
  {
    return errorstate;
 8007bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc8:	e09a      	b.n	8007d00 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bca:	f04f 33ff 	mov.w	r3, #4294967295
 8007bce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007bd0:	2308      	movs	r3, #8
 8007bd2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007bd4:	2330      	movs	r3, #48	@ 0x30
 8007bd6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007bd8:	2302      	movs	r3, #2
 8007bda:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007be0:	2301      	movs	r3, #1
 8007be2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f107 0210 	add.w	r2, r7, #16
 8007bec:	4611      	mov	r1, r2
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fee7 	bl	80089c2 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f001 f8a2 	bl	8008d42 <SDMMC_CmdSendSCR>
 8007bfe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d022      	beq.n	8007c4c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8007c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c08:	e07a      	b.n	8007d00 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00e      	beq.n	8007c36 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6819      	ldr	r1, [r3, #0]
 8007c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	f107 0208 	add.w	r2, r7, #8
 8007c24:	18d4      	adds	r4, r2, r3
 8007c26:	4608      	mov	r0, r1
 8007c28:	f000 fe46 	bl	80088b8 <SDMMC_ReadFIFO>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	6023      	str	r3, [r4, #0]
      index++;
 8007c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c32:	3301      	adds	r3, #1
 8007c34:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c36:	f7fb f861 	bl	8002cfc <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c44:	d102      	bne.n	8007c4c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007c46:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007c4a:	e059      	b.n	8007d00 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c52:	f240 432a 	movw	r3, #1066	@ 0x42a
 8007c56:	4013      	ands	r3, r2
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d0d6      	beq.n	8007c0a <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c62:	f003 0308 	and.w	r3, r3, #8
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d005      	beq.n	8007c76 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2208      	movs	r2, #8
 8007c70:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007c72:	2308      	movs	r3, #8
 8007c74:	e044      	b.n	8007d00 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c7c:	f003 0302 	and.w	r3, r3, #2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e037      	b.n	8007d00 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c96:	f003 0320 	and.w	r3, r3, #32
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d005      	beq.n	8007caa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007ca6:	2320      	movs	r3, #32
 8007ca8:	e02a      	b.n	8007d00 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007cb2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	061a      	lsls	r2, r3, #24
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	021b      	lsls	r3, r3, #8
 8007cbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007cc0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	0a1b      	lsrs	r3, r3, #8
 8007cc6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	0e1b      	lsrs	r3, r3, #24
 8007cd0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd4:	601a      	str	r2, [r3, #0]
    scr++;
 8007cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd8:	3304      	adds	r3, #4
 8007cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	061a      	lsls	r2, r3, #24
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	021b      	lsls	r3, r3, #8
 8007ce4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ce8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	0a1b      	lsrs	r3, r3, #8
 8007cee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cf2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	0e1b      	lsrs	r3, r3, #24
 8007cf8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cfc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	373c      	adds	r7, #60	@ 0x3c
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd90      	pop	{r4, r7, pc}

08007d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e040      	b.n	8007d9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d106      	bne.n	8007d30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7fa fdde 	bl	80028ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2224      	movs	r2, #36	@ 0x24
 8007d34:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 0201 	bic.w	r2, r2, #1
 8007d44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d002      	beq.n	8007d54 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fb6a 	bl	8008428 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f8af 	bl	8007eb8 <UART_SetConfig>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d101      	bne.n	8007d64 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e01b      	b.n	8007d9c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689a      	ldr	r2, [r3, #8]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f042 0201 	orr.w	r2, r2, #1
 8007d92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fbe9 	bl	800856c <UART_CheckIdleState>
 8007d9a:	4603      	mov	r3, r0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	@ 0x28
 8007da8:	af02      	add	r7, sp, #8
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	603b      	str	r3, [r7, #0]
 8007db0:	4613      	mov	r3, r2
 8007db2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007db8:	2b20      	cmp	r3, #32
 8007dba:	d177      	bne.n	8007eac <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d002      	beq.n	8007dc8 <HAL_UART_Transmit+0x24>
 8007dc2:	88fb      	ldrh	r3, [r7, #6]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e070      	b.n	8007eae <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2221      	movs	r2, #33	@ 0x21
 8007dd8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007dda:	f7fa ff8f 	bl	8002cfc <HAL_GetTick>
 8007dde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	88fa      	ldrh	r2, [r7, #6]
 8007de4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	88fa      	ldrh	r2, [r7, #6]
 8007dec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007df8:	d108      	bne.n	8007e0c <HAL_UART_Transmit+0x68>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d104      	bne.n	8007e0c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007e02:	2300      	movs	r3, #0
 8007e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	61bb      	str	r3, [r7, #24]
 8007e0a:	e003      	b.n	8007e14 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e10:	2300      	movs	r3, #0
 8007e12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e14:	e02f      	b.n	8007e76 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	2180      	movs	r1, #128	@ 0x80
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f000 fc4b 	bl	80086bc <UART_WaitOnFlagUntilTimeout>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d004      	beq.n	8007e36 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2220      	movs	r2, #32
 8007e30:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e03b      	b.n	8007eae <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10b      	bne.n	8007e54 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	881a      	ldrh	r2, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e48:	b292      	uxth	r2, r2
 8007e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	3302      	adds	r3, #2
 8007e50:	61bb      	str	r3, [r7, #24]
 8007e52:	e007      	b.n	8007e64 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	781a      	ldrb	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	3301      	adds	r3, #1
 8007e62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1c9      	bne.n	8007e16 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2140      	movs	r1, #64	@ 0x40
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 fc15 	bl	80086bc <UART_WaitOnFlagUntilTimeout>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d004      	beq.n	8007ea2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e005      	b.n	8007eae <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	e000      	b.n	8007eae <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007eac:	2302      	movs	r3, #2
  }
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3720      	adds	r7, #32
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
	...

08007eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ebc:	b08a      	sub	sp, #40	@ 0x28
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	689a      	ldr	r2, [r3, #8]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	431a      	orrs	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	4ba4      	ldr	r3, [pc, #656]	@ (8008178 <UART_SetConfig+0x2c0>)
 8007ee8:	4013      	ands	r3, r2
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	6812      	ldr	r2, [r2, #0]
 8007eee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a99      	ldr	r2, [pc, #612]	@ (800817c <UART_SetConfig+0x2c4>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d004      	beq.n	8007f24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f20:	4313      	orrs	r3, r2
 8007f22:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f34:	430a      	orrs	r2, r1
 8007f36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a90      	ldr	r2, [pc, #576]	@ (8008180 <UART_SetConfig+0x2c8>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d126      	bne.n	8007f90 <UART_SetConfig+0xd8>
 8007f42:	4b90      	ldr	r3, [pc, #576]	@ (8008184 <UART_SetConfig+0x2cc>)
 8007f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f48:	f003 0303 	and.w	r3, r3, #3
 8007f4c:	2b03      	cmp	r3, #3
 8007f4e:	d81b      	bhi.n	8007f88 <UART_SetConfig+0xd0>
 8007f50:	a201      	add	r2, pc, #4	@ (adr r2, 8007f58 <UART_SetConfig+0xa0>)
 8007f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f56:	bf00      	nop
 8007f58:	08007f69 	.word	0x08007f69
 8007f5c:	08007f79 	.word	0x08007f79
 8007f60:	08007f71 	.word	0x08007f71
 8007f64:	08007f81 	.word	0x08007f81
 8007f68:	2301      	movs	r3, #1
 8007f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f6e:	e116      	b.n	800819e <UART_SetConfig+0x2e6>
 8007f70:	2302      	movs	r3, #2
 8007f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f76:	e112      	b.n	800819e <UART_SetConfig+0x2e6>
 8007f78:	2304      	movs	r3, #4
 8007f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f7e:	e10e      	b.n	800819e <UART_SetConfig+0x2e6>
 8007f80:	2308      	movs	r3, #8
 8007f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f86:	e10a      	b.n	800819e <UART_SetConfig+0x2e6>
 8007f88:	2310      	movs	r3, #16
 8007f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f8e:	e106      	b.n	800819e <UART_SetConfig+0x2e6>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a7c      	ldr	r2, [pc, #496]	@ (8008188 <UART_SetConfig+0x2d0>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d138      	bne.n	800800c <UART_SetConfig+0x154>
 8007f9a:	4b7a      	ldr	r3, [pc, #488]	@ (8008184 <UART_SetConfig+0x2cc>)
 8007f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fa0:	f003 030c 	and.w	r3, r3, #12
 8007fa4:	2b0c      	cmp	r3, #12
 8007fa6:	d82d      	bhi.n	8008004 <UART_SetConfig+0x14c>
 8007fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb0 <UART_SetConfig+0xf8>)
 8007faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fae:	bf00      	nop
 8007fb0:	08007fe5 	.word	0x08007fe5
 8007fb4:	08008005 	.word	0x08008005
 8007fb8:	08008005 	.word	0x08008005
 8007fbc:	08008005 	.word	0x08008005
 8007fc0:	08007ff5 	.word	0x08007ff5
 8007fc4:	08008005 	.word	0x08008005
 8007fc8:	08008005 	.word	0x08008005
 8007fcc:	08008005 	.word	0x08008005
 8007fd0:	08007fed 	.word	0x08007fed
 8007fd4:	08008005 	.word	0x08008005
 8007fd8:	08008005 	.word	0x08008005
 8007fdc:	08008005 	.word	0x08008005
 8007fe0:	08007ffd 	.word	0x08007ffd
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fea:	e0d8      	b.n	800819e <UART_SetConfig+0x2e6>
 8007fec:	2302      	movs	r3, #2
 8007fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ff2:	e0d4      	b.n	800819e <UART_SetConfig+0x2e6>
 8007ff4:	2304      	movs	r3, #4
 8007ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ffa:	e0d0      	b.n	800819e <UART_SetConfig+0x2e6>
 8007ffc:	2308      	movs	r3, #8
 8007ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008002:	e0cc      	b.n	800819e <UART_SetConfig+0x2e6>
 8008004:	2310      	movs	r3, #16
 8008006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800800a:	e0c8      	b.n	800819e <UART_SetConfig+0x2e6>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a5e      	ldr	r2, [pc, #376]	@ (800818c <UART_SetConfig+0x2d4>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d125      	bne.n	8008062 <UART_SetConfig+0x1aa>
 8008016:	4b5b      	ldr	r3, [pc, #364]	@ (8008184 <UART_SetConfig+0x2cc>)
 8008018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800801c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008020:	2b30      	cmp	r3, #48	@ 0x30
 8008022:	d016      	beq.n	8008052 <UART_SetConfig+0x19a>
 8008024:	2b30      	cmp	r3, #48	@ 0x30
 8008026:	d818      	bhi.n	800805a <UART_SetConfig+0x1a2>
 8008028:	2b20      	cmp	r3, #32
 800802a:	d00a      	beq.n	8008042 <UART_SetConfig+0x18a>
 800802c:	2b20      	cmp	r3, #32
 800802e:	d814      	bhi.n	800805a <UART_SetConfig+0x1a2>
 8008030:	2b00      	cmp	r3, #0
 8008032:	d002      	beq.n	800803a <UART_SetConfig+0x182>
 8008034:	2b10      	cmp	r3, #16
 8008036:	d008      	beq.n	800804a <UART_SetConfig+0x192>
 8008038:	e00f      	b.n	800805a <UART_SetConfig+0x1a2>
 800803a:	2300      	movs	r3, #0
 800803c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008040:	e0ad      	b.n	800819e <UART_SetConfig+0x2e6>
 8008042:	2302      	movs	r3, #2
 8008044:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008048:	e0a9      	b.n	800819e <UART_SetConfig+0x2e6>
 800804a:	2304      	movs	r3, #4
 800804c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008050:	e0a5      	b.n	800819e <UART_SetConfig+0x2e6>
 8008052:	2308      	movs	r3, #8
 8008054:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008058:	e0a1      	b.n	800819e <UART_SetConfig+0x2e6>
 800805a:	2310      	movs	r3, #16
 800805c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008060:	e09d      	b.n	800819e <UART_SetConfig+0x2e6>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a4a      	ldr	r2, [pc, #296]	@ (8008190 <UART_SetConfig+0x2d8>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d125      	bne.n	80080b8 <UART_SetConfig+0x200>
 800806c:	4b45      	ldr	r3, [pc, #276]	@ (8008184 <UART_SetConfig+0x2cc>)
 800806e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008072:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008076:	2bc0      	cmp	r3, #192	@ 0xc0
 8008078:	d016      	beq.n	80080a8 <UART_SetConfig+0x1f0>
 800807a:	2bc0      	cmp	r3, #192	@ 0xc0
 800807c:	d818      	bhi.n	80080b0 <UART_SetConfig+0x1f8>
 800807e:	2b80      	cmp	r3, #128	@ 0x80
 8008080:	d00a      	beq.n	8008098 <UART_SetConfig+0x1e0>
 8008082:	2b80      	cmp	r3, #128	@ 0x80
 8008084:	d814      	bhi.n	80080b0 <UART_SetConfig+0x1f8>
 8008086:	2b00      	cmp	r3, #0
 8008088:	d002      	beq.n	8008090 <UART_SetConfig+0x1d8>
 800808a:	2b40      	cmp	r3, #64	@ 0x40
 800808c:	d008      	beq.n	80080a0 <UART_SetConfig+0x1e8>
 800808e:	e00f      	b.n	80080b0 <UART_SetConfig+0x1f8>
 8008090:	2300      	movs	r3, #0
 8008092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008096:	e082      	b.n	800819e <UART_SetConfig+0x2e6>
 8008098:	2302      	movs	r3, #2
 800809a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800809e:	e07e      	b.n	800819e <UART_SetConfig+0x2e6>
 80080a0:	2304      	movs	r3, #4
 80080a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080a6:	e07a      	b.n	800819e <UART_SetConfig+0x2e6>
 80080a8:	2308      	movs	r3, #8
 80080aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080ae:	e076      	b.n	800819e <UART_SetConfig+0x2e6>
 80080b0:	2310      	movs	r3, #16
 80080b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080b6:	e072      	b.n	800819e <UART_SetConfig+0x2e6>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a35      	ldr	r2, [pc, #212]	@ (8008194 <UART_SetConfig+0x2dc>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d12a      	bne.n	8008118 <UART_SetConfig+0x260>
 80080c2:	4b30      	ldr	r3, [pc, #192]	@ (8008184 <UART_SetConfig+0x2cc>)
 80080c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080d0:	d01a      	beq.n	8008108 <UART_SetConfig+0x250>
 80080d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080d6:	d81b      	bhi.n	8008110 <UART_SetConfig+0x258>
 80080d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080dc:	d00c      	beq.n	80080f8 <UART_SetConfig+0x240>
 80080de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080e2:	d815      	bhi.n	8008110 <UART_SetConfig+0x258>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d003      	beq.n	80080f0 <UART_SetConfig+0x238>
 80080e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ec:	d008      	beq.n	8008100 <UART_SetConfig+0x248>
 80080ee:	e00f      	b.n	8008110 <UART_SetConfig+0x258>
 80080f0:	2300      	movs	r3, #0
 80080f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080f6:	e052      	b.n	800819e <UART_SetConfig+0x2e6>
 80080f8:	2302      	movs	r3, #2
 80080fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080fe:	e04e      	b.n	800819e <UART_SetConfig+0x2e6>
 8008100:	2304      	movs	r3, #4
 8008102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008106:	e04a      	b.n	800819e <UART_SetConfig+0x2e6>
 8008108:	2308      	movs	r3, #8
 800810a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800810e:	e046      	b.n	800819e <UART_SetConfig+0x2e6>
 8008110:	2310      	movs	r3, #16
 8008112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008116:	e042      	b.n	800819e <UART_SetConfig+0x2e6>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a17      	ldr	r2, [pc, #92]	@ (800817c <UART_SetConfig+0x2c4>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d13a      	bne.n	8008198 <UART_SetConfig+0x2e0>
 8008122:	4b18      	ldr	r3, [pc, #96]	@ (8008184 <UART_SetConfig+0x2cc>)
 8008124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008128:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800812c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008130:	d01a      	beq.n	8008168 <UART_SetConfig+0x2b0>
 8008132:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008136:	d81b      	bhi.n	8008170 <UART_SetConfig+0x2b8>
 8008138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800813c:	d00c      	beq.n	8008158 <UART_SetConfig+0x2a0>
 800813e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008142:	d815      	bhi.n	8008170 <UART_SetConfig+0x2b8>
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <UART_SetConfig+0x298>
 8008148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800814c:	d008      	beq.n	8008160 <UART_SetConfig+0x2a8>
 800814e:	e00f      	b.n	8008170 <UART_SetConfig+0x2b8>
 8008150:	2300      	movs	r3, #0
 8008152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008156:	e022      	b.n	800819e <UART_SetConfig+0x2e6>
 8008158:	2302      	movs	r3, #2
 800815a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800815e:	e01e      	b.n	800819e <UART_SetConfig+0x2e6>
 8008160:	2304      	movs	r3, #4
 8008162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008166:	e01a      	b.n	800819e <UART_SetConfig+0x2e6>
 8008168:	2308      	movs	r3, #8
 800816a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800816e:	e016      	b.n	800819e <UART_SetConfig+0x2e6>
 8008170:	2310      	movs	r3, #16
 8008172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008176:	e012      	b.n	800819e <UART_SetConfig+0x2e6>
 8008178:	efff69f3 	.word	0xefff69f3
 800817c:	40008000 	.word	0x40008000
 8008180:	40013800 	.word	0x40013800
 8008184:	40021000 	.word	0x40021000
 8008188:	40004400 	.word	0x40004400
 800818c:	40004800 	.word	0x40004800
 8008190:	40004c00 	.word	0x40004c00
 8008194:	40005000 	.word	0x40005000
 8008198:	2310      	movs	r3, #16
 800819a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a9f      	ldr	r2, [pc, #636]	@ (8008420 <UART_SetConfig+0x568>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d17a      	bne.n	800829e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80081ac:	2b08      	cmp	r3, #8
 80081ae:	d824      	bhi.n	80081fa <UART_SetConfig+0x342>
 80081b0:	a201      	add	r2, pc, #4	@ (adr r2, 80081b8 <UART_SetConfig+0x300>)
 80081b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b6:	bf00      	nop
 80081b8:	080081dd 	.word	0x080081dd
 80081bc:	080081fb 	.word	0x080081fb
 80081c0:	080081e5 	.word	0x080081e5
 80081c4:	080081fb 	.word	0x080081fb
 80081c8:	080081eb 	.word	0x080081eb
 80081cc:	080081fb 	.word	0x080081fb
 80081d0:	080081fb 	.word	0x080081fb
 80081d4:	080081fb 	.word	0x080081fb
 80081d8:	080081f3 	.word	0x080081f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081dc:	f7fc fd1c 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 80081e0:	61f8      	str	r0, [r7, #28]
        break;
 80081e2:	e010      	b.n	8008206 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081e4:	4b8f      	ldr	r3, [pc, #572]	@ (8008424 <UART_SetConfig+0x56c>)
 80081e6:	61fb      	str	r3, [r7, #28]
        break;
 80081e8:	e00d      	b.n	8008206 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081ea:	f7fc fc7d 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 80081ee:	61f8      	str	r0, [r7, #28]
        break;
 80081f0:	e009      	b.n	8008206 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081f6:	61fb      	str	r3, [r7, #28]
        break;
 80081f8:	e005      	b.n	8008206 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008204:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 80fb 	beq.w	8008404 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	685a      	ldr	r2, [r3, #4]
 8008212:	4613      	mov	r3, r2
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	4413      	add	r3, r2
 8008218:	69fa      	ldr	r2, [r7, #28]
 800821a:	429a      	cmp	r2, r3
 800821c:	d305      	bcc.n	800822a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008224:	69fa      	ldr	r2, [r7, #28]
 8008226:	429a      	cmp	r2, r3
 8008228:	d903      	bls.n	8008232 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008230:	e0e8      	b.n	8008404 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	2200      	movs	r2, #0
 8008236:	461c      	mov	r4, r3
 8008238:	4615      	mov	r5, r2
 800823a:	f04f 0200 	mov.w	r2, #0
 800823e:	f04f 0300 	mov.w	r3, #0
 8008242:	022b      	lsls	r3, r5, #8
 8008244:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008248:	0222      	lsls	r2, r4, #8
 800824a:	68f9      	ldr	r1, [r7, #12]
 800824c:	6849      	ldr	r1, [r1, #4]
 800824e:	0849      	lsrs	r1, r1, #1
 8008250:	2000      	movs	r0, #0
 8008252:	4688      	mov	r8, r1
 8008254:	4681      	mov	r9, r0
 8008256:	eb12 0a08 	adds.w	sl, r2, r8
 800825a:	eb43 0b09 	adc.w	fp, r3, r9
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	603b      	str	r3, [r7, #0]
 8008266:	607a      	str	r2, [r7, #4]
 8008268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800826c:	4650      	mov	r0, sl
 800826e:	4659      	mov	r1, fp
 8008270:	f7f8 fd5a 	bl	8000d28 <__aeabi_uldivmod>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4613      	mov	r3, r2
 800827a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008282:	d308      	bcc.n	8008296 <UART_SetConfig+0x3de>
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800828a:	d204      	bcs.n	8008296 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	69ba      	ldr	r2, [r7, #24]
 8008292:	60da      	str	r2, [r3, #12]
 8008294:	e0b6      	b.n	8008404 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800829c:	e0b2      	b.n	8008404 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	69db      	ldr	r3, [r3, #28]
 80082a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082a6:	d15e      	bne.n	8008366 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80082a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80082ac:	2b08      	cmp	r3, #8
 80082ae:	d828      	bhi.n	8008302 <UART_SetConfig+0x44a>
 80082b0:	a201      	add	r2, pc, #4	@ (adr r2, 80082b8 <UART_SetConfig+0x400>)
 80082b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b6:	bf00      	nop
 80082b8:	080082dd 	.word	0x080082dd
 80082bc:	080082e5 	.word	0x080082e5
 80082c0:	080082ed 	.word	0x080082ed
 80082c4:	08008303 	.word	0x08008303
 80082c8:	080082f3 	.word	0x080082f3
 80082cc:	08008303 	.word	0x08008303
 80082d0:	08008303 	.word	0x08008303
 80082d4:	08008303 	.word	0x08008303
 80082d8:	080082fb 	.word	0x080082fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082dc:	f7fc fc9c 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 80082e0:	61f8      	str	r0, [r7, #28]
        break;
 80082e2:	e014      	b.n	800830e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082e4:	f7fc fcae 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 80082e8:	61f8      	str	r0, [r7, #28]
        break;
 80082ea:	e010      	b.n	800830e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082ec:	4b4d      	ldr	r3, [pc, #308]	@ (8008424 <UART_SetConfig+0x56c>)
 80082ee:	61fb      	str	r3, [r7, #28]
        break;
 80082f0:	e00d      	b.n	800830e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082f2:	f7fc fbf9 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 80082f6:	61f8      	str	r0, [r7, #28]
        break;
 80082f8:	e009      	b.n	800830e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082fe:	61fb      	str	r3, [r7, #28]
        break;
 8008300:	e005      	b.n	800830e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800830c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d077      	beq.n	8008404 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	005a      	lsls	r2, r3, #1
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	085b      	lsrs	r3, r3, #1
 800831e:	441a      	add	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	fbb2 f3f3 	udiv	r3, r2, r3
 8008328:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	2b0f      	cmp	r3, #15
 800832e:	d916      	bls.n	800835e <UART_SetConfig+0x4a6>
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008336:	d212      	bcs.n	800835e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	b29b      	uxth	r3, r3
 800833c:	f023 030f 	bic.w	r3, r3, #15
 8008340:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	085b      	lsrs	r3, r3, #1
 8008346:	b29b      	uxth	r3, r3
 8008348:	f003 0307 	and.w	r3, r3, #7
 800834c:	b29a      	uxth	r2, r3
 800834e:	8afb      	ldrh	r3, [r7, #22]
 8008350:	4313      	orrs	r3, r2
 8008352:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	8afa      	ldrh	r2, [r7, #22]
 800835a:	60da      	str	r2, [r3, #12]
 800835c:	e052      	b.n	8008404 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008364:	e04e      	b.n	8008404 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008366:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800836a:	2b08      	cmp	r3, #8
 800836c:	d827      	bhi.n	80083be <UART_SetConfig+0x506>
 800836e:	a201      	add	r2, pc, #4	@ (adr r2, 8008374 <UART_SetConfig+0x4bc>)
 8008370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008374:	08008399 	.word	0x08008399
 8008378:	080083a1 	.word	0x080083a1
 800837c:	080083a9 	.word	0x080083a9
 8008380:	080083bf 	.word	0x080083bf
 8008384:	080083af 	.word	0x080083af
 8008388:	080083bf 	.word	0x080083bf
 800838c:	080083bf 	.word	0x080083bf
 8008390:	080083bf 	.word	0x080083bf
 8008394:	080083b7 	.word	0x080083b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008398:	f7fc fc3e 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 800839c:	61f8      	str	r0, [r7, #28]
        break;
 800839e:	e014      	b.n	80083ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083a0:	f7fc fc50 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 80083a4:	61f8      	str	r0, [r7, #28]
        break;
 80083a6:	e010      	b.n	80083ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083a8:	4b1e      	ldr	r3, [pc, #120]	@ (8008424 <UART_SetConfig+0x56c>)
 80083aa:	61fb      	str	r3, [r7, #28]
        break;
 80083ac:	e00d      	b.n	80083ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083ae:	f7fc fb9b 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 80083b2:	61f8      	str	r0, [r7, #28]
        break;
 80083b4:	e009      	b.n	80083ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083ba:	61fb      	str	r3, [r7, #28]
        break;
 80083bc:	e005      	b.n	80083ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80083be:	2300      	movs	r3, #0
 80083c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80083c8:	bf00      	nop
    }

    if (pclk != 0U)
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d019      	beq.n	8008404 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	085a      	lsrs	r2, r3, #1
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	441a      	add	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	2b0f      	cmp	r3, #15
 80083e8:	d909      	bls.n	80083fe <UART_SetConfig+0x546>
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083f0:	d205      	bcs.n	80083fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	60da      	str	r2, [r3, #12]
 80083fc:	e002      	b.n	8008404 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008410:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008414:	4618      	mov	r0, r3
 8008416:	3728      	adds	r7, #40	@ 0x28
 8008418:	46bd      	mov	sp, r7
 800841a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800841e:	bf00      	nop
 8008420:	40008000 	.word	0x40008000
 8008424:	00f42400 	.word	0x00f42400

08008428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008434:	f003 0308 	and.w	r3, r3, #8
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00a      	beq.n	8008452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00a      	beq.n	8008474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	430a      	orrs	r2, r1
 8008472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008478:	f003 0302 	and.w	r3, r3, #2
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00a      	beq.n	8008496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	430a      	orrs	r2, r1
 8008494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800849a:	f003 0304 	and.w	r3, r3, #4
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00a      	beq.n	80084b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	430a      	orrs	r2, r1
 80084b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084bc:	f003 0310 	and.w	r3, r3, #16
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00a      	beq.n	80084da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	430a      	orrs	r2, r1
 80084d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084de:	f003 0320 	and.w	r3, r3, #32
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00a      	beq.n	80084fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	430a      	orrs	r2, r1
 80084fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008504:	2b00      	cmp	r3, #0
 8008506:	d01a      	beq.n	800853e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008526:	d10a      	bne.n	800853e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	430a      	orrs	r2, r1
 800853c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	430a      	orrs	r2, r1
 800855e:	605a      	str	r2, [r3, #4]
  }
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b098      	sub	sp, #96	@ 0x60
 8008570:	af02      	add	r7, sp, #8
 8008572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800857c:	f7fa fbbe 	bl	8002cfc <HAL_GetTick>
 8008580:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0308 	and.w	r3, r3, #8
 800858c:	2b08      	cmp	r3, #8
 800858e:	d12e      	bne.n	80085ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008590:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008598:	2200      	movs	r2, #0
 800859a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f88c 	bl	80086bc <UART_WaitOnFlagUntilTimeout>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d021      	beq.n	80085ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b2:	e853 3f00 	ldrex	r3, [r3]
 80085b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085be:	653b      	str	r3, [r7, #80]	@ 0x50
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80085ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085d0:	e841 2300 	strex	r3, r2, [r1]
 80085d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e6      	bne.n	80085aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2220      	movs	r2, #32
 80085e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e062      	b.n	80086b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0304 	and.w	r3, r3, #4
 80085f8:	2b04      	cmp	r3, #4
 80085fa:	d149      	bne.n	8008690 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008604:	2200      	movs	r2, #0
 8008606:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f856 	bl	80086bc <UART_WaitOnFlagUntilTimeout>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d03c      	beq.n	8008690 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861e:	e853 3f00 	ldrex	r3, [r3]
 8008622:	623b      	str	r3, [r7, #32]
   return(result);
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800862a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	461a      	mov	r2, r3
 8008632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008634:	633b      	str	r3, [r7, #48]	@ 0x30
 8008636:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008638:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800863a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800863c:	e841 2300 	strex	r3, r2, [r1]
 8008640:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1e6      	bne.n	8008616 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3308      	adds	r3, #8
 800864e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	e853 3f00 	ldrex	r3, [r3]
 8008656:	60fb      	str	r3, [r7, #12]
   return(result);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 0301 	bic.w	r3, r3, #1
 800865e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3308      	adds	r3, #8
 8008666:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008668:	61fa      	str	r2, [r7, #28]
 800866a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866c:	69b9      	ldr	r1, [r7, #24]
 800866e:	69fa      	ldr	r2, [r7, #28]
 8008670:	e841 2300 	strex	r3, r2, [r1]
 8008674:	617b      	str	r3, [r7, #20]
   return(result);
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1e5      	bne.n	8008648 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2220      	movs	r2, #32
 8008680:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	e011      	b.n	80086b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2220      	movs	r2, #32
 8008694:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2220      	movs	r2, #32
 800869a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3758      	adds	r7, #88	@ 0x58
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	4613      	mov	r3, r2
 80086ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086cc:	e04f      	b.n	800876e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d4:	d04b      	beq.n	800876e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086d6:	f7fa fb11 	bl	8002cfc <HAL_GetTick>
 80086da:	4602      	mov	r2, r0
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d302      	bcc.n	80086ec <UART_WaitOnFlagUntilTimeout+0x30>
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e04e      	b.n	800878e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0304 	and.w	r3, r3, #4
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d037      	beq.n	800876e <UART_WaitOnFlagUntilTimeout+0xb2>
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2b80      	cmp	r3, #128	@ 0x80
 8008702:	d034      	beq.n	800876e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2b40      	cmp	r3, #64	@ 0x40
 8008708:	d031      	beq.n	800876e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	69db      	ldr	r3, [r3, #28]
 8008710:	f003 0308 	and.w	r3, r3, #8
 8008714:	2b08      	cmp	r3, #8
 8008716:	d110      	bne.n	800873a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2208      	movs	r2, #8
 800871e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f000 f838 	bl	8008796 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2208      	movs	r2, #8
 800872a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e029      	b.n	800878e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	69db      	ldr	r3, [r3, #28]
 8008740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008748:	d111      	bne.n	800876e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008752:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 f81e 	bl	8008796 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2220      	movs	r2, #32
 800875e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800876a:	2303      	movs	r3, #3
 800876c:	e00f      	b.n	800878e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	69da      	ldr	r2, [r3, #28]
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	4013      	ands	r3, r2
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	429a      	cmp	r2, r3
 800877c:	bf0c      	ite	eq
 800877e:	2301      	moveq	r3, #1
 8008780:	2300      	movne	r3, #0
 8008782:	b2db      	uxtb	r3, r3
 8008784:	461a      	mov	r2, r3
 8008786:	79fb      	ldrb	r3, [r7, #7]
 8008788:	429a      	cmp	r2, r3
 800878a:	d0a0      	beq.n	80086ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008796:	b480      	push	{r7}
 8008798:	b095      	sub	sp, #84	@ 0x54
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087a6:	e853 3f00 	ldrex	r3, [r3]
 80087aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	461a      	mov	r2, r3
 80087ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80087be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e6      	bne.n	800879e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3308      	adds	r3, #8
 80087d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d8:	6a3b      	ldr	r3, [r7, #32]
 80087da:	e853 3f00 	ldrex	r3, [r3]
 80087de:	61fb      	str	r3, [r7, #28]
   return(result);
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	f023 0301 	bic.w	r3, r3, #1
 80087e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3308      	adds	r3, #8
 80087ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087f8:	e841 2300 	strex	r3, r2, [r1]
 80087fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1e5      	bne.n	80087d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008808:	2b01      	cmp	r3, #1
 800880a:	d118      	bne.n	800883e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	60bb      	str	r3, [r7, #8]
   return(result);
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	f023 0310 	bic.w	r3, r3, #16
 8008820:	647b      	str	r3, [r7, #68]	@ 0x44
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	461a      	mov	r2, r3
 8008828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800882a:	61bb      	str	r3, [r7, #24]
 800882c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882e:	6979      	ldr	r1, [r7, #20]
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	e841 2300 	strex	r3, r2, [r1]
 8008836:	613b      	str	r3, [r7, #16]
   return(result);
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1e6      	bne.n	800880c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2220      	movs	r2, #32
 8008842:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008852:	bf00      	nop
 8008854:	3754      	adds	r7, #84	@ 0x54
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800885e:	b084      	sub	sp, #16
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	f107 001c 	add.w	r0, r7, #28
 800886c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	4313      	orrs	r3, r2
 800887a:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800887c:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800887e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  tmpreg |= (Init.ClockEdge           |\
 8008880:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8008884:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8008888:	431a      	orrs	r2, r3
             Init.ClockDiv
 800888a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800888c:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	4313      	orrs	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800889c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	431a      	orrs	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3714      	adds	r7, #20
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	b004      	add	sp, #16
 80088b6:	4770      	bx	lr

080088b8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b083      	sub	sp, #12
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2203      	movs	r2, #3
 8008900:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008902:	2002      	movs	r0, #2
 8008904:	f7fa fa06 	bl	8002d14 <HAL_Delay>

  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008912:	b480      	push	{r7}
 8008914:	b083      	sub	sp, #12
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0303 	and.w	r3, r3, #3
}
 8008922:	4618      	mov	r0, r3
 8008924:	370c      	adds	r7, #12
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800892e:	b480      	push	{r7}
 8008930:	b085      	sub	sp, #20
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008938:	2300      	movs	r3, #0
 800893a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800894c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008952:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008958:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	4313      	orrs	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008968:	f023 030f 	bic.w	r3, r3, #15
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	431a      	orrs	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008982:	b480      	push	{r7}
 8008984:	b083      	sub	sp, #12
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	b2db      	uxtb	r3, r3
}
 8008990:	4618      	mov	r0, r3
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	3314      	adds	r3, #20
 80089aa:	461a      	mov	r2, r3
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	4413      	add	r3, r2
 80089b0:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b085      	sub	sp, #20
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80089e8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80089ee:	431a      	orrs	r2, r3
                       Data->DPSM);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80089f4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a00:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	431a      	orrs	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0

}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b088      	sub	sp, #32
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008a28:	2310      	movs	r3, #16
 8008a2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a2c:	2340      	movs	r3, #64	@ 0x40
 8008a2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a30:	2300      	movs	r3, #0
 8008a32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a3a:	f107 0308 	add.w	r3, r7, #8
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff ff74 	bl	800892e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a4a:	2110      	movs	r1, #16
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fa19 	bl	8008e84 <SDMMC_GetCmdResp1>
 8008a52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a54:	69fb      	ldr	r3, [r7, #28]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3720      	adds	r7, #32
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b088      	sub	sp, #32
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008a6c:	2311      	movs	r3, #17
 8008a6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a70:	2340      	movs	r3, #64	@ 0x40
 8008a72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a74:	2300      	movs	r3, #0
 8008a76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a7e:	f107 0308 	add.w	r3, r7, #8
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7ff ff52 	bl	800892e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a8e:	2111      	movs	r1, #17
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f9f7 	bl	8008e84 <SDMMC_GetCmdResp1>
 8008a96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a98:	69fb      	ldr	r3, [r7, #28]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3720      	adds	r7, #32
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b088      	sub	sp, #32
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008ab0:	2312      	movs	r3, #18
 8008ab2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ab4:	2340      	movs	r3, #64	@ 0x40
 8008ab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008abc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ac0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ac2:	f107 0308 	add.w	r3, r7, #8
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f7ff ff30 	bl	800892e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ad2:	2112      	movs	r1, #18
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f9d5 	bl	8008e84 <SDMMC_GetCmdResp1>
 8008ada:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008adc:	69fb      	ldr	r3, [r7, #28]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3720      	adds	r7, #32
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b088      	sub	sp, #32
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008af4:	2318      	movs	r3, #24
 8008af6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008af8:	2340      	movs	r3, #64	@ 0x40
 8008afa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008afc:	2300      	movs	r3, #0
 8008afe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b06:	f107 0308 	add.w	r3, r7, #8
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7ff ff0e 	bl	800892e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b16:	2118      	movs	r1, #24
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f9b3 	bl	8008e84 <SDMMC_GetCmdResp1>
 8008b1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b20:	69fb      	ldr	r3, [r7, #28]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3720      	adds	r7, #32
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b088      	sub	sp, #32
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008b38:	2319      	movs	r3, #25
 8008b3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b3c:	2340      	movs	r3, #64	@ 0x40
 8008b3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b4a:	f107 0308 	add.w	r3, r7, #8
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7ff feec 	bl	800892e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b5a:	2119      	movs	r1, #25
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f991 	bl	8008e84 <SDMMC_GetCmdResp1>
 8008b62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b64:	69fb      	ldr	r3, [r7, #28]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3720      	adds	r7, #32
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
	...

08008b70 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b088      	sub	sp, #32
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008b7c:	230c      	movs	r3, #12
 8008b7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b80:	2340      	movs	r3, #64	@ 0x40
 8008b82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b84:	2300      	movs	r3, #0
 8008b86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b8c:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b8e:	f107 0308 	add.w	r3, r7, #8
 8008b92:	4619      	mov	r1, r3
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7ff feca 	bl	800892e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008b9a:	4a05      	ldr	r2, [pc, #20]	@ (8008bb0 <SDMMC_CmdStopTransfer+0x40>)
 8008b9c:	210c      	movs	r1, #12
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f970 	bl	8008e84 <SDMMC_GetCmdResp1>
 8008ba4:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008ba6:	69fb      	ldr	r3, [r7, #28]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3720      	adds	r7, #32
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	05f5e100 	.word	0x05f5e100

08008bb4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b08a      	sub	sp, #40	@ 0x28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008bc4:	2307      	movs	r3, #7
 8008bc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bc8:	2340      	movs	r3, #64	@ 0x40
 8008bca:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bd4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bd6:	f107 0310 	add.w	r3, r7, #16
 8008bda:	4619      	mov	r1, r3
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f7ff fea6 	bl	800892e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008be6:	2107      	movs	r1, #7
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 f94b 	bl	8008e84 <SDMMC_GetCmdResp1>
 8008bee:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3728      	adds	r7, #40	@ 0x28
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b088      	sub	sp, #32
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008c02:	2300      	movs	r3, #0
 8008c04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008c06:	2300      	movs	r3, #0
 8008c08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c18:	f107 0308 	add.w	r3, r7, #8
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7ff fe85 	bl	800892e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fb65 	bl	80092f4 <SDMMC_GetCmdError>
 8008c2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c2c:	69fb      	ldr	r3, [r7, #28]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3720      	adds	r7, #32
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b088      	sub	sp, #32
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008c3e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008c42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008c44:	2308      	movs	r3, #8
 8008c46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c48:	2340      	movs	r3, #64	@ 0x40
 8008c4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c56:	f107 0308 	add.w	r3, r7, #8
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7ff fe66 	bl	800892e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 faf8 	bl	8009258 <SDMMC_GetCmdResp7>
 8008c68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c6a:	69fb      	ldr	r3, [r7, #28]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3720      	adds	r7, #32
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b088      	sub	sp, #32
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008c82:	2337      	movs	r3, #55	@ 0x37
 8008c84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c86:	2340      	movs	r3, #64	@ 0x40
 8008c88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c94:	f107 0308 	add.w	r3, r7, #8
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7ff fe47 	bl	800892e <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ca4:	2137      	movs	r1, #55	@ 0x37
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f8ec 	bl	8008e84 <SDMMC_GetCmdResp1>
 8008cac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cae:	69fb      	ldr	r3, [r7, #28]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3720      	adds	r7, #32
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b088      	sub	sp, #32
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008cc8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ccc:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008cce:	2329      	movs	r3, #41	@ 0x29
 8008cd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cd2:	2340      	movs	r3, #64	@ 0x40
 8008cd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ce0:	f107 0308 	add.w	r3, r7, #8
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7ff fe21 	bl	800892e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f9ff 	bl	80090f0 <SDMMC_GetCmdResp3>
 8008cf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cf4:	69fb      	ldr	r3, [r7, #28]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3720      	adds	r7, #32
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b088      	sub	sp, #32
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008d0c:	2306      	movs	r3, #6
 8008d0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d10:	2340      	movs	r3, #64	@ 0x40
 8008d12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d14:	2300      	movs	r3, #0
 8008d16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d1e:	f107 0308 	add.w	r3, r7, #8
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7ff fe02 	bl	800892e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d2e:	2106      	movs	r1, #6
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f8a7 	bl	8008e84 <SDMMC_GetCmdResp1>
 8008d36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d38:	69fb      	ldr	r3, [r7, #28]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3720      	adds	r7, #32
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b088      	sub	sp, #32
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008d4e:	2333      	movs	r3, #51	@ 0x33
 8008d50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d52:	2340      	movs	r3, #64	@ 0x40
 8008d54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d56:	2300      	movs	r3, #0
 8008d58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d60:	f107 0308 	add.w	r3, r7, #8
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7ff fde1 	bl	800892e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008d6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d70:	2133      	movs	r1, #51	@ 0x33
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f886 	bl	8008e84 <SDMMC_GetCmdResp1>
 8008d78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d7a:	69fb      	ldr	r3, [r7, #28]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3720      	adds	r7, #32
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b088      	sub	sp, #32
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008d90:	2302      	movs	r3, #2
 8008d92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008d94:	23c0      	movs	r3, #192	@ 0xc0
 8008d96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008da0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008da2:	f107 0308 	add.w	r3, r7, #8
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7ff fdc0 	bl	800892e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f956 	bl	8009060 <SDMMC_GetCmdResp2>
 8008db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008db6:	69fb      	ldr	r3, [r7, #28]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3720      	adds	r7, #32
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b088      	sub	sp, #32
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008dce:	2309      	movs	r3, #9
 8008dd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008dd2:	23c0      	movs	r3, #192	@ 0xc0
 8008dd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008dde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008de0:	f107 0308 	add.w	r3, r7, #8
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff fda1 	bl	800892e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f937 	bl	8009060 <SDMMC_GetCmdResp2>
 8008df2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008df4:	69fb      	ldr	r3, [r7, #28]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3720      	adds	r7, #32
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b088      	sub	sp, #32
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e10:	2340      	movs	r3, #64	@ 0x40
 8008e12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e14:	2300      	movs	r3, #0
 8008e16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e1e:	f107 0308 	add.w	r3, r7, #8
 8008e22:	4619      	mov	r1, r3
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f7ff fd82 	bl	800892e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008e2a:	683a      	ldr	r2, [r7, #0]
 8008e2c:	2103      	movs	r1, #3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f99c 	bl	800916c <SDMMC_GetCmdResp6>
 8008e34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e36:	69fb      	ldr	r3, [r7, #28]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3720      	adds	r7, #32
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b088      	sub	sp, #32
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008e4e:	230d      	movs	r3, #13
 8008e50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e52:	2340      	movs	r3, #64	@ 0x40
 8008e54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e56:	2300      	movs	r3, #0
 8008e58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e60:	f107 0308 	add.w	r3, r7, #8
 8008e64:	4619      	mov	r1, r3
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7ff fd61 	bl	800892e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e70:	210d      	movs	r1, #13
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f806 	bl	8008e84 <SDMMC_GetCmdResp1>
 8008e78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e7a:	69fb      	ldr	r3, [r7, #28]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3720      	adds	r7, #32
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b088      	sub	sp, #32
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	607a      	str	r2, [r7, #4]
 8008e90:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008e92:	4b70      	ldr	r3, [pc, #448]	@ (8009054 <SDMMC_GetCmdResp1+0x1d0>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a70      	ldr	r2, [pc, #448]	@ (8009058 <SDMMC_GetCmdResp1+0x1d4>)
 8008e98:	fba2 2303 	umull	r2, r3, r2, r3
 8008e9c:	0a5a      	lsrs	r2, r3, #9
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	fb02 f303 	mul.w	r3, r2, r3
 8008ea4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	1e5a      	subs	r2, r3, #1
 8008eaa:	61fa      	str	r2, [r7, #28]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d102      	bne.n	8008eb6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008eb0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008eb4:	e0c9      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eba:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d0ef      	beq.n	8008ea6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1ea      	bne.n	8008ea6 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ed4:	f003 0304 	and.w	r3, r3, #4
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d004      	beq.n	8008ee6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2204      	movs	r2, #4
 8008ee0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ee2:	2304      	movs	r3, #4
 8008ee4:	e0b1      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d004      	beq.n	8008efc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e0a6      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	22c5      	movs	r2, #197	@ 0xc5
 8008f00:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f7ff fd3d 	bl	8008982 <SDMMC_GetCommandResponse>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	7afb      	ldrb	r3, [r7, #11]
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d001      	beq.n	8008f16 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e099      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008f16:	2100      	movs	r1, #0
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f7ff fd3f 	bl	800899c <SDMMC_GetResponse>
 8008f1e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	4b4e      	ldr	r3, [pc, #312]	@ (800905c <SDMMC_GetCmdResp1+0x1d8>)
 8008f24:	4013      	ands	r3, r2
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e08d      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	da02      	bge.n	8008f3a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008f34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008f38:	e087      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008f44:	2340      	movs	r3, #64	@ 0x40
 8008f46:	e080      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008f52:	2380      	movs	r3, #128	@ 0x80
 8008f54:	e079      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008f60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008f64:	e071      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008f70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f74:	e069      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d002      	beq.n	8008f86 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008f80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f84:	e061      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d002      	beq.n	8008f96 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008f90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008f94:	e059      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d002      	beq.n	8008fa6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008fa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008fa4:	e051      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d002      	beq.n	8008fb6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008fb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008fb4:	e049      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d002      	beq.n	8008fc6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008fc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008fc4:	e041      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d002      	beq.n	8008fd6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008fd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fd4:	e039      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d002      	beq.n	8008fe6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008fe0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008fe4:	e031      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008ff0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8008ff4:	e029      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d002      	beq.n	8009006 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009000:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009004:	e021      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d002      	beq.n	8009016 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009010:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009014:	e019      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800901c:	2b00      	cmp	r3, #0
 800901e:	d002      	beq.n	8009026 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009020:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009024:	e011      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800902c:	2b00      	cmp	r3, #0
 800902e:	d002      	beq.n	8009036 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009030:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009034:	e009      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f003 0308 	and.w	r3, r3, #8
 800903c:	2b00      	cmp	r3, #0
 800903e:	d002      	beq.n	8009046 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009040:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009044:	e001      	b.n	800904a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009046:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800904a:	4618      	mov	r0, r3
 800904c:	3720      	adds	r7, #32
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20000000 	.word	0x20000000
 8009058:	10624dd3 	.word	0x10624dd3
 800905c:	fdffe008 	.word	0xfdffe008

08009060 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009068:	4b1f      	ldr	r3, [pc, #124]	@ (80090e8 <SDMMC_GetCmdResp2+0x88>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a1f      	ldr	r2, [pc, #124]	@ (80090ec <SDMMC_GetCmdResp2+0x8c>)
 800906e:	fba2 2303 	umull	r2, r3, r2, r3
 8009072:	0a5b      	lsrs	r3, r3, #9
 8009074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009078:	fb02 f303 	mul.w	r3, r2, r3
 800907c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	1e5a      	subs	r2, r3, #1
 8009082:	60fa      	str	r2, [r7, #12]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d102      	bne.n	800908e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009088:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800908c:	e026      	b.n	80090dc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009092:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800909a:	2b00      	cmp	r3, #0
 800909c:	d0ef      	beq.n	800907e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1ea      	bne.n	800907e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ac:	f003 0304 	and.w	r3, r3, #4
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d004      	beq.n	80090be <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2204      	movs	r2, #4
 80090b8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80090ba:	2304      	movs	r3, #4
 80090bc:	e00e      	b.n	80090dc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d004      	beq.n	80090d4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80090d0:	2301      	movs	r3, #1
 80090d2:	e003      	b.n	80090dc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	22c5      	movs	r2, #197	@ 0xc5
 80090d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3714      	adds	r7, #20
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr
 80090e8:	20000000 	.word	0x20000000
 80090ec:	10624dd3 	.word	0x10624dd3

080090f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80090f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009164 <SDMMC_GetCmdResp3+0x74>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a1a      	ldr	r2, [pc, #104]	@ (8009168 <SDMMC_GetCmdResp3+0x78>)
 80090fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009102:	0a5b      	lsrs	r3, r3, #9
 8009104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009108:	fb02 f303 	mul.w	r3, r2, r3
 800910c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	1e5a      	subs	r2, r3, #1
 8009112:	60fa      	str	r2, [r7, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d102      	bne.n	800911e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009118:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800911c:	e01b      	b.n	8009156 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009122:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800912a:	2b00      	cmp	r3, #0
 800912c:	d0ef      	beq.n	800910e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009134:	2b00      	cmp	r3, #0
 8009136:	d1ea      	bne.n	800910e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800913c:	f003 0304 	and.w	r3, r3, #4
 8009140:	2b00      	cmp	r3, #0
 8009142:	d004      	beq.n	800914e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2204      	movs	r2, #4
 8009148:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800914a:	2304      	movs	r3, #4
 800914c:	e003      	b.n	8009156 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	22c5      	movs	r2, #197	@ 0xc5
 8009152:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	20000000 	.word	0x20000000
 8009168:	10624dd3 	.word	0x10624dd3

0800916c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b088      	sub	sp, #32
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	460b      	mov	r3, r1
 8009176:	607a      	str	r2, [r7, #4]
 8009178:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800917a:	4b35      	ldr	r3, [pc, #212]	@ (8009250 <SDMMC_GetCmdResp6+0xe4>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a35      	ldr	r2, [pc, #212]	@ (8009254 <SDMMC_GetCmdResp6+0xe8>)
 8009180:	fba2 2303 	umull	r2, r3, r2, r3
 8009184:	0a5b      	lsrs	r3, r3, #9
 8009186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800918a:	fb02 f303 	mul.w	r3, r2, r3
 800918e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	1e5a      	subs	r2, r3, #1
 8009194:	61fa      	str	r2, [r7, #28]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d102      	bne.n	80091a0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800919a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800919e:	e052      	b.n	8009246 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091a4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d0ef      	beq.n	8009190 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1ea      	bne.n	8009190 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091be:	f003 0304 	and.w	r3, r3, #4
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d004      	beq.n	80091d0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2204      	movs	r2, #4
 80091ca:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80091cc:	2304      	movs	r3, #4
 80091ce:	e03a      	b.n	8009246 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d004      	beq.n	80091e6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2201      	movs	r2, #1
 80091e0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e02f      	b.n	8009246 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f7ff fbcb 	bl	8008982 <SDMMC_GetCommandResponse>
 80091ec:	4603      	mov	r3, r0
 80091ee:	461a      	mov	r2, r3
 80091f0:	7afb      	ldrb	r3, [r7, #11]
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d001      	beq.n	80091fa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e025      	b.n	8009246 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	22c5      	movs	r2, #197	@ 0xc5
 80091fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009200:	2100      	movs	r1, #0
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f7ff fbca 	bl	800899c <SDMMC_GetResponse>
 8009208:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d106      	bne.n	8009222 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	0c1b      	lsrs	r3, r3, #16
 8009218:	b29a      	uxth	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800921e:	2300      	movs	r3, #0
 8009220:	e011      	b.n	8009246 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d002      	beq.n	8009232 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800922c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009230:	e009      	b.n	8009246 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d002      	beq.n	8009242 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800923c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009240:	e001      	b.n	8009246 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009242:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009246:	4618      	mov	r0, r3
 8009248:	3720      	adds	r7, #32
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	20000000 	.word	0x20000000
 8009254:	10624dd3 	.word	0x10624dd3

08009258 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009260:	4b22      	ldr	r3, [pc, #136]	@ (80092ec <SDMMC_GetCmdResp7+0x94>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a22      	ldr	r2, [pc, #136]	@ (80092f0 <SDMMC_GetCmdResp7+0x98>)
 8009266:	fba2 2303 	umull	r2, r3, r2, r3
 800926a:	0a5b      	lsrs	r3, r3, #9
 800926c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009270:	fb02 f303 	mul.w	r3, r2, r3
 8009274:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	1e5a      	subs	r2, r3, #1
 800927a:	60fa      	str	r2, [r7, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d102      	bne.n	8009286 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009280:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009284:	e02c      	b.n	80092e0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800928a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0ef      	beq.n	8009276 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1ea      	bne.n	8009276 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092a4:	f003 0304 	and.w	r3, r3, #4
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d004      	beq.n	80092b6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2204      	movs	r2, #4
 80092b0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092b2:	2304      	movs	r3, #4
 80092b4:	e014      	b.n	80092e0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ba:	f003 0301 	and.w	r3, r3, #1
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d004      	beq.n	80092cc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e009      	b.n	80092e0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d002      	beq.n	80092de <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2240      	movs	r2, #64	@ 0x40
 80092dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80092de:	2300      	movs	r3, #0

}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	20000000 	.word	0x20000000
 80092f0:	10624dd3 	.word	0x10624dd3

080092f4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80092fc:	4b11      	ldr	r3, [pc, #68]	@ (8009344 <SDMMC_GetCmdError+0x50>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a11      	ldr	r2, [pc, #68]	@ (8009348 <SDMMC_GetCmdError+0x54>)
 8009302:	fba2 2303 	umull	r2, r3, r2, r3
 8009306:	0a5b      	lsrs	r3, r3, #9
 8009308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800930c:	fb02 f303 	mul.w	r3, r2, r3
 8009310:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	1e5a      	subs	r2, r3, #1
 8009316:	60fa      	str	r2, [r7, #12]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d102      	bne.n	8009322 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800931c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009320:	e009      	b.n	8009336 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800932a:	2b00      	cmp	r3, #0
 800932c:	d0f1      	beq.n	8009312 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	22c5      	movs	r2, #197	@ 0xc5
 8009332:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3714      	adds	r7, #20
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	20000000 	.word	0x20000000
 8009348:	10624dd3 	.word	0x10624dd3

0800934c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009350:	4904      	ldr	r1, [pc, #16]	@ (8009364 <MX_FATFS_Init+0x18>)
 8009352:	4805      	ldr	r0, [pc, #20]	@ (8009368 <MX_FATFS_Init+0x1c>)
 8009354:	f002 fb36 	bl	800b9c4 <FATFS_LinkDriver>
 8009358:	4603      	mov	r3, r0
 800935a:	461a      	mov	r2, r3
 800935c:	4b03      	ldr	r3, [pc, #12]	@ (800936c <MX_FATFS_Init+0x20>)
 800935e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009360:	bf00      	nop
 8009362:	bd80      	pop	{r7, pc}
 8009364:	200003d0 	.word	0x200003d0
 8009368:	08010650 	.word	0x08010650
 800936c:	200003cc 	.word	0x200003cc

08009370 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009370:	b480      	push	{r7}
 8009372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009374:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009376:	4618      	mov	r0, r3
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800938a:	f000 f86b 	bl	8009464 <BSP_SD_IsDetected>
 800938e:	4603      	mov	r3, r0
 8009390:	2b01      	cmp	r3, #1
 8009392:	d001      	beq.n	8009398 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009394:	2302      	movs	r3, #2
 8009396:	e005      	b.n	80093a4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009398:	4804      	ldr	r0, [pc, #16]	@ (80093ac <BSP_SD_Init+0x2c>)
 800939a:	f7fd faed 	bl	8006978 <HAL_SD_Init>
 800939e:	4603      	mov	r3, r0
 80093a0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80093a2:	79fb      	ldrb	r3, [r7, #7]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	20000268 	.word	0x20000268

080093b0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b088      	sub	sp, #32
 80093b4:	af02      	add	r7, sp, #8
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
 80093bc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	9300      	str	r3, [sp, #0]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	68f9      	ldr	r1, [r7, #12]
 80093cc:	4806      	ldr	r0, [pc, #24]	@ (80093e8 <BSP_SD_ReadBlocks+0x38>)
 80093ce:	f7fd fbb5 	bl	8006b3c <HAL_SD_ReadBlocks>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80093dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3718      	adds	r7, #24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20000268 	.word	0x20000268

080093ec <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b088      	sub	sp, #32
 80093f0:	af02      	add	r7, sp, #8
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
 80093f8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80093fa:	2300      	movs	r3, #0
 80093fc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	68f9      	ldr	r1, [r7, #12]
 8009408:	4806      	ldr	r0, [pc, #24]	@ (8009424 <BSP_SD_WriteBlocks+0x38>)
 800940a:	f7fd fd75 	bl	8006ef8 <HAL_SD_WriteBlocks>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d001      	beq.n	8009418 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009418:	7dfb      	ldrb	r3, [r7, #23]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3718      	adds	r7, #24
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	20000268 	.word	0x20000268

08009428 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800942c:	4805      	ldr	r0, [pc, #20]	@ (8009444 <BSP_SD_GetCardState+0x1c>)
 800942e:	f7fe f975 	bl	800771c <HAL_SD_GetCardState>
 8009432:	4603      	mov	r3, r0
 8009434:	2b04      	cmp	r3, #4
 8009436:	bf14      	ite	ne
 8009438:	2301      	movne	r3, #1
 800943a:	2300      	moveq	r3, #0
 800943c:	b2db      	uxtb	r3, r3
}
 800943e:	4618      	mov	r0, r3
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	20000268 	.word	0x20000268

08009448 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	4803      	ldr	r0, [pc, #12]	@ (8009460 <BSP_SD_GetCardInfo+0x18>)
 8009454:	f7fe f87a 	bl	800754c <HAL_SD_GetCardInfo>
}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	20000268 	.word	0x20000268

08009464 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800946a:	2301      	movs	r3, #1
 800946c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800946e:	f000 f80b 	bl	8009488 <BSP_PlatformIsDetected>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009478:	2300      	movs	r3, #0
 800947a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800947c:	79fb      	ldrb	r3, [r7, #7]
 800947e:	b2db      	uxtb	r3, r3
}
 8009480:	4618      	mov	r0, r3
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800948e:	2301      	movs	r3, #1
 8009490:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009492:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009496:	4806      	ldr	r0, [pc, #24]	@ (80094b0 <BSP_PlatformIsDetected+0x28>)
 8009498:	f7f9 ff3c 	bl	8003314 <HAL_GPIO_ReadPin>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80094a2:	2300      	movs	r3, #0
 80094a4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80094a6:	79fb      	ldrb	r3, [r7, #7]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	48000800 	.word	0x48000800

080094b4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	4603      	mov	r3, r0
 80094bc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80094be:	4b0b      	ldr	r3, [pc, #44]	@ (80094ec <SD_CheckStatus+0x38>)
 80094c0:	2201      	movs	r2, #1
 80094c2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80094c4:	f7ff ffb0 	bl	8009428 <BSP_SD_GetCardState>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d107      	bne.n	80094de <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80094ce:	4b07      	ldr	r3, [pc, #28]	@ (80094ec <SD_CheckStatus+0x38>)
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	f023 0301 	bic.w	r3, r3, #1
 80094d8:	b2da      	uxtb	r2, r3
 80094da:	4b04      	ldr	r3, [pc, #16]	@ (80094ec <SD_CheckStatus+0x38>)
 80094dc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80094de:	4b03      	ldr	r3, [pc, #12]	@ (80094ec <SD_CheckStatus+0x38>)
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	b2db      	uxtb	r3, r3
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	20000009 	.word	0x20000009

080094f0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	4603      	mov	r3, r0
 80094f8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80094fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009528 <SD_initialize+0x38>)
 80094fc:	2201      	movs	r2, #1
 80094fe:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009500:	f7ff ff3e 	bl	8009380 <BSP_SD_Init>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d107      	bne.n	800951a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800950a:	79fb      	ldrb	r3, [r7, #7]
 800950c:	4618      	mov	r0, r3
 800950e:	f7ff ffd1 	bl	80094b4 <SD_CheckStatus>
 8009512:	4603      	mov	r3, r0
 8009514:	461a      	mov	r2, r3
 8009516:	4b04      	ldr	r3, [pc, #16]	@ (8009528 <SD_initialize+0x38>)
 8009518:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800951a:	4b03      	ldr	r3, [pc, #12]	@ (8009528 <SD_initialize+0x38>)
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	b2db      	uxtb	r3, r3
}
 8009520:	4618      	mov	r0, r3
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	20000009 	.word	0x20000009

0800952c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	4603      	mov	r3, r0
 8009534:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	4618      	mov	r0, r3
 800953a:	f7ff ffbb 	bl	80094b4 <SD_CheckStatus>
 800953e:	4603      	mov	r3, r0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af00      	add	r7, sp, #0
 800954e:	60b9      	str	r1, [r7, #8]
 8009550:	607a      	str	r2, [r7, #4]
 8009552:	603b      	str	r3, [r7, #0]
 8009554:	4603      	mov	r3, r0
 8009556:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800955c:	f04f 33ff 	mov.w	r3, #4294967295
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	6879      	ldr	r1, [r7, #4]
 8009564:	68b8      	ldr	r0, [r7, #8]
 8009566:	f7ff ff23 	bl	80093b0 <BSP_SD_ReadBlocks>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d107      	bne.n	8009580 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009570:	bf00      	nop
 8009572:	f7ff ff59 	bl	8009428 <BSP_SD_GetCardState>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1fa      	bne.n	8009572 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009580:	7dfb      	ldrb	r3, [r7, #23]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b086      	sub	sp, #24
 800958e:	af00      	add	r7, sp, #0
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
 8009594:	603b      	str	r3, [r7, #0]
 8009596:	4603      	mov	r3, r0
 8009598:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800959e:	f04f 33ff 	mov.w	r3, #4294967295
 80095a2:	683a      	ldr	r2, [r7, #0]
 80095a4:	6879      	ldr	r1, [r7, #4]
 80095a6:	68b8      	ldr	r0, [r7, #8]
 80095a8:	f7ff ff20 	bl	80093ec <BSP_SD_WriteBlocks>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d107      	bne.n	80095c2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80095b2:	bf00      	nop
 80095b4:	f7ff ff38 	bl	8009428 <BSP_SD_GetCardState>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1fa      	bne.n	80095b4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3718      	adds	r7, #24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08c      	sub	sp, #48	@ 0x30
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	4603      	mov	r3, r0
 80095d4:	603a      	str	r2, [r7, #0]
 80095d6:	71fb      	strb	r3, [r7, #7]
 80095d8:	460b      	mov	r3, r1
 80095da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80095e2:	4b25      	ldr	r3, [pc, #148]	@ (8009678 <SD_ioctl+0xac>)
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	f003 0301 	and.w	r3, r3, #1
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <SD_ioctl+0x28>
 80095f0:	2303      	movs	r3, #3
 80095f2:	e03c      	b.n	800966e <SD_ioctl+0xa2>

  switch (cmd)
 80095f4:	79bb      	ldrb	r3, [r7, #6]
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d834      	bhi.n	8009664 <SD_ioctl+0x98>
 80095fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009600 <SD_ioctl+0x34>)
 80095fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009600:	08009611 	.word	0x08009611
 8009604:	08009619 	.word	0x08009619
 8009608:	08009631 	.word	0x08009631
 800960c:	0800964b 	.word	0x0800964b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009610:	2300      	movs	r3, #0
 8009612:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009616:	e028      	b.n	800966a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009618:	f107 030c 	add.w	r3, r7, #12
 800961c:	4618      	mov	r0, r3
 800961e:	f7ff ff13 	bl	8009448 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800962e:	e01c      	b.n	800966a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009630:	f107 030c 	add.w	r3, r7, #12
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff ff07 	bl	8009448 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800963a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963c:	b29a      	uxth	r2, r3
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009642:	2300      	movs	r3, #0
 8009644:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009648:	e00f      	b.n	800966a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800964a:	f107 030c 	add.w	r3, r7, #12
 800964e:	4618      	mov	r0, r3
 8009650:	f7ff fefa 	bl	8009448 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009656:	0a5a      	lsrs	r2, r3, #9
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009662:	e002      	b.n	800966a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009664:	2304      	movs	r3, #4
 8009666:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800966a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800966e:	4618      	mov	r0, r3
 8009670:	3730      	adds	r7, #48	@ 0x30
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20000009 	.word	0x20000009

0800967c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	4603      	mov	r3, r0
 8009684:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009686:	79fb      	ldrb	r3, [r7, #7]
 8009688:	4a08      	ldr	r2, [pc, #32]	@ (80096ac <disk_status+0x30>)
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	79fa      	ldrb	r2, [r7, #7]
 8009694:	4905      	ldr	r1, [pc, #20]	@ (80096ac <disk_status+0x30>)
 8009696:	440a      	add	r2, r1
 8009698:	7a12      	ldrb	r2, [r2, #8]
 800969a:	4610      	mov	r0, r2
 800969c:	4798      	blx	r3
 800969e:	4603      	mov	r3, r0
 80096a0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80096a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	2000062c 	.word	0x2000062c

080096b0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	4603      	mov	r3, r0
 80096b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80096be:	79fb      	ldrb	r3, [r7, #7]
 80096c0:	4a0d      	ldr	r2, [pc, #52]	@ (80096f8 <disk_initialize+0x48>)
 80096c2:	5cd3      	ldrb	r3, [r2, r3]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d111      	bne.n	80096ec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80096c8:	79fb      	ldrb	r3, [r7, #7]
 80096ca:	4a0b      	ldr	r2, [pc, #44]	@ (80096f8 <disk_initialize+0x48>)
 80096cc:	2101      	movs	r1, #1
 80096ce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80096d0:	79fb      	ldrb	r3, [r7, #7]
 80096d2:	4a09      	ldr	r2, [pc, #36]	@ (80096f8 <disk_initialize+0x48>)
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	79fa      	ldrb	r2, [r7, #7]
 80096de:	4906      	ldr	r1, [pc, #24]	@ (80096f8 <disk_initialize+0x48>)
 80096e0:	440a      	add	r2, r1
 80096e2:	7a12      	ldrb	r2, [r2, #8]
 80096e4:	4610      	mov	r0, r2
 80096e6:	4798      	blx	r3
 80096e8:	4603      	mov	r3, r0
 80096ea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	2000062c 	.word	0x2000062c

080096fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80096fc:	b590      	push	{r4, r7, lr}
 80096fe:	b087      	sub	sp, #28
 8009700:	af00      	add	r7, sp, #0
 8009702:	60b9      	str	r1, [r7, #8]
 8009704:	607a      	str	r2, [r7, #4]
 8009706:	603b      	str	r3, [r7, #0]
 8009708:	4603      	mov	r3, r0
 800970a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800970c:	7bfb      	ldrb	r3, [r7, #15]
 800970e:	4a0a      	ldr	r2, [pc, #40]	@ (8009738 <disk_read+0x3c>)
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	4413      	add	r3, r2
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	689c      	ldr	r4, [r3, #8]
 8009718:	7bfb      	ldrb	r3, [r7, #15]
 800971a:	4a07      	ldr	r2, [pc, #28]	@ (8009738 <disk_read+0x3c>)
 800971c:	4413      	add	r3, r2
 800971e:	7a18      	ldrb	r0, [r3, #8]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	68b9      	ldr	r1, [r7, #8]
 8009726:	47a0      	blx	r4
 8009728:	4603      	mov	r3, r0
 800972a:	75fb      	strb	r3, [r7, #23]
  return res;
 800972c:	7dfb      	ldrb	r3, [r7, #23]
}
 800972e:	4618      	mov	r0, r3
 8009730:	371c      	adds	r7, #28
 8009732:	46bd      	mov	sp, r7
 8009734:	bd90      	pop	{r4, r7, pc}
 8009736:	bf00      	nop
 8009738:	2000062c 	.word	0x2000062c

0800973c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800973c:	b590      	push	{r4, r7, lr}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60b9      	str	r1, [r7, #8]
 8009744:	607a      	str	r2, [r7, #4]
 8009746:	603b      	str	r3, [r7, #0]
 8009748:	4603      	mov	r3, r0
 800974a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800974c:	7bfb      	ldrb	r3, [r7, #15]
 800974e:	4a0a      	ldr	r2, [pc, #40]	@ (8009778 <disk_write+0x3c>)
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	68dc      	ldr	r4, [r3, #12]
 8009758:	7bfb      	ldrb	r3, [r7, #15]
 800975a:	4a07      	ldr	r2, [pc, #28]	@ (8009778 <disk_write+0x3c>)
 800975c:	4413      	add	r3, r2
 800975e:	7a18      	ldrb	r0, [r3, #8]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	68b9      	ldr	r1, [r7, #8]
 8009766:	47a0      	blx	r4
 8009768:	4603      	mov	r3, r0
 800976a:	75fb      	strb	r3, [r7, #23]
  return res;
 800976c:	7dfb      	ldrb	r3, [r7, #23]
}
 800976e:	4618      	mov	r0, r3
 8009770:	371c      	adds	r7, #28
 8009772:	46bd      	mov	sp, r7
 8009774:	bd90      	pop	{r4, r7, pc}
 8009776:	bf00      	nop
 8009778:	2000062c 	.word	0x2000062c

0800977c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	4603      	mov	r3, r0
 8009784:	603a      	str	r2, [r7, #0]
 8009786:	71fb      	strb	r3, [r7, #7]
 8009788:	460b      	mov	r3, r1
 800978a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800978c:	79fb      	ldrb	r3, [r7, #7]
 800978e:	4a09      	ldr	r2, [pc, #36]	@ (80097b4 <disk_ioctl+0x38>)
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	79fa      	ldrb	r2, [r7, #7]
 800979a:	4906      	ldr	r1, [pc, #24]	@ (80097b4 <disk_ioctl+0x38>)
 800979c:	440a      	add	r2, r1
 800979e:	7a10      	ldrb	r0, [r2, #8]
 80097a0:	79b9      	ldrb	r1, [r7, #6]
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	4798      	blx	r3
 80097a6:	4603      	mov	r3, r0
 80097a8:	73fb      	strb	r3, [r7, #15]
  return res;
 80097aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	2000062c 	.word	0x2000062c

080097b8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	3301      	adds	r3, #1
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80097c8:	89fb      	ldrh	r3, [r7, #14]
 80097ca:	021b      	lsls	r3, r3, #8
 80097cc:	b21a      	sxth	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	b21b      	sxth	r3, r3
 80097d4:	4313      	orrs	r3, r2
 80097d6:	b21b      	sxth	r3, r3
 80097d8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80097da:	89fb      	ldrh	r3, [r7, #14]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	3303      	adds	r3, #3
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	021b      	lsls	r3, r3, #8
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	3202      	adds	r2, #2
 8009800:	7812      	ldrb	r2, [r2, #0]
 8009802:	4313      	orrs	r3, r2
 8009804:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	021b      	lsls	r3, r3, #8
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	3201      	adds	r2, #1
 800980e:	7812      	ldrb	r2, [r2, #0]
 8009810:	4313      	orrs	r3, r2
 8009812:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	021b      	lsls	r3, r3, #8
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	7812      	ldrb	r2, [r2, #0]
 800981c:	4313      	orrs	r3, r2
 800981e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009820:	68fb      	ldr	r3, [r7, #12]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3714      	adds	r7, #20
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800982e:	b480      	push	{r7}
 8009830:	b083      	sub	sp, #12
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	460b      	mov	r3, r1
 8009838:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	1c5a      	adds	r2, r3, #1
 800983e:	607a      	str	r2, [r7, #4]
 8009840:	887a      	ldrh	r2, [r7, #2]
 8009842:	b2d2      	uxtb	r2, r2
 8009844:	701a      	strb	r2, [r3, #0]
 8009846:	887b      	ldrh	r3, [r7, #2]
 8009848:	0a1b      	lsrs	r3, r3, #8
 800984a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	1c5a      	adds	r2, r3, #1
 8009850:	607a      	str	r2, [r7, #4]
 8009852:	887a      	ldrh	r2, [r7, #2]
 8009854:	b2d2      	uxtb	r2, r2
 8009856:	701a      	strb	r2, [r3, #0]
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	1c5a      	adds	r2, r3, #1
 8009872:	607a      	str	r2, [r7, #4]
 8009874:	683a      	ldr	r2, [r7, #0]
 8009876:	b2d2      	uxtb	r2, r2
 8009878:	701a      	strb	r2, [r3, #0]
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	0a1b      	lsrs	r3, r3, #8
 800987e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	1c5a      	adds	r2, r3, #1
 8009884:	607a      	str	r2, [r7, #4]
 8009886:	683a      	ldr	r2, [r7, #0]
 8009888:	b2d2      	uxtb	r2, r2
 800988a:	701a      	strb	r2, [r3, #0]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	0a1b      	lsrs	r3, r3, #8
 8009890:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	1c5a      	adds	r2, r3, #1
 8009896:	607a      	str	r2, [r7, #4]
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	b2d2      	uxtb	r2, r2
 800989c:	701a      	strb	r2, [r3, #0]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	0a1b      	lsrs	r3, r3, #8
 80098a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	1c5a      	adds	r2, r3, #1
 80098a8:	607a      	str	r2, [r7, #4]
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	b2d2      	uxtb	r2, r2
 80098ae:	701a      	strb	r2, [r3, #0]
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00d      	beq.n	80098f2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	1c53      	adds	r3, r2, #1
 80098da:	613b      	str	r3, [r7, #16]
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	1c59      	adds	r1, r3, #1
 80098e0:	6179      	str	r1, [r7, #20]
 80098e2:	7812      	ldrb	r2, [r2, #0]
 80098e4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	3b01      	subs	r3, #1
 80098ea:	607b      	str	r3, [r7, #4]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1f1      	bne.n	80098d6 <mem_cpy+0x1a>
	}
}
 80098f2:	bf00      	nop
 80098f4:	371c      	adds	r7, #28
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr

080098fe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80098fe:	b480      	push	{r7}
 8009900:	b087      	sub	sp, #28
 8009902:	af00      	add	r7, sp, #0
 8009904:	60f8      	str	r0, [r7, #12]
 8009906:	60b9      	str	r1, [r7, #8]
 8009908:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	1c5a      	adds	r2, r3, #1
 8009912:	617a      	str	r2, [r7, #20]
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	b2d2      	uxtb	r2, r2
 8009918:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	3b01      	subs	r3, #1
 800991e:	607b      	str	r3, [r7, #4]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1f3      	bne.n	800990e <mem_set+0x10>
}
 8009926:	bf00      	nop
 8009928:	bf00      	nop
 800992a:	371c      	adds	r7, #28
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009934:	b480      	push	{r7}
 8009936:	b089      	sub	sp, #36	@ 0x24
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	61fb      	str	r3, [r7, #28]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009948:	2300      	movs	r3, #0
 800994a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	61fa      	str	r2, [r7, #28]
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	4619      	mov	r1, r3
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	1c5a      	adds	r2, r3, #1
 800995a:	61ba      	str	r2, [r7, #24]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	1acb      	subs	r3, r1, r3
 8009960:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	3b01      	subs	r3, #1
 8009966:	607b      	str	r3, [r7, #4]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <mem_cmp+0x40>
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d0eb      	beq.n	800994c <mem_cmp+0x18>

	return r;
 8009974:	697b      	ldr	r3, [r7, #20]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3724      	adds	r7, #36	@ 0x24
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr

08009982 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009982:	b480      	push	{r7}
 8009984:	b083      	sub	sp, #12
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
 800998a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800998c:	e002      	b.n	8009994 <chk_chr+0x12>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	3301      	adds	r3, #1
 8009992:	607b      	str	r3, [r7, #4]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d005      	beq.n	80099a8 <chk_chr+0x26>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	461a      	mov	r2, r3
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d1f2      	bne.n	800998e <chk_chr+0xc>
	return *str;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	781b      	ldrb	r3, [r3, #0]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80099c2:	2300      	movs	r3, #0
 80099c4:	60bb      	str	r3, [r7, #8]
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	60fb      	str	r3, [r7, #12]
 80099ca:	e029      	b.n	8009a20 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80099cc:	4a27      	ldr	r2, [pc, #156]	@ (8009a6c <chk_lock+0xb4>)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	011b      	lsls	r3, r3, #4
 80099d2:	4413      	add	r3, r2
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d01d      	beq.n	8009a16 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80099da:	4a24      	ldr	r2, [pc, #144]	@ (8009a6c <chk_lock+0xb4>)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	011b      	lsls	r3, r3, #4
 80099e0:	4413      	add	r3, r2
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d116      	bne.n	8009a1a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80099ec:	4a1f      	ldr	r2, [pc, #124]	@ (8009a6c <chk_lock+0xb4>)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	011b      	lsls	r3, r3, #4
 80099f2:	4413      	add	r3, r2
 80099f4:	3304      	adds	r3, #4
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d10c      	bne.n	8009a1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a00:	4a1a      	ldr	r2, [pc, #104]	@ (8009a6c <chk_lock+0xb4>)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	011b      	lsls	r3, r3, #4
 8009a06:	4413      	add	r3, r2
 8009a08:	3308      	adds	r3, #8
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d102      	bne.n	8009a1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a14:	e007      	b.n	8009a26 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009a16:	2301      	movs	r3, #1
 8009a18:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d9d2      	bls.n	80099cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d109      	bne.n	8009a40 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d102      	bne.n	8009a38 <chk_lock+0x80>
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d101      	bne.n	8009a3c <chk_lock+0x84>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	e010      	b.n	8009a5e <chk_lock+0xa6>
 8009a3c:	2312      	movs	r3, #18
 8009a3e:	e00e      	b.n	8009a5e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d108      	bne.n	8009a58 <chk_lock+0xa0>
 8009a46:	4a09      	ldr	r2, [pc, #36]	@ (8009a6c <chk_lock+0xb4>)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	011b      	lsls	r3, r3, #4
 8009a4c:	4413      	add	r3, r2
 8009a4e:	330c      	adds	r3, #12
 8009a50:	881b      	ldrh	r3, [r3, #0]
 8009a52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a56:	d101      	bne.n	8009a5c <chk_lock+0xa4>
 8009a58:	2310      	movs	r3, #16
 8009a5a:	e000      	b.n	8009a5e <chk_lock+0xa6>
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	2000060c 	.word	0x2000060c

08009a70 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009a76:	2300      	movs	r3, #0
 8009a78:	607b      	str	r3, [r7, #4]
 8009a7a:	e002      	b.n	8009a82 <enq_lock+0x12>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	607b      	str	r3, [r7, #4]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d806      	bhi.n	8009a96 <enq_lock+0x26>
 8009a88:	4a09      	ldr	r2, [pc, #36]	@ (8009ab0 <enq_lock+0x40>)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	011b      	lsls	r3, r3, #4
 8009a8e:	4413      	add	r3, r2
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1f2      	bne.n	8009a7c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	bf14      	ite	ne
 8009a9c:	2301      	movne	r3, #1
 8009a9e:	2300      	moveq	r3, #0
 8009aa0:	b2db      	uxtb	r3, r3
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	370c      	adds	r7, #12
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	2000060c 	.word	0x2000060c

08009ab4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009abe:	2300      	movs	r3, #0
 8009ac0:	60fb      	str	r3, [r7, #12]
 8009ac2:	e01f      	b.n	8009b04 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009ac4:	4a41      	ldr	r2, [pc, #260]	@ (8009bcc <inc_lock+0x118>)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	011b      	lsls	r3, r3, #4
 8009aca:	4413      	add	r3, r2
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d113      	bne.n	8009afe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009ad6:	4a3d      	ldr	r2, [pc, #244]	@ (8009bcc <inc_lock+0x118>)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	011b      	lsls	r3, r3, #4
 8009adc:	4413      	add	r3, r2
 8009ade:	3304      	adds	r3, #4
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d109      	bne.n	8009afe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009aea:	4a38      	ldr	r2, [pc, #224]	@ (8009bcc <inc_lock+0x118>)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	011b      	lsls	r3, r3, #4
 8009af0:	4413      	add	r3, r2
 8009af2:	3308      	adds	r3, #8
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d006      	beq.n	8009b0c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3301      	adds	r3, #1
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d9dc      	bls.n	8009ac4 <inc_lock+0x10>
 8009b0a:	e000      	b.n	8009b0e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009b0c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d132      	bne.n	8009b7a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b14:	2300      	movs	r3, #0
 8009b16:	60fb      	str	r3, [r7, #12]
 8009b18:	e002      	b.n	8009b20 <inc_lock+0x6c>
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	60fb      	str	r3, [r7, #12]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d806      	bhi.n	8009b34 <inc_lock+0x80>
 8009b26:	4a29      	ldr	r2, [pc, #164]	@ (8009bcc <inc_lock+0x118>)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	011b      	lsls	r3, r3, #4
 8009b2c:	4413      	add	r3, r2
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1f2      	bne.n	8009b1a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d101      	bne.n	8009b3e <inc_lock+0x8a>
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	e040      	b.n	8009bc0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	4922      	ldr	r1, [pc, #136]	@ (8009bcc <inc_lock+0x118>)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	011b      	lsls	r3, r3, #4
 8009b48:	440b      	add	r3, r1
 8009b4a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	689a      	ldr	r2, [r3, #8]
 8009b50:	491e      	ldr	r1, [pc, #120]	@ (8009bcc <inc_lock+0x118>)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	011b      	lsls	r3, r3, #4
 8009b56:	440b      	add	r3, r1
 8009b58:	3304      	adds	r3, #4
 8009b5a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	695a      	ldr	r2, [r3, #20]
 8009b60:	491a      	ldr	r1, [pc, #104]	@ (8009bcc <inc_lock+0x118>)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	011b      	lsls	r3, r3, #4
 8009b66:	440b      	add	r3, r1
 8009b68:	3308      	adds	r3, #8
 8009b6a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009b6c:	4a17      	ldr	r2, [pc, #92]	@ (8009bcc <inc_lock+0x118>)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	011b      	lsls	r3, r3, #4
 8009b72:	4413      	add	r3, r2
 8009b74:	330c      	adds	r3, #12
 8009b76:	2200      	movs	r2, #0
 8009b78:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d009      	beq.n	8009b94 <inc_lock+0xe0>
 8009b80:	4a12      	ldr	r2, [pc, #72]	@ (8009bcc <inc_lock+0x118>)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	011b      	lsls	r3, r3, #4
 8009b86:	4413      	add	r3, r2
 8009b88:	330c      	adds	r3, #12
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <inc_lock+0xe0>
 8009b90:	2300      	movs	r3, #0
 8009b92:	e015      	b.n	8009bc0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d108      	bne.n	8009bac <inc_lock+0xf8>
 8009b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8009bcc <inc_lock+0x118>)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	011b      	lsls	r3, r3, #4
 8009ba0:	4413      	add	r3, r2
 8009ba2:	330c      	adds	r3, #12
 8009ba4:	881b      	ldrh	r3, [r3, #0]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	e001      	b.n	8009bb0 <inc_lock+0xfc>
 8009bac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009bb0:	4906      	ldr	r1, [pc, #24]	@ (8009bcc <inc_lock+0x118>)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	011b      	lsls	r3, r3, #4
 8009bb6:	440b      	add	r3, r1
 8009bb8:	330c      	adds	r3, #12
 8009bba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	3301      	adds	r3, #1
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	2000060c 	.word	0x2000060c

08009bd0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	607b      	str	r3, [r7, #4]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d825      	bhi.n	8009c30 <dec_lock+0x60>
		n = Files[i].ctr;
 8009be4:	4a17      	ldr	r2, [pc, #92]	@ (8009c44 <dec_lock+0x74>)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	011b      	lsls	r3, r3, #4
 8009bea:	4413      	add	r3, r2
 8009bec:	330c      	adds	r3, #12
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009bf2:	89fb      	ldrh	r3, [r7, #14]
 8009bf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bf8:	d101      	bne.n	8009bfe <dec_lock+0x2e>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009bfe:	89fb      	ldrh	r3, [r7, #14]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d002      	beq.n	8009c0a <dec_lock+0x3a>
 8009c04:	89fb      	ldrh	r3, [r7, #14]
 8009c06:	3b01      	subs	r3, #1
 8009c08:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8009c44 <dec_lock+0x74>)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	011b      	lsls	r3, r3, #4
 8009c10:	4413      	add	r3, r2
 8009c12:	330c      	adds	r3, #12
 8009c14:	89fa      	ldrh	r2, [r7, #14]
 8009c16:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009c18:	89fb      	ldrh	r3, [r7, #14]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d105      	bne.n	8009c2a <dec_lock+0x5a>
 8009c1e:	4a09      	ldr	r2, [pc, #36]	@ (8009c44 <dec_lock+0x74>)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	011b      	lsls	r3, r3, #4
 8009c24:	4413      	add	r3, r2
 8009c26:	2200      	movs	r2, #0
 8009c28:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	737b      	strb	r3, [r7, #13]
 8009c2e:	e001      	b.n	8009c34 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009c30:	2302      	movs	r3, #2
 8009c32:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009c34:	7b7b      	ldrb	r3, [r7, #13]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3714      	adds	r7, #20
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	2000060c 	.word	0x2000060c

08009c48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009c50:	2300      	movs	r3, #0
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	e010      	b.n	8009c78 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009c56:	4a0d      	ldr	r2, [pc, #52]	@ (8009c8c <clear_lock+0x44>)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	011b      	lsls	r3, r3, #4
 8009c5c:	4413      	add	r3, r2
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d105      	bne.n	8009c72 <clear_lock+0x2a>
 8009c66:	4a09      	ldr	r2, [pc, #36]	@ (8009c8c <clear_lock+0x44>)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	011b      	lsls	r3, r3, #4
 8009c6c:	4413      	add	r3, r2
 8009c6e:	2200      	movs	r2, #0
 8009c70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	3301      	adds	r3, #1
 8009c76:	60fb      	str	r3, [r7, #12]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d9eb      	bls.n	8009c56 <clear_lock+0xe>
	}
}
 8009c7e:	bf00      	nop
 8009c80:	bf00      	nop
 8009c82:	3714      	adds	r7, #20
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	2000060c 	.word	0x2000060c

08009c90 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	78db      	ldrb	r3, [r3, #3]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d034      	beq.n	8009d0e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	7858      	ldrb	r0, [r3, #1]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	697a      	ldr	r2, [r7, #20]
 8009cb8:	f7ff fd40 	bl	800973c <disk_write>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d002      	beq.n	8009cc8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	73fb      	strb	r3, [r7, #15]
 8009cc6:	e022      	b.n	8009d0e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	697a      	ldr	r2, [r7, #20]
 8009cd4:	1ad2      	subs	r2, r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d217      	bcs.n	8009d0e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	789b      	ldrb	r3, [r3, #2]
 8009ce2:	613b      	str	r3, [r7, #16]
 8009ce4:	e010      	b.n	8009d08 <sync_window+0x78>
					wsect += fs->fsize;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	4413      	add	r3, r2
 8009cee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	7858      	ldrb	r0, [r3, #1]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	f7ff fd1d 	bl	800973c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	3b01      	subs	r3, #1
 8009d06:	613b      	str	r3, [r7, #16]
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d8eb      	bhi.n	8009ce6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3718      	adds	r7, #24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d01b      	beq.n	8009d68 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f7ff ffad 	bl	8009c90 <sync_window>
 8009d36:	4603      	mov	r3, r0
 8009d38:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009d3a:	7bfb      	ldrb	r3, [r7, #15]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d113      	bne.n	8009d68 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	7858      	ldrb	r0, [r3, #1]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	683a      	ldr	r2, [r7, #0]
 8009d4e:	f7ff fcd5 	bl	80096fc <disk_read>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d004      	beq.n	8009d62 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009d58:	f04f 33ff 	mov.w	r3, #4294967295
 8009d5c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
	...

08009d74 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7ff ff87 	bl	8009c90 <sync_window>
 8009d82:	4603      	mov	r3, r0
 8009d84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009d86:	7bfb      	ldrb	r3, [r7, #15]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d158      	bne.n	8009e3e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	d148      	bne.n	8009e26 <sync_fs+0xb2>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	791b      	ldrb	r3, [r3, #4]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d144      	bne.n	8009e26 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	3330      	adds	r3, #48	@ 0x30
 8009da0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009da4:	2100      	movs	r1, #0
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7ff fda9 	bl	80098fe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	3330      	adds	r3, #48	@ 0x30
 8009db0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009db4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7ff fd38 	bl	800982e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	3330      	adds	r3, #48	@ 0x30
 8009dc2:	4921      	ldr	r1, [pc, #132]	@ (8009e48 <sync_fs+0xd4>)
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7ff fd4d 	bl	8009864 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	3330      	adds	r3, #48	@ 0x30
 8009dce:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009dd2:	491e      	ldr	r1, [pc, #120]	@ (8009e4c <sync_fs+0xd8>)
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7ff fd45 	bl	8009864 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	3330      	adds	r3, #48	@ 0x30
 8009dde:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	4619      	mov	r1, r3
 8009de8:	4610      	mov	r0, r2
 8009dea:	f7ff fd3b 	bl	8009864 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	3330      	adds	r3, #48	@ 0x30
 8009df2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	f7ff fd31 	bl	8009864 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	1c5a      	adds	r2, r3, #1
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	7858      	ldrb	r0, [r3, #1]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	f7ff fc8e 	bl	800973c <disk_write>
			fs->fsi_flag = 0;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	785b      	ldrb	r3, [r3, #1]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7ff fca4 	bl	800977c <disk_ioctl>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <sync_fs+0xca>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	41615252 	.word	0x41615252
 8009e4c:	61417272 	.word	0x61417272

08009e50 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	3b02      	subs	r3, #2
 8009e5e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	3b02      	subs	r3, #2
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d301      	bcc.n	8009e70 <clust2sect+0x20>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	e008      	b.n	8009e82 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	895b      	ldrh	r3, [r3, #10]
 8009e74:	461a      	mov	r2, r3
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	fb03 f202 	mul.w	r2, r3, r2
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e80:	4413      	add	r3, r2
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b086      	sub	sp, #24
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d904      	bls.n	8009eae <get_fat+0x20>
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	695b      	ldr	r3, [r3, #20]
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d302      	bcc.n	8009eb4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009eae:	2301      	movs	r3, #1
 8009eb0:	617b      	str	r3, [r7, #20]
 8009eb2:	e08e      	b.n	8009fd2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8009eb8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	d061      	beq.n	8009f86 <get_fat+0xf8>
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	dc7b      	bgt.n	8009fbe <get_fat+0x130>
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d002      	beq.n	8009ed0 <get_fat+0x42>
 8009eca:	2b02      	cmp	r3, #2
 8009ecc:	d041      	beq.n	8009f52 <get_fat+0xc4>
 8009ece:	e076      	b.n	8009fbe <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	085b      	lsrs	r3, r3, #1
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	4413      	add	r3, r2
 8009edc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	6a1a      	ldr	r2, [r3, #32]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	0a5b      	lsrs	r3, r3, #9
 8009ee6:	4413      	add	r3, r2
 8009ee8:	4619      	mov	r1, r3
 8009eea:	6938      	ldr	r0, [r7, #16]
 8009eec:	f7ff ff14 	bl	8009d18 <move_window>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d166      	bne.n	8009fc4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	1c5a      	adds	r2, r3, #1
 8009efa:	60fa      	str	r2, [r7, #12]
 8009efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	4413      	add	r3, r2
 8009f04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009f08:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	6a1a      	ldr	r2, [r3, #32]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	0a5b      	lsrs	r3, r3, #9
 8009f12:	4413      	add	r3, r2
 8009f14:	4619      	mov	r1, r3
 8009f16:	6938      	ldr	r0, [r7, #16]
 8009f18:	f7ff fefe 	bl	8009d18 <move_window>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d152      	bne.n	8009fc8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009f30:	021b      	lsls	r3, r3, #8
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	f003 0301 	and.w	r3, r3, #1
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <get_fat+0xba>
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	091b      	lsrs	r3, r3, #4
 8009f46:	e002      	b.n	8009f4e <get_fat+0xc0>
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f4e:	617b      	str	r3, [r7, #20]
			break;
 8009f50:	e03f      	b.n	8009fd2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	6a1a      	ldr	r2, [r3, #32]
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	0a1b      	lsrs	r3, r3, #8
 8009f5a:	4413      	add	r3, r2
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	6938      	ldr	r0, [r7, #16]
 8009f60:	f7ff feda 	bl	8009d18 <move_window>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d130      	bne.n	8009fcc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	005b      	lsls	r3, r3, #1
 8009f74:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009f78:	4413      	add	r3, r2
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7ff fc1c 	bl	80097b8 <ld_word>
 8009f80:	4603      	mov	r3, r0
 8009f82:	617b      	str	r3, [r7, #20]
			break;
 8009f84:	e025      	b.n	8009fd2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	6a1a      	ldr	r2, [r3, #32]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	09db      	lsrs	r3, r3, #7
 8009f8e:	4413      	add	r3, r2
 8009f90:	4619      	mov	r1, r3
 8009f92:	6938      	ldr	r0, [r7, #16]
 8009f94:	f7ff fec0 	bl	8009d18 <move_window>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d118      	bne.n	8009fd0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009fac:	4413      	add	r3, r2
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7ff fc1a 	bl	80097e8 <ld_dword>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009fba:	617b      	str	r3, [r7, #20]
			break;
 8009fbc:	e009      	b.n	8009fd2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	617b      	str	r3, [r7, #20]
 8009fc2:	e006      	b.n	8009fd2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009fc4:	bf00      	nop
 8009fc6:	e004      	b.n	8009fd2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009fc8:	bf00      	nop
 8009fca:	e002      	b.n	8009fd2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009fcc:	bf00      	nop
 8009fce:	e000      	b.n	8009fd2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009fd0:	bf00      	nop
		}
	}

	return val;
 8009fd2:	697b      	ldr	r3, [r7, #20]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009fdc:	b590      	push	{r4, r7, lr}
 8009fde:	b089      	sub	sp, #36	@ 0x24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009fe8:	2302      	movs	r3, #2
 8009fea:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	f240 80d9 	bls.w	800a1a6 <put_fat+0x1ca>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	695b      	ldr	r3, [r3, #20]
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	f080 80d3 	bcs.w	800a1a6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	2b03      	cmp	r3, #3
 800a006:	f000 8096 	beq.w	800a136 <put_fat+0x15a>
 800a00a:	2b03      	cmp	r3, #3
 800a00c:	f300 80cb 	bgt.w	800a1a6 <put_fat+0x1ca>
 800a010:	2b01      	cmp	r3, #1
 800a012:	d002      	beq.n	800a01a <put_fat+0x3e>
 800a014:	2b02      	cmp	r3, #2
 800a016:	d06e      	beq.n	800a0f6 <put_fat+0x11a>
 800a018:	e0c5      	b.n	800a1a6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	61bb      	str	r3, [r7, #24]
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	085b      	lsrs	r3, r3, #1
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	4413      	add	r3, r2
 800a026:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6a1a      	ldr	r2, [r3, #32]
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	0a5b      	lsrs	r3, r3, #9
 800a030:	4413      	add	r3, r2
 800a032:	4619      	mov	r1, r3
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f7ff fe6f 	bl	8009d18 <move_window>
 800a03a:	4603      	mov	r3, r0
 800a03c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a03e:	7ffb      	ldrb	r3, [r7, #31]
 800a040:	2b00      	cmp	r3, #0
 800a042:	f040 80a9 	bne.w	800a198 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	1c59      	adds	r1, r3, #1
 800a050:	61b9      	str	r1, [r7, #24]
 800a052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a056:	4413      	add	r3, r2
 800a058:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	f003 0301 	and.w	r3, r3, #1
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00d      	beq.n	800a080 <put_fat+0xa4>
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	b25b      	sxtb	r3, r3
 800a06a:	f003 030f 	and.w	r3, r3, #15
 800a06e:	b25a      	sxtb	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	b2db      	uxtb	r3, r3
 800a074:	011b      	lsls	r3, r3, #4
 800a076:	b25b      	sxtb	r3, r3
 800a078:	4313      	orrs	r3, r2
 800a07a:	b25b      	sxtb	r3, r3
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	e001      	b.n	800a084 <put_fat+0xa8>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	b2db      	uxtb	r3, r3
 800a084:	697a      	ldr	r2, [r7, #20]
 800a086:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2201      	movs	r2, #1
 800a08c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	6a1a      	ldr	r2, [r3, #32]
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	0a5b      	lsrs	r3, r3, #9
 800a096:	4413      	add	r3, r2
 800a098:	4619      	mov	r1, r3
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f7ff fe3c 	bl	8009d18 <move_window>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a0a4:	7ffb      	ldrb	r3, [r7, #31]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d178      	bne.n	800a19c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0b6:	4413      	add	r3, r2
 800a0b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	f003 0301 	and.w	r3, r3, #1
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d003      	beq.n	800a0cc <put_fat+0xf0>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	091b      	lsrs	r3, r3, #4
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	e00e      	b.n	800a0ea <put_fat+0x10e>
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	b25b      	sxtb	r3, r3
 800a0d2:	f023 030f 	bic.w	r3, r3, #15
 800a0d6:	b25a      	sxtb	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	0a1b      	lsrs	r3, r3, #8
 800a0dc:	b25b      	sxtb	r3, r3
 800a0de:	f003 030f 	and.w	r3, r3, #15
 800a0e2:	b25b      	sxtb	r3, r3
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	b25b      	sxtb	r3, r3
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	697a      	ldr	r2, [r7, #20]
 800a0ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	70da      	strb	r2, [r3, #3]
			break;
 800a0f4:	e057      	b.n	800a1a6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6a1a      	ldr	r2, [r3, #32]
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	0a1b      	lsrs	r3, r3, #8
 800a0fe:	4413      	add	r3, r2
 800a100:	4619      	mov	r1, r3
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f7ff fe08 	bl	8009d18 <move_window>
 800a108:	4603      	mov	r3, r0
 800a10a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a10c:	7ffb      	ldrb	r3, [r7, #31]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d146      	bne.n	800a1a0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	005b      	lsls	r3, r3, #1
 800a11c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a120:	4413      	add	r3, r2
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	b292      	uxth	r2, r2
 800a126:	4611      	mov	r1, r2
 800a128:	4618      	mov	r0, r3
 800a12a:	f7ff fb80 	bl	800982e <st_word>
			fs->wflag = 1;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2201      	movs	r2, #1
 800a132:	70da      	strb	r2, [r3, #3]
			break;
 800a134:	e037      	b.n	800a1a6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6a1a      	ldr	r2, [r3, #32]
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	09db      	lsrs	r3, r3, #7
 800a13e:	4413      	add	r3, r2
 800a140:	4619      	mov	r1, r3
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f7ff fde8 	bl	8009d18 <move_window>
 800a148:	4603      	mov	r3, r0
 800a14a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a14c:	7ffb      	ldrb	r3, [r7, #31]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d128      	bne.n	800a1a4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a166:	4413      	add	r3, r2
 800a168:	4618      	mov	r0, r3
 800a16a:	f7ff fb3d 	bl	80097e8 <ld_dword>
 800a16e:	4603      	mov	r3, r0
 800a170:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a174:	4323      	orrs	r3, r4
 800a176:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a186:	4413      	add	r3, r2
 800a188:	6879      	ldr	r1, [r7, #4]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7ff fb6a 	bl	8009864 <st_dword>
			fs->wflag = 1;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2201      	movs	r2, #1
 800a194:	70da      	strb	r2, [r3, #3]
			break;
 800a196:	e006      	b.n	800a1a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a198:	bf00      	nop
 800a19a:	e004      	b.n	800a1a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a19c:	bf00      	nop
 800a19e:	e002      	b.n	800a1a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a1a0:	bf00      	nop
 800a1a2:	e000      	b.n	800a1a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a1a4:	bf00      	nop
		}
	}
	return res;
 800a1a6:	7ffb      	ldrb	r3, [r7, #31]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3724      	adds	r7, #36	@ 0x24
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd90      	pop	{r4, r7, pc}

0800a1b0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b088      	sub	sp, #32
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d904      	bls.n	800a1d6 <remove_chain+0x26>
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	695b      	ldr	r3, [r3, #20]
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d301      	bcc.n	800a1da <remove_chain+0x2a>
 800a1d6:	2302      	movs	r3, #2
 800a1d8:	e04b      	b.n	800a272 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00c      	beq.n	800a1fa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e4:	6879      	ldr	r1, [r7, #4]
 800a1e6:	69b8      	ldr	r0, [r7, #24]
 800a1e8:	f7ff fef8 	bl	8009fdc <put_fat>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a1f0:	7ffb      	ldrb	r3, [r7, #31]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <remove_chain+0x4a>
 800a1f6:	7ffb      	ldrb	r3, [r7, #31]
 800a1f8:	e03b      	b.n	800a272 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a1fa:	68b9      	ldr	r1, [r7, #8]
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f7ff fe46 	bl	8009e8e <get_fat>
 800a202:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d031      	beq.n	800a26e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d101      	bne.n	800a214 <remove_chain+0x64>
 800a210:	2302      	movs	r3, #2
 800a212:	e02e      	b.n	800a272 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21a:	d101      	bne.n	800a220 <remove_chain+0x70>
 800a21c:	2301      	movs	r3, #1
 800a21e:	e028      	b.n	800a272 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a220:	2200      	movs	r2, #0
 800a222:	68b9      	ldr	r1, [r7, #8]
 800a224:	69b8      	ldr	r0, [r7, #24]
 800a226:	f7ff fed9 	bl	8009fdc <put_fat>
 800a22a:	4603      	mov	r3, r0
 800a22c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a22e:	7ffb      	ldrb	r3, [r7, #31]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <remove_chain+0x88>
 800a234:	7ffb      	ldrb	r3, [r7, #31]
 800a236:	e01c      	b.n	800a272 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	691a      	ldr	r2, [r3, #16]
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	695b      	ldr	r3, [r3, #20]
 800a240:	3b02      	subs	r3, #2
 800a242:	429a      	cmp	r2, r3
 800a244:	d20b      	bcs.n	800a25e <remove_chain+0xae>
			fs->free_clst++;
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	1c5a      	adds	r2, r3, #1
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	791b      	ldrb	r3, [r3, #4]
 800a254:	f043 0301 	orr.w	r3, r3, #1
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	695b      	ldr	r3, [r3, #20]
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d3c6      	bcc.n	800a1fa <remove_chain+0x4a>
 800a26c:	e000      	b.n	800a270 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a26e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3720      	adds	r7, #32
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b088      	sub	sp, #32
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10d      	bne.n	800a2ac <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d004      	beq.n	800a2a6 <create_chain+0x2c>
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	695b      	ldr	r3, [r3, #20]
 800a2a0:	69ba      	ldr	r2, [r7, #24]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d31b      	bcc.n	800a2de <create_chain+0x64>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	61bb      	str	r3, [r7, #24]
 800a2aa:	e018      	b.n	800a2de <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a2ac:	6839      	ldr	r1, [r7, #0]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7ff fded 	bl	8009e8e <get_fat>
 800a2b4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d801      	bhi.n	800a2c0 <create_chain+0x46>
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e070      	b.n	800a3a2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c6:	d101      	bne.n	800a2cc <create_chain+0x52>
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	e06a      	b.n	800a3a2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	695b      	ldr	r3, [r3, #20]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d201      	bcs.n	800a2da <create_chain+0x60>
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	e063      	b.n	800a3a2 <create_chain+0x128>
		scl = clst;
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	69fa      	ldr	r2, [r7, #28]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d307      	bcc.n	800a302 <create_chain+0x88>
				ncl = 2;
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a2f6:	69fa      	ldr	r2, [r7, #28]
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d901      	bls.n	800a302 <create_chain+0x88>
 800a2fe:	2300      	movs	r3, #0
 800a300:	e04f      	b.n	800a3a2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a302:	69f9      	ldr	r1, [r7, #28]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f7ff fdc2 	bl	8009e8e <get_fat>
 800a30a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00e      	beq.n	800a330 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d003      	beq.n	800a320 <create_chain+0xa6>
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a31e:	d101      	bne.n	800a324 <create_chain+0xaa>
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	e03e      	b.n	800a3a2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a324:	69fa      	ldr	r2, [r7, #28]
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d1da      	bne.n	800a2e2 <create_chain+0x68>
 800a32c:	2300      	movs	r3, #0
 800a32e:	e038      	b.n	800a3a2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a330:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a332:	f04f 32ff 	mov.w	r2, #4294967295
 800a336:	69f9      	ldr	r1, [r7, #28]
 800a338:	6938      	ldr	r0, [r7, #16]
 800a33a:	f7ff fe4f 	bl	8009fdc <put_fat>
 800a33e:	4603      	mov	r3, r0
 800a340:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a342:	7dfb      	ldrb	r3, [r7, #23]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d109      	bne.n	800a35c <create_chain+0xe2>
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d006      	beq.n	800a35c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a34e:	69fa      	ldr	r2, [r7, #28]
 800a350:	6839      	ldr	r1, [r7, #0]
 800a352:	6938      	ldr	r0, [r7, #16]
 800a354:	f7ff fe42 	bl	8009fdc <put_fat>
 800a358:	4603      	mov	r3, r0
 800a35a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a35c:	7dfb      	ldrb	r3, [r7, #23]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d116      	bne.n	800a390 <create_chain+0x116>
		fs->last_clst = ncl;
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	69fa      	ldr	r2, [r7, #28]
 800a366:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	691a      	ldr	r2, [r3, #16]
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	3b02      	subs	r3, #2
 800a372:	429a      	cmp	r2, r3
 800a374:	d804      	bhi.n	800a380 <create_chain+0x106>
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	1e5a      	subs	r2, r3, #1
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	791b      	ldrb	r3, [r3, #4]
 800a384:	f043 0301 	orr.w	r3, r3, #1
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	711a      	strb	r2, [r3, #4]
 800a38e:	e007      	b.n	800a3a0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a390:	7dfb      	ldrb	r3, [r7, #23]
 800a392:	2b01      	cmp	r3, #1
 800a394:	d102      	bne.n	800a39c <create_chain+0x122>
 800a396:	f04f 33ff 	mov.w	r3, #4294967295
 800a39a:	e000      	b.n	800a39e <create_chain+0x124>
 800a39c:	2301      	movs	r3, #1
 800a39e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a3a0:	69fb      	ldr	r3, [r7, #28]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3720      	adds	r7, #32
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b087      	sub	sp, #28
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3be:	3304      	adds	r3, #4
 800a3c0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	0a5b      	lsrs	r3, r3, #9
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	8952      	ldrh	r2, [r2, #10]
 800a3ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3ce:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	1d1a      	adds	r2, r3, #4
 800a3d4:	613a      	str	r2, [r7, #16]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d101      	bne.n	800a3e4 <clmt_clust+0x3a>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	e010      	b.n	800a406 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a3e4:	697a      	ldr	r2, [r7, #20]
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d307      	bcc.n	800a3fc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a3ec:	697a      	ldr	r2, [r7, #20]
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	1ad3      	subs	r3, r2, r3
 800a3f2:	617b      	str	r3, [r7, #20]
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	3304      	adds	r3, #4
 800a3f8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a3fa:	e7e9      	b.n	800a3d0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a3fc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	4413      	add	r3, r2
}
 800a406:	4618      	mov	r0, r3
 800a408:	371c      	adds	r7, #28
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b086      	sub	sp, #24
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
 800a41a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a428:	d204      	bcs.n	800a434 <dir_sdi+0x22>
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	f003 031f 	and.w	r3, r3, #31
 800a430:	2b00      	cmp	r3, #0
 800a432:	d001      	beq.n	800a438 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a434:	2302      	movs	r3, #2
 800a436:	e063      	b.n	800a500 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	683a      	ldr	r2, [r7, #0]
 800a43c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d106      	bne.n	800a458 <dir_sdi+0x46>
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d902      	bls.n	800a458 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a456:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d10c      	bne.n	800a478 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	095b      	lsrs	r3, r3, #5
 800a462:	693a      	ldr	r2, [r7, #16]
 800a464:	8912      	ldrh	r2, [r2, #8]
 800a466:	4293      	cmp	r3, r2
 800a468:	d301      	bcc.n	800a46e <dir_sdi+0x5c>
 800a46a:	2302      	movs	r3, #2
 800a46c:	e048      	b.n	800a500 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	61da      	str	r2, [r3, #28]
 800a476:	e029      	b.n	800a4cc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	895b      	ldrh	r3, [r3, #10]
 800a47c:	025b      	lsls	r3, r3, #9
 800a47e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a480:	e019      	b.n	800a4b6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6979      	ldr	r1, [r7, #20]
 800a486:	4618      	mov	r0, r3
 800a488:	f7ff fd01 	bl	8009e8e <get_fat>
 800a48c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a494:	d101      	bne.n	800a49a <dir_sdi+0x88>
 800a496:	2301      	movs	r3, #1
 800a498:	e032      	b.n	800a500 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d904      	bls.n	800a4aa <dir_sdi+0x98>
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	695b      	ldr	r3, [r3, #20]
 800a4a4:	697a      	ldr	r2, [r7, #20]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d301      	bcc.n	800a4ae <dir_sdi+0x9c>
 800a4aa:	2302      	movs	r3, #2
 800a4ac:	e028      	b.n	800a500 <dir_sdi+0xee>
			ofs -= csz;
 800a4ae:	683a      	ldr	r2, [r7, #0]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d2e1      	bcs.n	800a482 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a4be:	6979      	ldr	r1, [r7, #20]
 800a4c0:	6938      	ldr	r0, [r7, #16]
 800a4c2:	f7ff fcc5 	bl	8009e50 <clust2sect>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	697a      	ldr	r2, [r7, #20]
 800a4d0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	69db      	ldr	r3, [r3, #28]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d101      	bne.n	800a4de <dir_sdi+0xcc>
 800a4da:	2302      	movs	r3, #2
 800a4dc:	e010      	b.n	800a500 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	69da      	ldr	r2, [r3, #28]
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	0a5b      	lsrs	r3, r3, #9
 800a4e6:	441a      	add	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4f8:	441a      	add	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	3718      	adds	r7, #24
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	695b      	ldr	r3, [r3, #20]
 800a51c:	3320      	adds	r3, #32
 800a51e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	69db      	ldr	r3, [r3, #28]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d003      	beq.n	800a530 <dir_next+0x28>
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a52e:	d301      	bcc.n	800a534 <dir_next+0x2c>
 800a530:	2304      	movs	r3, #4
 800a532:	e0aa      	b.n	800a68a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f040 8098 	bne.w	800a670 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	69db      	ldr	r3, [r3, #28]
 800a544:	1c5a      	adds	r2, r3, #1
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	699b      	ldr	r3, [r3, #24]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10b      	bne.n	800a56a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	095b      	lsrs	r3, r3, #5
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	8912      	ldrh	r2, [r2, #8]
 800a55a:	4293      	cmp	r3, r2
 800a55c:	f0c0 8088 	bcc.w	800a670 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	61da      	str	r2, [r3, #28]
 800a566:	2304      	movs	r3, #4
 800a568:	e08f      	b.n	800a68a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	0a5b      	lsrs	r3, r3, #9
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	8952      	ldrh	r2, [r2, #10]
 800a572:	3a01      	subs	r2, #1
 800a574:	4013      	ands	r3, r2
 800a576:	2b00      	cmp	r3, #0
 800a578:	d17a      	bne.n	800a670 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	699b      	ldr	r3, [r3, #24]
 800a580:	4619      	mov	r1, r3
 800a582:	4610      	mov	r0, r2
 800a584:	f7ff fc83 	bl	8009e8e <get_fat>
 800a588:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d801      	bhi.n	800a594 <dir_next+0x8c>
 800a590:	2302      	movs	r3, #2
 800a592:	e07a      	b.n	800a68a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a59a:	d101      	bne.n	800a5a0 <dir_next+0x98>
 800a59c:	2301      	movs	r3, #1
 800a59e:	e074      	b.n	800a68a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	695b      	ldr	r3, [r3, #20]
 800a5a4:	697a      	ldr	r2, [r7, #20]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d358      	bcc.n	800a65c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d104      	bne.n	800a5ba <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	61da      	str	r2, [r3, #28]
 800a5b6:	2304      	movs	r3, #4
 800a5b8:	e067      	b.n	800a68a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	4610      	mov	r0, r2
 800a5c4:	f7ff fe59 	bl	800a27a <create_chain>
 800a5c8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <dir_next+0xcc>
 800a5d0:	2307      	movs	r3, #7
 800a5d2:	e05a      	b.n	800a68a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d101      	bne.n	800a5de <dir_next+0xd6>
 800a5da:	2302      	movs	r3, #2
 800a5dc:	e055      	b.n	800a68a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e4:	d101      	bne.n	800a5ea <dir_next+0xe2>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e04f      	b.n	800a68a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f7ff fb50 	bl	8009c90 <sync_window>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d001      	beq.n	800a5fa <dir_next+0xf2>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e047      	b.n	800a68a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3330      	adds	r3, #48	@ 0x30
 800a5fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a602:	2100      	movs	r1, #0
 800a604:	4618      	mov	r0, r3
 800a606:	f7ff f97a 	bl	80098fe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a60a:	2300      	movs	r3, #0
 800a60c:	613b      	str	r3, [r7, #16]
 800a60e:	6979      	ldr	r1, [r7, #20]
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f7ff fc1d 	bl	8009e50 <clust2sect>
 800a616:	4602      	mov	r2, r0
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a61c:	e012      	b.n	800a644 <dir_next+0x13c>
						fs->wflag = 1;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2201      	movs	r2, #1
 800a622:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f7ff fb33 	bl	8009c90 <sync_window>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d001      	beq.n	800a634 <dir_next+0x12c>
 800a630:	2301      	movs	r3, #1
 800a632:	e02a      	b.n	800a68a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	3301      	adds	r3, #1
 800a638:	613b      	str	r3, [r7, #16]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a63e:	1c5a      	adds	r2, r3, #1
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	895b      	ldrh	r3, [r3, #10]
 800a648:	461a      	mov	r2, r3
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d3e6      	bcc.n	800a61e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	1ad2      	subs	r2, r2, r3
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a662:	6979      	ldr	r1, [r7, #20]
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f7ff fbf3 	bl	8009e50 <clust2sect>
 800a66a:	4602      	mov	r2, r0
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a682:	441a      	add	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3718      	adds	r7, #24
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b086      	sub	sp, #24
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f7ff feb4 	bl	800a412 <dir_sdi>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a6ae:	7dfb      	ldrb	r3, [r7, #23]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d12b      	bne.n	800a70c <dir_alloc+0x7a>
		n = 0;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	69db      	ldr	r3, [r3, #28]
 800a6bc:	4619      	mov	r1, r3
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f7ff fb2a 	bl	8009d18 <move_window>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a6c8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d11d      	bne.n	800a70a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a1b      	ldr	r3, [r3, #32]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	2be5      	cmp	r3, #229	@ 0xe5
 800a6d6:	d004      	beq.n	800a6e2 <dir_alloc+0x50>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a1b      	ldr	r3, [r3, #32]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d107      	bne.n	800a6f2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	613b      	str	r3, [r7, #16]
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d102      	bne.n	800a6f6 <dir_alloc+0x64>
 800a6f0:	e00c      	b.n	800a70c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a6f6:	2101      	movs	r1, #1
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f7ff ff05 	bl	800a508 <dir_next>
 800a6fe:	4603      	mov	r3, r0
 800a700:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a702:	7dfb      	ldrb	r3, [r7, #23]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d0d7      	beq.n	800a6b8 <dir_alloc+0x26>
 800a708:	e000      	b.n	800a70c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a70a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a70c:	7dfb      	ldrb	r3, [r7, #23]
 800a70e:	2b04      	cmp	r3, #4
 800a710:	d101      	bne.n	800a716 <dir_alloc+0x84>
 800a712:	2307      	movs	r3, #7
 800a714:	75fb      	strb	r3, [r7, #23]
	return res;
 800a716:	7dfb      	ldrb	r3, [r7, #23]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3718      	adds	r7, #24
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	331a      	adds	r3, #26
 800a72e:	4618      	mov	r0, r3
 800a730:	f7ff f842 	bl	80097b8 <ld_word>
 800a734:	4603      	mov	r3, r0
 800a736:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	2b03      	cmp	r3, #3
 800a73e:	d109      	bne.n	800a754 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	3314      	adds	r3, #20
 800a744:	4618      	mov	r0, r3
 800a746:	f7ff f837 	bl	80097b8 <ld_word>
 800a74a:	4603      	mov	r3, r0
 800a74c:	041b      	lsls	r3, r3, #16
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	4313      	orrs	r3, r2
 800a752:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a754:	68fb      	ldr	r3, [r7, #12]
}
 800a756:	4618      	mov	r0, r3
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b084      	sub	sp, #16
 800a762:	af00      	add	r7, sp, #0
 800a764:	60f8      	str	r0, [r7, #12]
 800a766:	60b9      	str	r1, [r7, #8]
 800a768:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	331a      	adds	r3, #26
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	b292      	uxth	r2, r2
 800a772:	4611      	mov	r1, r2
 800a774:	4618      	mov	r0, r3
 800a776:	f7ff f85a 	bl	800982e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d109      	bne.n	800a796 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	f103 0214 	add.w	r2, r3, #20
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	0c1b      	lsrs	r3, r3, #16
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	4619      	mov	r1, r3
 800a790:	4610      	mov	r0, r2
 800a792:	f7ff f84c 	bl	800982e <st_word>
	}
}
 800a796:	bf00      	nop
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b086      	sub	sp, #24
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f7ff fe2f 	bl	800a412 <dir_sdi>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a7b8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d001      	beq.n	800a7c2 <dir_find+0x24>
 800a7be:	7dfb      	ldrb	r3, [r7, #23]
 800a7c0:	e03e      	b.n	800a840 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	69db      	ldr	r3, [r3, #28]
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	6938      	ldr	r0, [r7, #16]
 800a7ca:	f7ff faa5 	bl	8009d18 <move_window>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a7d2:	7dfb      	ldrb	r3, [r7, #23]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d12f      	bne.n	800a838 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6a1b      	ldr	r3, [r3, #32]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d102      	bne.n	800a7ec <dir_find+0x4e>
 800a7e6:	2304      	movs	r3, #4
 800a7e8:	75fb      	strb	r3, [r7, #23]
 800a7ea:	e028      	b.n	800a83e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a1b      	ldr	r3, [r3, #32]
 800a7f0:	330b      	adds	r3, #11
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a1b      	ldr	r3, [r3, #32]
 800a802:	330b      	adds	r3, #11
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	f003 0308 	and.w	r3, r3, #8
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10a      	bne.n	800a824 <dir_find+0x86>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a18      	ldr	r0, [r3, #32]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	3324      	adds	r3, #36	@ 0x24
 800a816:	220b      	movs	r2, #11
 800a818:	4619      	mov	r1, r3
 800a81a:	f7ff f88b 	bl	8009934 <mem_cmp>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00b      	beq.n	800a83c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a824:	2100      	movs	r1, #0
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f7ff fe6e 	bl	800a508 <dir_next>
 800a82c:	4603      	mov	r3, r0
 800a82e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a830:	7dfb      	ldrb	r3, [r7, #23]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d0c5      	beq.n	800a7c2 <dir_find+0x24>
 800a836:	e002      	b.n	800a83e <dir_find+0xa0>
		if (res != FR_OK) break;
 800a838:	bf00      	nop
 800a83a:	e000      	b.n	800a83e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a83c:	bf00      	nop

	return res;
 800a83e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a856:	2101      	movs	r1, #1
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f7ff ff1a 	bl	800a692 <dir_alloc>
 800a85e:	4603      	mov	r3, r0
 800a860:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a862:	7bfb      	ldrb	r3, [r7, #15]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d11c      	bne.n	800a8a2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	69db      	ldr	r3, [r3, #28]
 800a86c:	4619      	mov	r1, r3
 800a86e:	68b8      	ldr	r0, [r7, #8]
 800a870:	f7ff fa52 	bl	8009d18 <move_window>
 800a874:	4603      	mov	r3, r0
 800a876:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a878:	7bfb      	ldrb	r3, [r7, #15]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d111      	bne.n	800a8a2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	2220      	movs	r2, #32
 800a884:	2100      	movs	r1, #0
 800a886:	4618      	mov	r0, r3
 800a888:	f7ff f839 	bl	80098fe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6a18      	ldr	r0, [r3, #32]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	3324      	adds	r3, #36	@ 0x24
 800a894:	220b      	movs	r2, #11
 800a896:	4619      	mov	r1, r3
 800a898:	f7ff f810 	bl	80098bc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b088      	sub	sp, #32
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	60fb      	str	r3, [r7, #12]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	3324      	adds	r3, #36	@ 0x24
 800a8c0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a8c2:	220b      	movs	r2, #11
 800a8c4:	2120      	movs	r1, #32
 800a8c6:	68b8      	ldr	r0, [r7, #8]
 800a8c8:	f7ff f819 	bl	80098fe <mem_set>
	si = i = 0; ni = 8;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	613b      	str	r3, [r7, #16]
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	61fb      	str	r3, [r7, #28]
 800a8d4:	2308      	movs	r3, #8
 800a8d6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	1c5a      	adds	r2, r3, #1
 800a8dc:	61fa      	str	r2, [r7, #28]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a8e6:	7efb      	ldrb	r3, [r7, #27]
 800a8e8:	2b20      	cmp	r3, #32
 800a8ea:	d94e      	bls.n	800a98a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a8ec:	7efb      	ldrb	r3, [r7, #27]
 800a8ee:	2b2f      	cmp	r3, #47	@ 0x2f
 800a8f0:	d006      	beq.n	800a900 <create_name+0x54>
 800a8f2:	7efb      	ldrb	r3, [r7, #27]
 800a8f4:	2b5c      	cmp	r3, #92	@ 0x5c
 800a8f6:	d110      	bne.n	800a91a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a8f8:	e002      	b.n	800a900 <create_name+0x54>
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	61fb      	str	r3, [r7, #28]
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	4413      	add	r3, r2
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	2b2f      	cmp	r3, #47	@ 0x2f
 800a90a:	d0f6      	beq.n	800a8fa <create_name+0x4e>
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	4413      	add	r3, r2
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	2b5c      	cmp	r3, #92	@ 0x5c
 800a916:	d0f0      	beq.n	800a8fa <create_name+0x4e>
			break;
 800a918:	e038      	b.n	800a98c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a91a:	7efb      	ldrb	r3, [r7, #27]
 800a91c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a91e:	d003      	beq.n	800a928 <create_name+0x7c>
 800a920:	693a      	ldr	r2, [r7, #16]
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	429a      	cmp	r2, r3
 800a926:	d30c      	bcc.n	800a942 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	2b0b      	cmp	r3, #11
 800a92c:	d002      	beq.n	800a934 <create_name+0x88>
 800a92e:	7efb      	ldrb	r3, [r7, #27]
 800a930:	2b2e      	cmp	r3, #46	@ 0x2e
 800a932:	d001      	beq.n	800a938 <create_name+0x8c>
 800a934:	2306      	movs	r3, #6
 800a936:	e044      	b.n	800a9c2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a938:	2308      	movs	r3, #8
 800a93a:	613b      	str	r3, [r7, #16]
 800a93c:	230b      	movs	r3, #11
 800a93e:	617b      	str	r3, [r7, #20]
			continue;
 800a940:	e022      	b.n	800a988 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a942:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a946:	2b00      	cmp	r3, #0
 800a948:	da04      	bge.n	800a954 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a94a:	7efb      	ldrb	r3, [r7, #27]
 800a94c:	3b80      	subs	r3, #128	@ 0x80
 800a94e:	4a1f      	ldr	r2, [pc, #124]	@ (800a9cc <create_name+0x120>)
 800a950:	5cd3      	ldrb	r3, [r2, r3]
 800a952:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a954:	7efb      	ldrb	r3, [r7, #27]
 800a956:	4619      	mov	r1, r3
 800a958:	481d      	ldr	r0, [pc, #116]	@ (800a9d0 <create_name+0x124>)
 800a95a:	f7ff f812 	bl	8009982 <chk_chr>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d001      	beq.n	800a968 <create_name+0xbc>
 800a964:	2306      	movs	r3, #6
 800a966:	e02c      	b.n	800a9c2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a968:	7efb      	ldrb	r3, [r7, #27]
 800a96a:	2b60      	cmp	r3, #96	@ 0x60
 800a96c:	d905      	bls.n	800a97a <create_name+0xce>
 800a96e:	7efb      	ldrb	r3, [r7, #27]
 800a970:	2b7a      	cmp	r3, #122	@ 0x7a
 800a972:	d802      	bhi.n	800a97a <create_name+0xce>
 800a974:	7efb      	ldrb	r3, [r7, #27]
 800a976:	3b20      	subs	r3, #32
 800a978:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	1c5a      	adds	r2, r3, #1
 800a97e:	613a      	str	r2, [r7, #16]
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	4413      	add	r3, r2
 800a984:	7efa      	ldrb	r2, [r7, #27]
 800a986:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a988:	e7a6      	b.n	800a8d8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a98a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	441a      	add	r2, r3
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d101      	bne.n	800a9a0 <create_name+0xf4>
 800a99c:	2306      	movs	r3, #6
 800a99e:	e010      	b.n	800a9c2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	2be5      	cmp	r3, #229	@ 0xe5
 800a9a6:	d102      	bne.n	800a9ae <create_name+0x102>
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	2205      	movs	r2, #5
 800a9ac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a9ae:	7efb      	ldrb	r3, [r7, #27]
 800a9b0:	2b20      	cmp	r3, #32
 800a9b2:	d801      	bhi.n	800a9b8 <create_name+0x10c>
 800a9b4:	2204      	movs	r2, #4
 800a9b6:	e000      	b.n	800a9ba <create_name+0x10e>
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	330b      	adds	r3, #11
 800a9be:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a9c0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3720      	adds	r7, #32
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	08010664 	.word	0x08010664
 800a9d0:	080105c4 	.word	0x080105c4

0800a9d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b086      	sub	sp, #24
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a9e8:	e002      	b.n	800a9f0 <follow_path+0x1c>
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	603b      	str	r3, [r7, #0]
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	2b2f      	cmp	r3, #47	@ 0x2f
 800a9f6:	d0f8      	beq.n	800a9ea <follow_path+0x16>
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	2b5c      	cmp	r3, #92	@ 0x5c
 800a9fe:	d0f4      	beq.n	800a9ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	2200      	movs	r2, #0
 800aa04:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	2b1f      	cmp	r3, #31
 800aa0c:	d80a      	bhi.n	800aa24 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2280      	movs	r2, #128	@ 0x80
 800aa12:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800aa16:	2100      	movs	r1, #0
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f7ff fcfa 	bl	800a412 <dir_sdi>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	75fb      	strb	r3, [r7, #23]
 800aa22:	e043      	b.n	800aaac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aa24:	463b      	mov	r3, r7
 800aa26:	4619      	mov	r1, r3
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f7ff ff3f 	bl	800a8ac <create_name>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aa32:	7dfb      	ldrb	r3, [r7, #23]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d134      	bne.n	800aaa2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f7ff feb0 	bl	800a79e <dir_find>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800aa48:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00a      	beq.n	800aa66 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	2b04      	cmp	r3, #4
 800aa54:	d127      	bne.n	800aaa6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aa56:	7afb      	ldrb	r3, [r7, #11]
 800aa58:	f003 0304 	and.w	r3, r3, #4
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d122      	bne.n	800aaa6 <follow_path+0xd2>
 800aa60:	2305      	movs	r3, #5
 800aa62:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800aa64:	e01f      	b.n	800aaa6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aa66:	7afb      	ldrb	r3, [r7, #11]
 800aa68:	f003 0304 	and.w	r3, r3, #4
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d11c      	bne.n	800aaaa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	799b      	ldrb	r3, [r3, #6]
 800aa74:	f003 0310 	and.w	r3, r3, #16
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d102      	bne.n	800aa82 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800aa7c:	2305      	movs	r3, #5
 800aa7e:	75fb      	strb	r3, [r7, #23]
 800aa80:	e014      	b.n	800aaac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	695b      	ldr	r3, [r3, #20]
 800aa8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa90:	4413      	add	r3, r2
 800aa92:	4619      	mov	r1, r3
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	f7ff fe43 	bl	800a720 <ld_clust>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aaa0:	e7c0      	b.n	800aa24 <follow_path+0x50>
			if (res != FR_OK) break;
 800aaa2:	bf00      	nop
 800aaa4:	e002      	b.n	800aaac <follow_path+0xd8>
				break;
 800aaa6:	bf00      	nop
 800aaa8:	e000      	b.n	800aaac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aaaa:	bf00      	nop
			}
		}
	}

	return res;
 800aaac:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3718      	adds	r7, #24
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b087      	sub	sp, #28
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800aabe:	f04f 33ff 	mov.w	r3, #4294967295
 800aac2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d031      	beq.n	800ab30 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	617b      	str	r3, [r7, #20]
 800aad2:	e002      	b.n	800aada <get_ldnumber+0x24>
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	3301      	adds	r3, #1
 800aad8:	617b      	str	r3, [r7, #20]
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	2b20      	cmp	r3, #32
 800aae0:	d903      	bls.n	800aaea <get_ldnumber+0x34>
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	2b3a      	cmp	r3, #58	@ 0x3a
 800aae8:	d1f4      	bne.n	800aad4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	2b3a      	cmp	r3, #58	@ 0x3a
 800aaf0:	d11c      	bne.n	800ab2c <get_ldnumber+0x76>
			tp = *path;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	1c5a      	adds	r2, r3, #1
 800aafc:	60fa      	str	r2, [r7, #12]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	3b30      	subs	r3, #48	@ 0x30
 800ab02:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	2b09      	cmp	r3, #9
 800ab08:	d80e      	bhi.n	800ab28 <get_ldnumber+0x72>
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d10a      	bne.n	800ab28 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d107      	bne.n	800ab28 <get_ldnumber+0x72>
					vol = (int)i;
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	617b      	str	r3, [r7, #20]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	697a      	ldr	r2, [r7, #20]
 800ab26:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	e002      	b.n	800ab32 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ab30:	693b      	ldr	r3, [r7, #16]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	371c      	adds	r7, #28
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
	...

0800ab40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	70da      	strb	r2, [r3, #3]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f04f 32ff 	mov.w	r2, #4294967295
 800ab56:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f7ff f8dc 	bl	8009d18 <move_window>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <check_fs+0x2a>
 800ab66:	2304      	movs	r3, #4
 800ab68:	e038      	b.n	800abdc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	3330      	adds	r3, #48	@ 0x30
 800ab6e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7fe fe20 	bl	80097b8 <ld_word>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d001      	beq.n	800ab88 <check_fs+0x48>
 800ab84:	2303      	movs	r3, #3
 800ab86:	e029      	b.n	800abdc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ab8e:	2be9      	cmp	r3, #233	@ 0xe9
 800ab90:	d009      	beq.n	800aba6 <check_fs+0x66>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ab98:	2beb      	cmp	r3, #235	@ 0xeb
 800ab9a:	d11e      	bne.n	800abda <check_fs+0x9a>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800aba2:	2b90      	cmp	r3, #144	@ 0x90
 800aba4:	d119      	bne.n	800abda <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	3330      	adds	r3, #48	@ 0x30
 800abaa:	3336      	adds	r3, #54	@ 0x36
 800abac:	4618      	mov	r0, r3
 800abae:	f7fe fe1b 	bl	80097e8 <ld_dword>
 800abb2:	4603      	mov	r3, r0
 800abb4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800abb8:	4a0a      	ldr	r2, [pc, #40]	@ (800abe4 <check_fs+0xa4>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d101      	bne.n	800abc2 <check_fs+0x82>
 800abbe:	2300      	movs	r3, #0
 800abc0:	e00c      	b.n	800abdc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	3330      	adds	r3, #48	@ 0x30
 800abc6:	3352      	adds	r3, #82	@ 0x52
 800abc8:	4618      	mov	r0, r3
 800abca:	f7fe fe0d 	bl	80097e8 <ld_dword>
 800abce:	4603      	mov	r3, r0
 800abd0:	4a05      	ldr	r2, [pc, #20]	@ (800abe8 <check_fs+0xa8>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d101      	bne.n	800abda <check_fs+0x9a>
 800abd6:	2300      	movs	r3, #0
 800abd8:	e000      	b.n	800abdc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800abda:	2302      	movs	r3, #2
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	00544146 	.word	0x00544146
 800abe8:	33544146 	.word	0x33544146

0800abec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b096      	sub	sp, #88	@ 0x58
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	4613      	mov	r3, r2
 800abf8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2200      	movs	r2, #0
 800abfe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f7ff ff58 	bl	800aab6 <get_ldnumber>
 800ac06:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ac08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	da01      	bge.n	800ac12 <find_volume+0x26>
 800ac0e:	230b      	movs	r3, #11
 800ac10:	e22d      	b.n	800b06e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ac12:	4aa1      	ldr	r2, [pc, #644]	@ (800ae98 <find_volume+0x2ac>)
 800ac14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac1a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ac1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <find_volume+0x3a>
 800ac22:	230c      	movs	r3, #12
 800ac24:	e223      	b.n	800b06e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac2a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ac2c:	79fb      	ldrb	r3, [r7, #7]
 800ac2e:	f023 0301 	bic.w	r3, r3, #1
 800ac32:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ac34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d01a      	beq.n	800ac72 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ac3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3e:	785b      	ldrb	r3, [r3, #1]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fe fd1b 	bl	800967c <disk_status>
 800ac46:	4603      	mov	r3, r0
 800ac48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ac4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ac50:	f003 0301 	and.w	r3, r3, #1
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10c      	bne.n	800ac72 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ac58:	79fb      	ldrb	r3, [r7, #7]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d007      	beq.n	800ac6e <find_volume+0x82>
 800ac5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ac62:	f003 0304 	and.w	r3, r3, #4
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d001      	beq.n	800ac6e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ac6a:	230a      	movs	r3, #10
 800ac6c:	e1ff      	b.n	800b06e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800ac6e:	2300      	movs	r3, #0
 800ac70:	e1fd      	b.n	800b06e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ac72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac74:	2200      	movs	r2, #0
 800ac76:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ac78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ac80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac82:	785b      	ldrb	r3, [r3, #1]
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7fe fd13 	bl	80096b0 <disk_initialize>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ac90:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ac94:	f003 0301 	and.w	r3, r3, #1
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d001      	beq.n	800aca0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	e1e6      	b.n	800b06e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800aca0:	79fb      	ldrb	r3, [r7, #7]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d007      	beq.n	800acb6 <find_volume+0xca>
 800aca6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800acaa:	f003 0304 	and.w	r3, r3, #4
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d001      	beq.n	800acb6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800acb2:	230a      	movs	r3, #10
 800acb4:	e1db      	b.n	800b06e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800acb6:	2300      	movs	r3, #0
 800acb8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800acba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800acbc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800acbe:	f7ff ff3f 	bl	800ab40 <check_fs>
 800acc2:	4603      	mov	r3, r0
 800acc4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800acc8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800accc:	2b02      	cmp	r3, #2
 800acce:	d149      	bne.n	800ad64 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800acd0:	2300      	movs	r3, #0
 800acd2:	643b      	str	r3, [r7, #64]	@ 0x40
 800acd4:	e01e      	b.n	800ad14 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800acd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800acdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acde:	011b      	lsls	r3, r3, #4
 800ace0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ace4:	4413      	add	r3, r2
 800ace6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ace8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acea:	3304      	adds	r3, #4
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d006      	beq.n	800ad00 <find_volume+0x114>
 800acf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf4:	3308      	adds	r3, #8
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7fe fd76 	bl	80097e8 <ld_dword>
 800acfc:	4602      	mov	r2, r0
 800acfe:	e000      	b.n	800ad02 <find_volume+0x116>
 800ad00:	2200      	movs	r2, #0
 800ad02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	3358      	adds	r3, #88	@ 0x58
 800ad08:	443b      	add	r3, r7
 800ad0a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ad0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad10:	3301      	adds	r3, #1
 800ad12:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad16:	2b03      	cmp	r3, #3
 800ad18:	d9dd      	bls.n	800acd6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ad1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d002      	beq.n	800ad2a <find_volume+0x13e>
 800ad24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad26:	3b01      	subs	r3, #1
 800ad28:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ad2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	3358      	adds	r3, #88	@ 0x58
 800ad30:	443b      	add	r3, r7
 800ad32:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ad36:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ad38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d005      	beq.n	800ad4a <find_volume+0x15e>
 800ad3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ad40:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ad42:	f7ff fefd 	bl	800ab40 <check_fs>
 800ad46:	4603      	mov	r3, r0
 800ad48:	e000      	b.n	800ad4c <find_volume+0x160>
 800ad4a:	2303      	movs	r3, #3
 800ad4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ad50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d905      	bls.n	800ad64 <find_volume+0x178>
 800ad58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad60:	2b03      	cmp	r3, #3
 800ad62:	d9e2      	bls.n	800ad2a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ad64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad68:	2b04      	cmp	r3, #4
 800ad6a:	d101      	bne.n	800ad70 <find_volume+0x184>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e17e      	b.n	800b06e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ad70:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d901      	bls.n	800ad7c <find_volume+0x190>
 800ad78:	230d      	movs	r3, #13
 800ad7a:	e178      	b.n	800b06e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ad7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad7e:	3330      	adds	r3, #48	@ 0x30
 800ad80:	330b      	adds	r3, #11
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fe fd18 	bl	80097b8 <ld_word>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad8e:	d001      	beq.n	800ad94 <find_volume+0x1a8>
 800ad90:	230d      	movs	r3, #13
 800ad92:	e16c      	b.n	800b06e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ad94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad96:	3330      	adds	r3, #48	@ 0x30
 800ad98:	3316      	adds	r3, #22
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7fe fd0c 	bl	80097b8 <ld_word>
 800ada0:	4603      	mov	r3, r0
 800ada2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ada4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d106      	bne.n	800adb8 <find_volume+0x1cc>
 800adaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adac:	3330      	adds	r3, #48	@ 0x30
 800adae:	3324      	adds	r3, #36	@ 0x24
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7fe fd19 	bl	80097e8 <ld_dword>
 800adb6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800adb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800adbc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800adbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800adc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800adc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adca:	789b      	ldrb	r3, [r3, #2]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d005      	beq.n	800addc <find_volume+0x1f0>
 800add0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add2:	789b      	ldrb	r3, [r3, #2]
 800add4:	2b02      	cmp	r3, #2
 800add6:	d001      	beq.n	800addc <find_volume+0x1f0>
 800add8:	230d      	movs	r3, #13
 800adda:	e148      	b.n	800b06e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800addc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adde:	789b      	ldrb	r3, [r3, #2]
 800ade0:	461a      	mov	r2, r3
 800ade2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ade4:	fb02 f303 	mul.w	r3, r2, r3
 800ade8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800adea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800adf0:	461a      	mov	r2, r3
 800adf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800adf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf8:	895b      	ldrh	r3, [r3, #10]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d008      	beq.n	800ae10 <find_volume+0x224>
 800adfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae00:	895b      	ldrh	r3, [r3, #10]
 800ae02:	461a      	mov	r2, r3
 800ae04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae06:	895b      	ldrh	r3, [r3, #10]
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d001      	beq.n	800ae14 <find_volume+0x228>
 800ae10:	230d      	movs	r3, #13
 800ae12:	e12c      	b.n	800b06e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ae14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae16:	3330      	adds	r3, #48	@ 0x30
 800ae18:	3311      	adds	r3, #17
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fe fccc 	bl	80097b8 <ld_word>
 800ae20:	4603      	mov	r3, r0
 800ae22:	461a      	mov	r2, r3
 800ae24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae26:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ae28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae2a:	891b      	ldrh	r3, [r3, #8]
 800ae2c:	f003 030f 	and.w	r3, r3, #15
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d001      	beq.n	800ae3a <find_volume+0x24e>
 800ae36:	230d      	movs	r3, #13
 800ae38:	e119      	b.n	800b06e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ae3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae3c:	3330      	adds	r3, #48	@ 0x30
 800ae3e:	3313      	adds	r3, #19
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fe fcb9 	bl	80097b8 <ld_word>
 800ae46:	4603      	mov	r3, r0
 800ae48:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ae4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d106      	bne.n	800ae5e <find_volume+0x272>
 800ae50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae52:	3330      	adds	r3, #48	@ 0x30
 800ae54:	3320      	adds	r3, #32
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7fe fcc6 	bl	80097e8 <ld_dword>
 800ae5c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae60:	3330      	adds	r3, #48	@ 0x30
 800ae62:	330e      	adds	r3, #14
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7fe fca7 	bl	80097b8 <ld_word>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ae6e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d101      	bne.n	800ae78 <find_volume+0x28c>
 800ae74:	230d      	movs	r3, #13
 800ae76:	e0fa      	b.n	800b06e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ae78:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ae7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae7c:	4413      	add	r3, r2
 800ae7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ae80:	8912      	ldrh	r2, [r2, #8]
 800ae82:	0912      	lsrs	r2, r2, #4
 800ae84:	b292      	uxth	r2, r2
 800ae86:	4413      	add	r3, r2
 800ae88:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ae8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d204      	bcs.n	800ae9c <find_volume+0x2b0>
 800ae92:	230d      	movs	r3, #13
 800ae94:	e0eb      	b.n	800b06e <find_volume+0x482>
 800ae96:	bf00      	nop
 800ae98:	20000604 	.word	0x20000604
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ae9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea0:	1ad3      	subs	r3, r2, r3
 800aea2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aea4:	8952      	ldrh	r2, [r2, #10]
 800aea6:	fbb3 f3f2 	udiv	r3, r3, r2
 800aeaa:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800aeac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d101      	bne.n	800aeb6 <find_volume+0x2ca>
 800aeb2:	230d      	movs	r3, #13
 800aeb4:	e0db      	b.n	800b06e <find_volume+0x482>
		fmt = FS_FAT32;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800aebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aebe:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d802      	bhi.n	800aecc <find_volume+0x2e0>
 800aec6:	2302      	movs	r3, #2
 800aec8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800aecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aece:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d802      	bhi.n	800aedc <find_volume+0x2f0>
 800aed6:	2301      	movs	r3, #1
 800aed8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800aedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aede:	1c9a      	adds	r2, r3, #2
 800aee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800aee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aee8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800aeea:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800aeec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aeee:	441a      	add	r2, r3
 800aef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800aef4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef8:	441a      	add	r2, r3
 800aefa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aefc:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800aefe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800af02:	2b03      	cmp	r3, #3
 800af04:	d11e      	bne.n	800af44 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800af06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af08:	3330      	adds	r3, #48	@ 0x30
 800af0a:	332a      	adds	r3, #42	@ 0x2a
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7fe fc53 	bl	80097b8 <ld_word>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d001      	beq.n	800af1c <find_volume+0x330>
 800af18:	230d      	movs	r3, #13
 800af1a:	e0a8      	b.n	800b06e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800af1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1e:	891b      	ldrh	r3, [r3, #8]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d001      	beq.n	800af28 <find_volume+0x33c>
 800af24:	230d      	movs	r3, #13
 800af26:	e0a2      	b.n	800b06e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800af28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2a:	3330      	adds	r3, #48	@ 0x30
 800af2c:	332c      	adds	r3, #44	@ 0x2c
 800af2e:	4618      	mov	r0, r3
 800af30:	f7fe fc5a 	bl	80097e8 <ld_dword>
 800af34:	4602      	mov	r2, r0
 800af36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af38:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800af3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af3c:	695b      	ldr	r3, [r3, #20]
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	647b      	str	r3, [r7, #68]	@ 0x44
 800af42:	e01f      	b.n	800af84 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800af44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af46:	891b      	ldrh	r3, [r3, #8]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d101      	bne.n	800af50 <find_volume+0x364>
 800af4c:	230d      	movs	r3, #13
 800af4e:	e08e      	b.n	800b06e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800af50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af52:	6a1a      	ldr	r2, [r3, #32]
 800af54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af56:	441a      	add	r2, r3
 800af58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af5a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800af5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800af60:	2b02      	cmp	r3, #2
 800af62:	d103      	bne.n	800af6c <find_volume+0x380>
 800af64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af66:	695b      	ldr	r3, [r3, #20]
 800af68:	005b      	lsls	r3, r3, #1
 800af6a:	e00a      	b.n	800af82 <find_volume+0x396>
 800af6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af6e:	695a      	ldr	r2, [r3, #20]
 800af70:	4613      	mov	r3, r2
 800af72:	005b      	lsls	r3, r3, #1
 800af74:	4413      	add	r3, r2
 800af76:	085a      	lsrs	r2, r3, #1
 800af78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af7a:	695b      	ldr	r3, [r3, #20]
 800af7c:	f003 0301 	and.w	r3, r3, #1
 800af80:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800af82:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800af84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af86:	699a      	ldr	r2, [r3, #24]
 800af88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af8a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800af8e:	0a5b      	lsrs	r3, r3, #9
 800af90:	429a      	cmp	r2, r3
 800af92:	d201      	bcs.n	800af98 <find_volume+0x3ac>
 800af94:	230d      	movs	r3, #13
 800af96:	e06a      	b.n	800b06e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800af98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af9a:	f04f 32ff 	mov.w	r2, #4294967295
 800af9e:	611a      	str	r2, [r3, #16]
 800afa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa2:	691a      	ldr	r2, [r3, #16]
 800afa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800afa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afaa:	2280      	movs	r2, #128	@ 0x80
 800afac:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800afae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800afb2:	2b03      	cmp	r3, #3
 800afb4:	d149      	bne.n	800b04a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800afb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb8:	3330      	adds	r3, #48	@ 0x30
 800afba:	3330      	adds	r3, #48	@ 0x30
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7fe fbfb 	bl	80097b8 <ld_word>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d140      	bne.n	800b04a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800afc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afca:	3301      	adds	r3, #1
 800afcc:	4619      	mov	r1, r3
 800afce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800afd0:	f7fe fea2 	bl	8009d18 <move_window>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d137      	bne.n	800b04a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800afda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afdc:	2200      	movs	r2, #0
 800afde:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800afe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe2:	3330      	adds	r3, #48	@ 0x30
 800afe4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800afe8:	4618      	mov	r0, r3
 800afea:	f7fe fbe5 	bl	80097b8 <ld_word>
 800afee:	4603      	mov	r3, r0
 800aff0:	461a      	mov	r2, r3
 800aff2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d127      	bne.n	800b04a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800affa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affc:	3330      	adds	r3, #48	@ 0x30
 800affe:	4618      	mov	r0, r3
 800b000:	f7fe fbf2 	bl	80097e8 <ld_dword>
 800b004:	4603      	mov	r3, r0
 800b006:	4a1c      	ldr	r2, [pc, #112]	@ (800b078 <find_volume+0x48c>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d11e      	bne.n	800b04a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b00e:	3330      	adds	r3, #48	@ 0x30
 800b010:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b014:	4618      	mov	r0, r3
 800b016:	f7fe fbe7 	bl	80097e8 <ld_dword>
 800b01a:	4603      	mov	r3, r0
 800b01c:	4a17      	ldr	r2, [pc, #92]	@ (800b07c <find_volume+0x490>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d113      	bne.n	800b04a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b024:	3330      	adds	r3, #48	@ 0x30
 800b026:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fe fbdc 	bl	80097e8 <ld_dword>
 800b030:	4602      	mov	r2, r0
 800b032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b034:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b038:	3330      	adds	r3, #48	@ 0x30
 800b03a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b03e:	4618      	mov	r0, r3
 800b040:	f7fe fbd2 	bl	80097e8 <ld_dword>
 800b044:	4602      	mov	r2, r0
 800b046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b048:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b050:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b052:	4b0b      	ldr	r3, [pc, #44]	@ (800b080 <find_volume+0x494>)
 800b054:	881b      	ldrh	r3, [r3, #0]
 800b056:	3301      	adds	r3, #1
 800b058:	b29a      	uxth	r2, r3
 800b05a:	4b09      	ldr	r3, [pc, #36]	@ (800b080 <find_volume+0x494>)
 800b05c:	801a      	strh	r2, [r3, #0]
 800b05e:	4b08      	ldr	r3, [pc, #32]	@ (800b080 <find_volume+0x494>)
 800b060:	881a      	ldrh	r2, [r3, #0]
 800b062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b064:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b066:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b068:	f7fe fdee 	bl	8009c48 <clear_lock>
#endif
	return FR_OK;
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3758      	adds	r7, #88	@ 0x58
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	41615252 	.word	0x41615252
 800b07c:	61417272 	.word	0x61417272
 800b080:	20000608 	.word	0x20000608

0800b084 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b08e:	2309      	movs	r3, #9
 800b090:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d01c      	beq.n	800b0d2 <validate+0x4e>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d018      	beq.n	800b0d2 <validate+0x4e>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d013      	beq.n	800b0d2 <validate+0x4e>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	889a      	ldrh	r2, [r3, #4]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	88db      	ldrh	r3, [r3, #6]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d10c      	bne.n	800b0d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	785b      	ldrb	r3, [r3, #1]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fe fadc 	bl	800967c <disk_status>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	f003 0301 	and.w	r3, r3, #1
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d101      	bne.n	800b0d2 <validate+0x4e>
			res = FR_OK;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d102      	bne.n	800b0de <validate+0x5a>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	e000      	b.n	800b0e0 <validate+0x5c>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	6013      	str	r3, [r2, #0]
	return res;
 800b0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
	...

0800b0f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b088      	sub	sp, #32
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b102:	f107 0310 	add.w	r3, r7, #16
 800b106:	4618      	mov	r0, r3
 800b108:	f7ff fcd5 	bl	800aab6 <get_ldnumber>
 800b10c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	2b00      	cmp	r3, #0
 800b112:	da01      	bge.n	800b118 <f_mount+0x28>
 800b114:	230b      	movs	r3, #11
 800b116:	e02b      	b.n	800b170 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b118:	4a17      	ldr	r2, [pc, #92]	@ (800b178 <f_mount+0x88>)
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b120:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d005      	beq.n	800b134 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b128:	69b8      	ldr	r0, [r7, #24]
 800b12a:	f7fe fd8d 	bl	8009c48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	2200      	movs	r2, #0
 800b132:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d002      	beq.n	800b140 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2200      	movs	r2, #0
 800b13e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	490d      	ldr	r1, [pc, #52]	@ (800b178 <f_mount+0x88>)
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <f_mount+0x66>
 800b150:	79fb      	ldrb	r3, [r7, #7]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d001      	beq.n	800b15a <f_mount+0x6a>
 800b156:	2300      	movs	r3, #0
 800b158:	e00a      	b.n	800b170 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b15a:	f107 010c 	add.w	r1, r7, #12
 800b15e:	f107 0308 	add.w	r3, r7, #8
 800b162:	2200      	movs	r2, #0
 800b164:	4618      	mov	r0, r3
 800b166:	f7ff fd41 	bl	800abec <find_volume>
 800b16a:	4603      	mov	r3, r0
 800b16c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b170:	4618      	mov	r0, r3
 800b172:	3720      	adds	r7, #32
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}
 800b178:	20000604 	.word	0x20000604

0800b17c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b098      	sub	sp, #96	@ 0x60
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	4613      	mov	r3, r2
 800b188:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d101      	bne.n	800b194 <f_open+0x18>
 800b190:	2309      	movs	r3, #9
 800b192:	e1a9      	b.n	800b4e8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b194:	79fb      	ldrb	r3, [r7, #7]
 800b196:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b19a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b19c:	79fa      	ldrb	r2, [r7, #7]
 800b19e:	f107 0110 	add.w	r1, r7, #16
 800b1a2:	f107 0308 	add.w	r3, r7, #8
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7ff fd20 	bl	800abec <find_volume>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800b1b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	f040 818d 	bne.w	800b4d6 <f_open+0x35a>
		dj.obj.fs = fs;
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b1c0:	68ba      	ldr	r2, [r7, #8]
 800b1c2:	f107 0314 	add.w	r3, r7, #20
 800b1c6:	4611      	mov	r1, r2
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7ff fc03 	bl	800a9d4 <follow_path>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b1d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d118      	bne.n	800b20e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b1dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b1e0:	b25b      	sxtb	r3, r3
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	da03      	bge.n	800b1ee <f_open+0x72>
				res = FR_INVALID_NAME;
 800b1e6:	2306      	movs	r3, #6
 800b1e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b1ec:	e00f      	b.n	800b20e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b1ee:	79fb      	ldrb	r3, [r7, #7]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	bf8c      	ite	hi
 800b1f4:	2301      	movhi	r3, #1
 800b1f6:	2300      	movls	r3, #0
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	f107 0314 	add.w	r3, r7, #20
 800b200:	4611      	mov	r1, r2
 800b202:	4618      	mov	r0, r3
 800b204:	f7fe fbd8 	bl	80099b8 <chk_lock>
 800b208:	4603      	mov	r3, r0
 800b20a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b20e:	79fb      	ldrb	r3, [r7, #7]
 800b210:	f003 031c 	and.w	r3, r3, #28
 800b214:	2b00      	cmp	r3, #0
 800b216:	d07f      	beq.n	800b318 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b218:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d017      	beq.n	800b250 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b220:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b224:	2b04      	cmp	r3, #4
 800b226:	d10e      	bne.n	800b246 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b228:	f7fe fc22 	bl	8009a70 <enq_lock>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d006      	beq.n	800b240 <f_open+0xc4>
 800b232:	f107 0314 	add.w	r3, r7, #20
 800b236:	4618      	mov	r0, r3
 800b238:	f7ff fb06 	bl	800a848 <dir_register>
 800b23c:	4603      	mov	r3, r0
 800b23e:	e000      	b.n	800b242 <f_open+0xc6>
 800b240:	2312      	movs	r3, #18
 800b242:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b246:	79fb      	ldrb	r3, [r7, #7]
 800b248:	f043 0308 	orr.w	r3, r3, #8
 800b24c:	71fb      	strb	r3, [r7, #7]
 800b24e:	e010      	b.n	800b272 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b250:	7ebb      	ldrb	r3, [r7, #26]
 800b252:	f003 0311 	and.w	r3, r3, #17
 800b256:	2b00      	cmp	r3, #0
 800b258:	d003      	beq.n	800b262 <f_open+0xe6>
					res = FR_DENIED;
 800b25a:	2307      	movs	r3, #7
 800b25c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b260:	e007      	b.n	800b272 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b262:	79fb      	ldrb	r3, [r7, #7]
 800b264:	f003 0304 	and.w	r3, r3, #4
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <f_open+0xf6>
 800b26c:	2308      	movs	r3, #8
 800b26e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b272:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b276:	2b00      	cmp	r3, #0
 800b278:	d168      	bne.n	800b34c <f_open+0x1d0>
 800b27a:	79fb      	ldrb	r3, [r7, #7]
 800b27c:	f003 0308 	and.w	r3, r3, #8
 800b280:	2b00      	cmp	r3, #0
 800b282:	d063      	beq.n	800b34c <f_open+0x1d0>
				dw = GET_FATTIME();
 800b284:	f7fe f874 	bl	8009370 <get_fattime>
 800b288:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b28a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b28c:	330e      	adds	r3, #14
 800b28e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b290:	4618      	mov	r0, r3
 800b292:	f7fe fae7 	bl	8009864 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b298:	3316      	adds	r3, #22
 800b29a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7fe fae1 	bl	8009864 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b2a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2a4:	330b      	adds	r3, #11
 800b2a6:	2220      	movs	r2, #32
 800b2a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2ae:	4611      	mov	r1, r2
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7ff fa35 	bl	800a720 <ld_clust>
 800b2b6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b2bc:	2200      	movs	r2, #0
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7ff fa4d 	bl	800a75e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b2c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2c6:	331c      	adds	r3, #28
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fe faca 	bl	8009864 <st_dword>
					fs->wflag = 1;
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b2d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d037      	beq.n	800b34c <f_open+0x1d0>
						dw = fs->winsect;
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b2e2:	f107 0314 	add.w	r3, r7, #20
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7fe ff60 	bl	800a1b0 <remove_chain>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800b2f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d126      	bne.n	800b34c <f_open+0x1d0>
							res = move_window(fs, dw);
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b302:	4618      	mov	r0, r3
 800b304:	f7fe fd08 	bl	8009d18 <move_window>
 800b308:	4603      	mov	r3, r0
 800b30a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b312:	3a01      	subs	r2, #1
 800b314:	60da      	str	r2, [r3, #12]
 800b316:	e019      	b.n	800b34c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b318:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d115      	bne.n	800b34c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b320:	7ebb      	ldrb	r3, [r7, #26]
 800b322:	f003 0310 	and.w	r3, r3, #16
 800b326:	2b00      	cmp	r3, #0
 800b328:	d003      	beq.n	800b332 <f_open+0x1b6>
					res = FR_NO_FILE;
 800b32a:	2304      	movs	r3, #4
 800b32c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b330:	e00c      	b.n	800b34c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b332:	79fb      	ldrb	r3, [r7, #7]
 800b334:	f003 0302 	and.w	r3, r3, #2
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d007      	beq.n	800b34c <f_open+0x1d0>
 800b33c:	7ebb      	ldrb	r3, [r7, #26]
 800b33e:	f003 0301 	and.w	r3, r3, #1
 800b342:	2b00      	cmp	r3, #0
 800b344:	d002      	beq.n	800b34c <f_open+0x1d0>
						res = FR_DENIED;
 800b346:	2307      	movs	r3, #7
 800b348:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b34c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b350:	2b00      	cmp	r3, #0
 800b352:	d126      	bne.n	800b3a2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b354:	79fb      	ldrb	r3, [r7, #7]
 800b356:	f003 0308 	and.w	r3, r3, #8
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d003      	beq.n	800b366 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b35e:	79fb      	ldrb	r3, [r7, #7]
 800b360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b364:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b36e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b374:	79fb      	ldrb	r3, [r7, #7]
 800b376:	2b01      	cmp	r3, #1
 800b378:	bf8c      	ite	hi
 800b37a:	2301      	movhi	r3, #1
 800b37c:	2300      	movls	r3, #0
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	461a      	mov	r2, r3
 800b382:	f107 0314 	add.w	r3, r7, #20
 800b386:	4611      	mov	r1, r2
 800b388:	4618      	mov	r0, r3
 800b38a:	f7fe fb93 	bl	8009ab4 <inc_lock>
 800b38e:	4602      	mov	r2, r0
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	691b      	ldr	r3, [r3, #16]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d102      	bne.n	800b3a2 <f_open+0x226>
 800b39c:	2302      	movs	r3, #2
 800b39e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b3a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	f040 8095 	bne.w	800b4d6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3b0:	4611      	mov	r1, r2
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7ff f9b4 	bl	800a720 <ld_clust>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b3be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3c0:	331c      	adds	r3, #28
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fe fa10 	bl	80097e8 <ld_dword>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	88da      	ldrh	r2, [r3, #6]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	79fa      	ldrb	r2, [r7, #7]
 800b3e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	3330      	adds	r3, #48	@ 0x30
 800b3fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b402:	2100      	movs	r1, #0
 800b404:	4618      	mov	r0, r3
 800b406:	f7fe fa7a 	bl	80098fe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b40a:	79fb      	ldrb	r3, [r7, #7]
 800b40c:	f003 0320 	and.w	r3, r3, #32
 800b410:	2b00      	cmp	r3, #0
 800b412:	d060      	beq.n	800b4d6 <f_open+0x35a>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d05c      	beq.n	800b4d6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	68da      	ldr	r2, [r3, #12]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	895b      	ldrh	r3, [r3, #10]
 800b428:	025b      	lsls	r3, r3, #9
 800b42a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	657b      	str	r3, [r7, #84]	@ 0x54
 800b438:	e016      	b.n	800b468 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fe fd25 	bl	8009e8e <get_fat>
 800b444:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b446:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d802      	bhi.n	800b452 <f_open+0x2d6>
 800b44c:	2302      	movs	r3, #2
 800b44e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b452:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b458:	d102      	bne.n	800b460 <f_open+0x2e4>
 800b45a:	2301      	movs	r3, #1
 800b45c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b460:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b464:	1ad3      	subs	r3, r2, r3
 800b466:	657b      	str	r3, [r7, #84]	@ 0x54
 800b468:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d103      	bne.n	800b478 <f_open+0x2fc>
 800b470:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b474:	429a      	cmp	r2, r3
 800b476:	d8e0      	bhi.n	800b43a <f_open+0x2be>
				}
				fp->clust = clst;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b47c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b47e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b482:	2b00      	cmp	r3, #0
 800b484:	d127      	bne.n	800b4d6 <f_open+0x35a>
 800b486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d022      	beq.n	800b4d6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b494:	4618      	mov	r0, r3
 800b496:	f7fe fcdb 	bl	8009e50 <clust2sect>
 800b49a:	6478      	str	r0, [r7, #68]	@ 0x44
 800b49c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d103      	bne.n	800b4aa <f_open+0x32e>
						res = FR_INT_ERR;
 800b4a2:	2302      	movs	r3, #2
 800b4a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b4a8:	e015      	b.n	800b4d6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b4aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4ac:	0a5a      	lsrs	r2, r3, #9
 800b4ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4b0:	441a      	add	r2, r3
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	7858      	ldrb	r0, [r3, #1]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6a1a      	ldr	r2, [r3, #32]
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	f7fe f919 	bl	80096fc <disk_read>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d002      	beq.n	800b4d6 <f_open+0x35a>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b4d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d002      	beq.n	800b4e4 <f_open+0x368>
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b4e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3760      	adds	r7, #96	@ 0x60
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b08c      	sub	sp, #48	@ 0x30
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
 800b4fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	2200      	movs	r2, #0
 800b506:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f107 0210 	add.w	r2, r7, #16
 800b50e:	4611      	mov	r1, r2
 800b510:	4618      	mov	r0, r3
 800b512:	f7ff fdb7 	bl	800b084 <validate>
 800b516:	4603      	mov	r3, r0
 800b518:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b51c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b520:	2b00      	cmp	r3, #0
 800b522:	d107      	bne.n	800b534 <f_write+0x44>
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	7d5b      	ldrb	r3, [r3, #21]
 800b528:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b52c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <f_write+0x4a>
 800b534:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b538:	e14b      	b.n	800b7d2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	7d1b      	ldrb	r3, [r3, #20]
 800b53e:	f003 0302 	and.w	r3, r3, #2
 800b542:	2b00      	cmp	r3, #0
 800b544:	d101      	bne.n	800b54a <f_write+0x5a>
 800b546:	2307      	movs	r3, #7
 800b548:	e143      	b.n	800b7d2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	699a      	ldr	r2, [r3, #24]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	441a      	add	r2, r3
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	699b      	ldr	r3, [r3, #24]
 800b556:	429a      	cmp	r2, r3
 800b558:	f080 812d 	bcs.w	800b7b6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	699b      	ldr	r3, [r3, #24]
 800b560:	43db      	mvns	r3, r3
 800b562:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b564:	e127      	b.n	800b7b6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	699b      	ldr	r3, [r3, #24]
 800b56a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56e:	2b00      	cmp	r3, #0
 800b570:	f040 80e3 	bne.w	800b73a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	0a5b      	lsrs	r3, r3, #9
 800b57a:	693a      	ldr	r2, [r7, #16]
 800b57c:	8952      	ldrh	r2, [r2, #10]
 800b57e:	3a01      	subs	r2, #1
 800b580:	4013      	ands	r3, r2
 800b582:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d143      	bne.n	800b612 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	699b      	ldr	r3, [r3, #24]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10c      	bne.n	800b5ac <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d11a      	bne.n	800b5d4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7fe fe69 	bl	800a27a <create_chain>
 800b5a8:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b5aa:	e013      	b.n	800b5d4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d007      	beq.n	800b5c4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	699b      	ldr	r3, [r3, #24]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f7fe fef5 	bl	800a3aa <clmt_clust>
 800b5c0:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b5c2:	e007      	b.n	800b5d4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	69db      	ldr	r3, [r3, #28]
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	4610      	mov	r0, r2
 800b5ce:	f7fe fe54 	bl	800a27a <create_chain>
 800b5d2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	f000 80f2 	beq.w	800b7c0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d104      	bne.n	800b5ec <f_write+0xfc>
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2202      	movs	r2, #2
 800b5e6:	755a      	strb	r2, [r3, #21]
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	e0f2      	b.n	800b7d2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f2:	d104      	bne.n	800b5fe <f_write+0x10e>
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	755a      	strb	r2, [r3, #21]
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e0e9      	b.n	800b7d2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b602:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d102      	bne.n	800b612 <f_write+0x122>
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b610:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	7d1b      	ldrb	r3, [r3, #20]
 800b616:	b25b      	sxtb	r3, r3
 800b618:	2b00      	cmp	r3, #0
 800b61a:	da18      	bge.n	800b64e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	7858      	ldrb	r0, [r3, #1]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	6a1a      	ldr	r2, [r3, #32]
 800b62a:	2301      	movs	r3, #1
 800b62c:	f7fe f886 	bl	800973c <disk_write>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d004      	beq.n	800b640 <f_write+0x150>
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2201      	movs	r2, #1
 800b63a:	755a      	strb	r2, [r3, #21]
 800b63c:	2301      	movs	r3, #1
 800b63e:	e0c8      	b.n	800b7d2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	7d1b      	ldrb	r3, [r3, #20]
 800b644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b648:	b2da      	uxtb	r2, r3
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b64e:	693a      	ldr	r2, [r7, #16]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	69db      	ldr	r3, [r3, #28]
 800b654:	4619      	mov	r1, r3
 800b656:	4610      	mov	r0, r2
 800b658:	f7fe fbfa 	bl	8009e50 <clust2sect>
 800b65c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d104      	bne.n	800b66e <f_write+0x17e>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2202      	movs	r2, #2
 800b668:	755a      	strb	r2, [r3, #21]
 800b66a:	2302      	movs	r3, #2
 800b66c:	e0b1      	b.n	800b7d2 <f_write+0x2e2>
			sect += csect;
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	4413      	add	r3, r2
 800b674:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	0a5b      	lsrs	r3, r3, #9
 800b67a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b67c:	6a3b      	ldr	r3, [r7, #32]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d03c      	beq.n	800b6fc <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b682:	69ba      	ldr	r2, [r7, #24]
 800b684:	6a3b      	ldr	r3, [r7, #32]
 800b686:	4413      	add	r3, r2
 800b688:	693a      	ldr	r2, [r7, #16]
 800b68a:	8952      	ldrh	r2, [r2, #10]
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d905      	bls.n	800b69c <f_write+0x1ac>
					cc = fs->csize - csect;
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	895b      	ldrh	r3, [r3, #10]
 800b694:	461a      	mov	r2, r3
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	1ad3      	subs	r3, r2, r3
 800b69a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	7858      	ldrb	r0, [r3, #1]
 800b6a0:	6a3b      	ldr	r3, [r7, #32]
 800b6a2:	697a      	ldr	r2, [r7, #20]
 800b6a4:	69f9      	ldr	r1, [r7, #28]
 800b6a6:	f7fe f849 	bl	800973c <disk_write>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d004      	beq.n	800b6ba <f_write+0x1ca>
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	755a      	strb	r2, [r3, #21]
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e08b      	b.n	800b7d2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6a1a      	ldr	r2, [r3, #32]
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	1ad3      	subs	r3, r2, r3
 800b6c2:	6a3a      	ldr	r2, [r7, #32]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d915      	bls.n	800b6f4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6a1a      	ldr	r2, [r3, #32]
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	025b      	lsls	r3, r3, #9
 800b6d8:	69fa      	ldr	r2, [r7, #28]
 800b6da:	4413      	add	r3, r2
 800b6dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	f7fe f8eb 	bl	80098bc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	7d1b      	ldrb	r3, [r3, #20]
 800b6ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6ee:	b2da      	uxtb	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b6f4:	6a3b      	ldr	r3, [r7, #32]
 800b6f6:	025b      	lsls	r3, r3, #9
 800b6f8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800b6fa:	e03f      	b.n	800b77c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6a1b      	ldr	r3, [r3, #32]
 800b700:	697a      	ldr	r2, [r7, #20]
 800b702:	429a      	cmp	r2, r3
 800b704:	d016      	beq.n	800b734 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	699a      	ldr	r2, [r3, #24]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b70e:	429a      	cmp	r2, r3
 800b710:	d210      	bcs.n	800b734 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	7858      	ldrb	r0, [r3, #1]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b71c:	2301      	movs	r3, #1
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	f7fd ffec 	bl	80096fc <disk_read>
 800b724:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b726:	2b00      	cmp	r3, #0
 800b728:	d004      	beq.n	800b734 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2201      	movs	r2, #1
 800b72e:	755a      	strb	r2, [r3, #21]
 800b730:	2301      	movs	r3, #1
 800b732:	e04e      	b.n	800b7d2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	697a      	ldr	r2, [r7, #20]
 800b738:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b742:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b746:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d901      	bls.n	800b754 <f_write+0x264>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b762:	4413      	add	r3, r2
 800b764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b766:	69f9      	ldr	r1, [r7, #28]
 800b768:	4618      	mov	r0, r3
 800b76a:	f7fe f8a7 	bl	80098bc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	7d1b      	ldrb	r3, [r3, #20]
 800b772:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b776:	b2da      	uxtb	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b77c:	69fa      	ldr	r2, [r7, #28]
 800b77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b780:	4413      	add	r3, r2
 800b782:	61fb      	str	r3, [r7, #28]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	699a      	ldr	r2, [r3, #24]
 800b788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b78a:	441a      	add	r2, r3
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	619a      	str	r2, [r3, #24]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	68da      	ldr	r2, [r3, #12]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	699b      	ldr	r3, [r3, #24]
 800b798:	429a      	cmp	r2, r3
 800b79a:	bf38      	it	cc
 800b79c:	461a      	movcc	r2, r3
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	60da      	str	r2, [r3, #12]
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a8:	441a      	add	r2, r3
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	601a      	str	r2, [r3, #0]
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b2:	1ad3      	subs	r3, r2, r3
 800b7b4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f47f aed4 	bne.w	800b566 <f_write+0x76>
 800b7be:	e000      	b.n	800b7c2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b7c0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	7d1b      	ldrb	r3, [r3, #20]
 800b7c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7ca:	b2da      	uxtb	r2, r3
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3730      	adds	r7, #48	@ 0x30
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b086      	sub	sp, #24
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f107 0208 	add.w	r2, r7, #8
 800b7e8:	4611      	mov	r1, r2
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7ff fc4a 	bl	800b084 <validate>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b7f4:	7dfb      	ldrb	r3, [r7, #23]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d168      	bne.n	800b8cc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	7d1b      	ldrb	r3, [r3, #20]
 800b7fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b802:	2b00      	cmp	r3, #0
 800b804:	d062      	beq.n	800b8cc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	7d1b      	ldrb	r3, [r3, #20]
 800b80a:	b25b      	sxtb	r3, r3
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	da15      	bge.n	800b83c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	7858      	ldrb	r0, [r3, #1]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a1a      	ldr	r2, [r3, #32]
 800b81e:	2301      	movs	r3, #1
 800b820:	f7fd ff8c 	bl	800973c <disk_write>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d001      	beq.n	800b82e <f_sync+0x54>
 800b82a:	2301      	movs	r3, #1
 800b82c:	e04f      	b.n	800b8ce <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	7d1b      	ldrb	r3, [r3, #20]
 800b832:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b836:	b2da      	uxtb	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b83c:	f7fd fd98 	bl	8009370 <get_fattime>
 800b840:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b848:	4619      	mov	r1, r3
 800b84a:	4610      	mov	r0, r2
 800b84c:	f7fe fa64 	bl	8009d18 <move_window>
 800b850:	4603      	mov	r3, r0
 800b852:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b854:	7dfb      	ldrb	r3, [r7, #23]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d138      	bne.n	800b8cc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b85e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	330b      	adds	r3, #11
 800b864:	781a      	ldrb	r2, [r3, #0]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	330b      	adds	r3, #11
 800b86a:	f042 0220 	orr.w	r2, r2, #32
 800b86e:	b2d2      	uxtb	r2, r2
 800b870:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6818      	ldr	r0, [r3, #0]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	461a      	mov	r2, r3
 800b87c:	68f9      	ldr	r1, [r7, #12]
 800b87e:	f7fe ff6e 	bl	800a75e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f103 021c 	add.w	r2, r3, #28
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	4619      	mov	r1, r3
 800b88e:	4610      	mov	r0, r2
 800b890:	f7fd ffe8 	bl	8009864 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	3316      	adds	r3, #22
 800b898:	6939      	ldr	r1, [r7, #16]
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fd ffe2 	bl	8009864 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	3312      	adds	r3, #18
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fd ffc1 	bl	800982e <st_word>
					fs->wflag = 1;
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7fe fa5d 	bl	8009d74 <sync_fs>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	7d1b      	ldrb	r3, [r3, #20]
 800b8c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8c6:	b2da      	uxtb	r2, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b8cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3718      	adds	r7, #24
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b084      	sub	sp, #16
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f7ff ff7b 	bl	800b7da <f_sync>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b8e8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d118      	bne.n	800b920 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f107 0208 	add.w	r2, r7, #8
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7ff fbc4 	bl	800b084 <validate>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b900:	7bfb      	ldrb	r3, [r7, #15]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d10c      	bne.n	800b920 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	691b      	ldr	r3, [r3, #16]
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7fe f960 	bl	8009bd0 <dec_lock>
 800b910:	4603      	mov	r3, r0
 800b912:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b914:	7bfb      	ldrb	r3, [r7, #15]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d102      	bne.n	800b920 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b920:	7bfb      	ldrb	r3, [r7, #15]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
	...

0800b92c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b087      	sub	sp, #28
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	4613      	mov	r3, r2
 800b938:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b93a:	2301      	movs	r3, #1
 800b93c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b93e:	2300      	movs	r3, #0
 800b940:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b942:	4b1f      	ldr	r3, [pc, #124]	@ (800b9c0 <FATFS_LinkDriverEx+0x94>)
 800b944:	7a5b      	ldrb	r3, [r3, #9]
 800b946:	b2db      	uxtb	r3, r3
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d131      	bne.n	800b9b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b94c:	4b1c      	ldr	r3, [pc, #112]	@ (800b9c0 <FATFS_LinkDriverEx+0x94>)
 800b94e:	7a5b      	ldrb	r3, [r3, #9]
 800b950:	b2db      	uxtb	r3, r3
 800b952:	461a      	mov	r2, r3
 800b954:	4b1a      	ldr	r3, [pc, #104]	@ (800b9c0 <FATFS_LinkDriverEx+0x94>)
 800b956:	2100      	movs	r1, #0
 800b958:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b95a:	4b19      	ldr	r3, [pc, #100]	@ (800b9c0 <FATFS_LinkDriverEx+0x94>)
 800b95c:	7a5b      	ldrb	r3, [r3, #9]
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	4a17      	ldr	r2, [pc, #92]	@ (800b9c0 <FATFS_LinkDriverEx+0x94>)
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	4413      	add	r3, r2
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b96a:	4b15      	ldr	r3, [pc, #84]	@ (800b9c0 <FATFS_LinkDriverEx+0x94>)
 800b96c:	7a5b      	ldrb	r3, [r3, #9]
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	461a      	mov	r2, r3
 800b972:	4b13      	ldr	r3, [pc, #76]	@ (800b9c0 <FATFS_LinkDriverEx+0x94>)
 800b974:	4413      	add	r3, r2
 800b976:	79fa      	ldrb	r2, [r7, #7]
 800b978:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b97a:	4b11      	ldr	r3, [pc, #68]	@ (800b9c0 <FATFS_LinkDriverEx+0x94>)
 800b97c:	7a5b      	ldrb	r3, [r3, #9]
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	1c5a      	adds	r2, r3, #1
 800b982:	b2d1      	uxtb	r1, r2
 800b984:	4a0e      	ldr	r2, [pc, #56]	@ (800b9c0 <FATFS_LinkDriverEx+0x94>)
 800b986:	7251      	strb	r1, [r2, #9]
 800b988:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b98a:	7dbb      	ldrb	r3, [r7, #22]
 800b98c:	3330      	adds	r3, #48	@ 0x30
 800b98e:	b2da      	uxtb	r2, r3
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	3301      	adds	r3, #1
 800b998:	223a      	movs	r2, #58	@ 0x3a
 800b99a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	3302      	adds	r3, #2
 800b9a0:	222f      	movs	r2, #47	@ 0x2f
 800b9a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	3303      	adds	r3, #3
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b9b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	371c      	adds	r7, #28
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	2000062c 	.word	0x2000062c

0800b9c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	6839      	ldr	r1, [r7, #0]
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f7ff ffaa 	bl	800b92c <FATFS_LinkDriverEx>
 800b9d8:	4603      	mov	r3, r0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <__cvt>:
 800b9e2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e6:	ec57 6b10 	vmov	r6, r7, d0
 800b9ea:	2f00      	cmp	r7, #0
 800b9ec:	460c      	mov	r4, r1
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	463b      	mov	r3, r7
 800b9f2:	bfbb      	ittet	lt
 800b9f4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b9f8:	461f      	movlt	r7, r3
 800b9fa:	2300      	movge	r3, #0
 800b9fc:	232d      	movlt	r3, #45	@ 0x2d
 800b9fe:	700b      	strb	r3, [r1, #0]
 800ba00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba02:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ba06:	4691      	mov	r9, r2
 800ba08:	f023 0820 	bic.w	r8, r3, #32
 800ba0c:	bfbc      	itt	lt
 800ba0e:	4632      	movlt	r2, r6
 800ba10:	4616      	movlt	r6, r2
 800ba12:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ba16:	d005      	beq.n	800ba24 <__cvt+0x42>
 800ba18:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ba1c:	d100      	bne.n	800ba20 <__cvt+0x3e>
 800ba1e:	3401      	adds	r4, #1
 800ba20:	2102      	movs	r1, #2
 800ba22:	e000      	b.n	800ba26 <__cvt+0x44>
 800ba24:	2103      	movs	r1, #3
 800ba26:	ab03      	add	r3, sp, #12
 800ba28:	9301      	str	r3, [sp, #4]
 800ba2a:	ab02      	add	r3, sp, #8
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	ec47 6b10 	vmov	d0, r6, r7
 800ba32:	4653      	mov	r3, sl
 800ba34:	4622      	mov	r2, r4
 800ba36:	f001 f9ab 	bl	800cd90 <_dtoa_r>
 800ba3a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ba3e:	4605      	mov	r5, r0
 800ba40:	d119      	bne.n	800ba76 <__cvt+0x94>
 800ba42:	f019 0f01 	tst.w	r9, #1
 800ba46:	d00e      	beq.n	800ba66 <__cvt+0x84>
 800ba48:	eb00 0904 	add.w	r9, r0, r4
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	2300      	movs	r3, #0
 800ba50:	4630      	mov	r0, r6
 800ba52:	4639      	mov	r1, r7
 800ba54:	f7f5 f838 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba58:	b108      	cbz	r0, 800ba5e <__cvt+0x7c>
 800ba5a:	f8cd 900c 	str.w	r9, [sp, #12]
 800ba5e:	2230      	movs	r2, #48	@ 0x30
 800ba60:	9b03      	ldr	r3, [sp, #12]
 800ba62:	454b      	cmp	r3, r9
 800ba64:	d31e      	bcc.n	800baa4 <__cvt+0xc2>
 800ba66:	9b03      	ldr	r3, [sp, #12]
 800ba68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba6a:	1b5b      	subs	r3, r3, r5
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	6013      	str	r3, [r2, #0]
 800ba70:	b004      	add	sp, #16
 800ba72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba76:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ba7a:	eb00 0904 	add.w	r9, r0, r4
 800ba7e:	d1e5      	bne.n	800ba4c <__cvt+0x6a>
 800ba80:	7803      	ldrb	r3, [r0, #0]
 800ba82:	2b30      	cmp	r3, #48	@ 0x30
 800ba84:	d10a      	bne.n	800ba9c <__cvt+0xba>
 800ba86:	2200      	movs	r2, #0
 800ba88:	2300      	movs	r3, #0
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	4639      	mov	r1, r7
 800ba8e:	f7f5 f81b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba92:	b918      	cbnz	r0, 800ba9c <__cvt+0xba>
 800ba94:	f1c4 0401 	rsb	r4, r4, #1
 800ba98:	f8ca 4000 	str.w	r4, [sl]
 800ba9c:	f8da 3000 	ldr.w	r3, [sl]
 800baa0:	4499      	add	r9, r3
 800baa2:	e7d3      	b.n	800ba4c <__cvt+0x6a>
 800baa4:	1c59      	adds	r1, r3, #1
 800baa6:	9103      	str	r1, [sp, #12]
 800baa8:	701a      	strb	r2, [r3, #0]
 800baaa:	e7d9      	b.n	800ba60 <__cvt+0x7e>

0800baac <__exponent>:
 800baac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800baae:	2900      	cmp	r1, #0
 800bab0:	bfba      	itte	lt
 800bab2:	4249      	neglt	r1, r1
 800bab4:	232d      	movlt	r3, #45	@ 0x2d
 800bab6:	232b      	movge	r3, #43	@ 0x2b
 800bab8:	2909      	cmp	r1, #9
 800baba:	7002      	strb	r2, [r0, #0]
 800babc:	7043      	strb	r3, [r0, #1]
 800babe:	dd29      	ble.n	800bb14 <__exponent+0x68>
 800bac0:	f10d 0307 	add.w	r3, sp, #7
 800bac4:	461d      	mov	r5, r3
 800bac6:	270a      	movs	r7, #10
 800bac8:	461a      	mov	r2, r3
 800baca:	fbb1 f6f7 	udiv	r6, r1, r7
 800bace:	fb07 1416 	mls	r4, r7, r6, r1
 800bad2:	3430      	adds	r4, #48	@ 0x30
 800bad4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bad8:	460c      	mov	r4, r1
 800bada:	2c63      	cmp	r4, #99	@ 0x63
 800badc:	f103 33ff 	add.w	r3, r3, #4294967295
 800bae0:	4631      	mov	r1, r6
 800bae2:	dcf1      	bgt.n	800bac8 <__exponent+0x1c>
 800bae4:	3130      	adds	r1, #48	@ 0x30
 800bae6:	1e94      	subs	r4, r2, #2
 800bae8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800baec:	1c41      	adds	r1, r0, #1
 800baee:	4623      	mov	r3, r4
 800baf0:	42ab      	cmp	r3, r5
 800baf2:	d30a      	bcc.n	800bb0a <__exponent+0x5e>
 800baf4:	f10d 0309 	add.w	r3, sp, #9
 800baf8:	1a9b      	subs	r3, r3, r2
 800bafa:	42ac      	cmp	r4, r5
 800bafc:	bf88      	it	hi
 800bafe:	2300      	movhi	r3, #0
 800bb00:	3302      	adds	r3, #2
 800bb02:	4403      	add	r3, r0
 800bb04:	1a18      	subs	r0, r3, r0
 800bb06:	b003      	add	sp, #12
 800bb08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb0a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bb0e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bb12:	e7ed      	b.n	800baf0 <__exponent+0x44>
 800bb14:	2330      	movs	r3, #48	@ 0x30
 800bb16:	3130      	adds	r1, #48	@ 0x30
 800bb18:	7083      	strb	r3, [r0, #2]
 800bb1a:	70c1      	strb	r1, [r0, #3]
 800bb1c:	1d03      	adds	r3, r0, #4
 800bb1e:	e7f1      	b.n	800bb04 <__exponent+0x58>

0800bb20 <_printf_float>:
 800bb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb24:	b08d      	sub	sp, #52	@ 0x34
 800bb26:	460c      	mov	r4, r1
 800bb28:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bb2c:	4616      	mov	r6, r2
 800bb2e:	461f      	mov	r7, r3
 800bb30:	4605      	mov	r5, r0
 800bb32:	f001 f827 	bl	800cb84 <_localeconv_r>
 800bb36:	6803      	ldr	r3, [r0, #0]
 800bb38:	9304      	str	r3, [sp, #16]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7f4 fb98 	bl	8000270 <strlen>
 800bb40:	2300      	movs	r3, #0
 800bb42:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb44:	f8d8 3000 	ldr.w	r3, [r8]
 800bb48:	9005      	str	r0, [sp, #20]
 800bb4a:	3307      	adds	r3, #7
 800bb4c:	f023 0307 	bic.w	r3, r3, #7
 800bb50:	f103 0208 	add.w	r2, r3, #8
 800bb54:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bb58:	f8d4 b000 	ldr.w	fp, [r4]
 800bb5c:	f8c8 2000 	str.w	r2, [r8]
 800bb60:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb64:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bb68:	9307      	str	r3, [sp, #28]
 800bb6a:	f8cd 8018 	str.w	r8, [sp, #24]
 800bb6e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bb72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb76:	4b9c      	ldr	r3, [pc, #624]	@ (800bde8 <_printf_float+0x2c8>)
 800bb78:	f04f 32ff 	mov.w	r2, #4294967295
 800bb7c:	f7f4 ffd6 	bl	8000b2c <__aeabi_dcmpun>
 800bb80:	bb70      	cbnz	r0, 800bbe0 <_printf_float+0xc0>
 800bb82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb86:	4b98      	ldr	r3, [pc, #608]	@ (800bde8 <_printf_float+0x2c8>)
 800bb88:	f04f 32ff 	mov.w	r2, #4294967295
 800bb8c:	f7f4 ffb0 	bl	8000af0 <__aeabi_dcmple>
 800bb90:	bb30      	cbnz	r0, 800bbe0 <_printf_float+0xc0>
 800bb92:	2200      	movs	r2, #0
 800bb94:	2300      	movs	r3, #0
 800bb96:	4640      	mov	r0, r8
 800bb98:	4649      	mov	r1, r9
 800bb9a:	f7f4 ff9f 	bl	8000adc <__aeabi_dcmplt>
 800bb9e:	b110      	cbz	r0, 800bba6 <_printf_float+0x86>
 800bba0:	232d      	movs	r3, #45	@ 0x2d
 800bba2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bba6:	4a91      	ldr	r2, [pc, #580]	@ (800bdec <_printf_float+0x2cc>)
 800bba8:	4b91      	ldr	r3, [pc, #580]	@ (800bdf0 <_printf_float+0x2d0>)
 800bbaa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bbae:	bf94      	ite	ls
 800bbb0:	4690      	movls	r8, r2
 800bbb2:	4698      	movhi	r8, r3
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	6123      	str	r3, [r4, #16]
 800bbb8:	f02b 0304 	bic.w	r3, fp, #4
 800bbbc:	6023      	str	r3, [r4, #0]
 800bbbe:	f04f 0900 	mov.w	r9, #0
 800bbc2:	9700      	str	r7, [sp, #0]
 800bbc4:	4633      	mov	r3, r6
 800bbc6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bbc8:	4621      	mov	r1, r4
 800bbca:	4628      	mov	r0, r5
 800bbcc:	f000 f9d2 	bl	800bf74 <_printf_common>
 800bbd0:	3001      	adds	r0, #1
 800bbd2:	f040 808d 	bne.w	800bcf0 <_printf_float+0x1d0>
 800bbd6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbda:	b00d      	add	sp, #52	@ 0x34
 800bbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe0:	4642      	mov	r2, r8
 800bbe2:	464b      	mov	r3, r9
 800bbe4:	4640      	mov	r0, r8
 800bbe6:	4649      	mov	r1, r9
 800bbe8:	f7f4 ffa0 	bl	8000b2c <__aeabi_dcmpun>
 800bbec:	b140      	cbz	r0, 800bc00 <_printf_float+0xe0>
 800bbee:	464b      	mov	r3, r9
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	bfbc      	itt	lt
 800bbf4:	232d      	movlt	r3, #45	@ 0x2d
 800bbf6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bbfa:	4a7e      	ldr	r2, [pc, #504]	@ (800bdf4 <_printf_float+0x2d4>)
 800bbfc:	4b7e      	ldr	r3, [pc, #504]	@ (800bdf8 <_printf_float+0x2d8>)
 800bbfe:	e7d4      	b.n	800bbaa <_printf_float+0x8a>
 800bc00:	6863      	ldr	r3, [r4, #4]
 800bc02:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bc06:	9206      	str	r2, [sp, #24]
 800bc08:	1c5a      	adds	r2, r3, #1
 800bc0a:	d13b      	bne.n	800bc84 <_printf_float+0x164>
 800bc0c:	2306      	movs	r3, #6
 800bc0e:	6063      	str	r3, [r4, #4]
 800bc10:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bc14:	2300      	movs	r3, #0
 800bc16:	6022      	str	r2, [r4, #0]
 800bc18:	9303      	str	r3, [sp, #12]
 800bc1a:	ab0a      	add	r3, sp, #40	@ 0x28
 800bc1c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bc20:	ab09      	add	r3, sp, #36	@ 0x24
 800bc22:	9300      	str	r3, [sp, #0]
 800bc24:	6861      	ldr	r1, [r4, #4]
 800bc26:	ec49 8b10 	vmov	d0, r8, r9
 800bc2a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bc2e:	4628      	mov	r0, r5
 800bc30:	f7ff fed7 	bl	800b9e2 <__cvt>
 800bc34:	9b06      	ldr	r3, [sp, #24]
 800bc36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc38:	2b47      	cmp	r3, #71	@ 0x47
 800bc3a:	4680      	mov	r8, r0
 800bc3c:	d129      	bne.n	800bc92 <_printf_float+0x172>
 800bc3e:	1cc8      	adds	r0, r1, #3
 800bc40:	db02      	blt.n	800bc48 <_printf_float+0x128>
 800bc42:	6863      	ldr	r3, [r4, #4]
 800bc44:	4299      	cmp	r1, r3
 800bc46:	dd41      	ble.n	800bccc <_printf_float+0x1ac>
 800bc48:	f1aa 0a02 	sub.w	sl, sl, #2
 800bc4c:	fa5f fa8a 	uxtb.w	sl, sl
 800bc50:	3901      	subs	r1, #1
 800bc52:	4652      	mov	r2, sl
 800bc54:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bc58:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc5a:	f7ff ff27 	bl	800baac <__exponent>
 800bc5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc60:	1813      	adds	r3, r2, r0
 800bc62:	2a01      	cmp	r2, #1
 800bc64:	4681      	mov	r9, r0
 800bc66:	6123      	str	r3, [r4, #16]
 800bc68:	dc02      	bgt.n	800bc70 <_printf_float+0x150>
 800bc6a:	6822      	ldr	r2, [r4, #0]
 800bc6c:	07d2      	lsls	r2, r2, #31
 800bc6e:	d501      	bpl.n	800bc74 <_printf_float+0x154>
 800bc70:	3301      	adds	r3, #1
 800bc72:	6123      	str	r3, [r4, #16]
 800bc74:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d0a2      	beq.n	800bbc2 <_printf_float+0xa2>
 800bc7c:	232d      	movs	r3, #45	@ 0x2d
 800bc7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc82:	e79e      	b.n	800bbc2 <_printf_float+0xa2>
 800bc84:	9a06      	ldr	r2, [sp, #24]
 800bc86:	2a47      	cmp	r2, #71	@ 0x47
 800bc88:	d1c2      	bne.n	800bc10 <_printf_float+0xf0>
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d1c0      	bne.n	800bc10 <_printf_float+0xf0>
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e7bd      	b.n	800bc0e <_printf_float+0xee>
 800bc92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc96:	d9db      	bls.n	800bc50 <_printf_float+0x130>
 800bc98:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bc9c:	d118      	bne.n	800bcd0 <_printf_float+0x1b0>
 800bc9e:	2900      	cmp	r1, #0
 800bca0:	6863      	ldr	r3, [r4, #4]
 800bca2:	dd0b      	ble.n	800bcbc <_printf_float+0x19c>
 800bca4:	6121      	str	r1, [r4, #16]
 800bca6:	b913      	cbnz	r3, 800bcae <_printf_float+0x18e>
 800bca8:	6822      	ldr	r2, [r4, #0]
 800bcaa:	07d0      	lsls	r0, r2, #31
 800bcac:	d502      	bpl.n	800bcb4 <_printf_float+0x194>
 800bcae:	3301      	adds	r3, #1
 800bcb0:	440b      	add	r3, r1
 800bcb2:	6123      	str	r3, [r4, #16]
 800bcb4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bcb6:	f04f 0900 	mov.w	r9, #0
 800bcba:	e7db      	b.n	800bc74 <_printf_float+0x154>
 800bcbc:	b913      	cbnz	r3, 800bcc4 <_printf_float+0x1a4>
 800bcbe:	6822      	ldr	r2, [r4, #0]
 800bcc0:	07d2      	lsls	r2, r2, #31
 800bcc2:	d501      	bpl.n	800bcc8 <_printf_float+0x1a8>
 800bcc4:	3302      	adds	r3, #2
 800bcc6:	e7f4      	b.n	800bcb2 <_printf_float+0x192>
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e7f2      	b.n	800bcb2 <_printf_float+0x192>
 800bccc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bcd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcd2:	4299      	cmp	r1, r3
 800bcd4:	db05      	blt.n	800bce2 <_printf_float+0x1c2>
 800bcd6:	6823      	ldr	r3, [r4, #0]
 800bcd8:	6121      	str	r1, [r4, #16]
 800bcda:	07d8      	lsls	r0, r3, #31
 800bcdc:	d5ea      	bpl.n	800bcb4 <_printf_float+0x194>
 800bcde:	1c4b      	adds	r3, r1, #1
 800bce0:	e7e7      	b.n	800bcb2 <_printf_float+0x192>
 800bce2:	2900      	cmp	r1, #0
 800bce4:	bfd4      	ite	le
 800bce6:	f1c1 0202 	rsble	r2, r1, #2
 800bcea:	2201      	movgt	r2, #1
 800bcec:	4413      	add	r3, r2
 800bcee:	e7e0      	b.n	800bcb2 <_printf_float+0x192>
 800bcf0:	6823      	ldr	r3, [r4, #0]
 800bcf2:	055a      	lsls	r2, r3, #21
 800bcf4:	d407      	bmi.n	800bd06 <_printf_float+0x1e6>
 800bcf6:	6923      	ldr	r3, [r4, #16]
 800bcf8:	4642      	mov	r2, r8
 800bcfa:	4631      	mov	r1, r6
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	47b8      	blx	r7
 800bd00:	3001      	adds	r0, #1
 800bd02:	d12b      	bne.n	800bd5c <_printf_float+0x23c>
 800bd04:	e767      	b.n	800bbd6 <_printf_float+0xb6>
 800bd06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bd0a:	f240 80dd 	bls.w	800bec8 <_printf_float+0x3a8>
 800bd0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bd12:	2200      	movs	r2, #0
 800bd14:	2300      	movs	r3, #0
 800bd16:	f7f4 fed7 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	d033      	beq.n	800bd86 <_printf_float+0x266>
 800bd1e:	4a37      	ldr	r2, [pc, #220]	@ (800bdfc <_printf_float+0x2dc>)
 800bd20:	2301      	movs	r3, #1
 800bd22:	4631      	mov	r1, r6
 800bd24:	4628      	mov	r0, r5
 800bd26:	47b8      	blx	r7
 800bd28:	3001      	adds	r0, #1
 800bd2a:	f43f af54 	beq.w	800bbd6 <_printf_float+0xb6>
 800bd2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bd32:	4543      	cmp	r3, r8
 800bd34:	db02      	blt.n	800bd3c <_printf_float+0x21c>
 800bd36:	6823      	ldr	r3, [r4, #0]
 800bd38:	07d8      	lsls	r0, r3, #31
 800bd3a:	d50f      	bpl.n	800bd5c <_printf_float+0x23c>
 800bd3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd40:	4631      	mov	r1, r6
 800bd42:	4628      	mov	r0, r5
 800bd44:	47b8      	blx	r7
 800bd46:	3001      	adds	r0, #1
 800bd48:	f43f af45 	beq.w	800bbd6 <_printf_float+0xb6>
 800bd4c:	f04f 0900 	mov.w	r9, #0
 800bd50:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd54:	f104 0a1a 	add.w	sl, r4, #26
 800bd58:	45c8      	cmp	r8, r9
 800bd5a:	dc09      	bgt.n	800bd70 <_printf_float+0x250>
 800bd5c:	6823      	ldr	r3, [r4, #0]
 800bd5e:	079b      	lsls	r3, r3, #30
 800bd60:	f100 8103 	bmi.w	800bf6a <_printf_float+0x44a>
 800bd64:	68e0      	ldr	r0, [r4, #12]
 800bd66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd68:	4298      	cmp	r0, r3
 800bd6a:	bfb8      	it	lt
 800bd6c:	4618      	movlt	r0, r3
 800bd6e:	e734      	b.n	800bbda <_printf_float+0xba>
 800bd70:	2301      	movs	r3, #1
 800bd72:	4652      	mov	r2, sl
 800bd74:	4631      	mov	r1, r6
 800bd76:	4628      	mov	r0, r5
 800bd78:	47b8      	blx	r7
 800bd7a:	3001      	adds	r0, #1
 800bd7c:	f43f af2b 	beq.w	800bbd6 <_printf_float+0xb6>
 800bd80:	f109 0901 	add.w	r9, r9, #1
 800bd84:	e7e8      	b.n	800bd58 <_printf_float+0x238>
 800bd86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	dc39      	bgt.n	800be00 <_printf_float+0x2e0>
 800bd8c:	4a1b      	ldr	r2, [pc, #108]	@ (800bdfc <_printf_float+0x2dc>)
 800bd8e:	2301      	movs	r3, #1
 800bd90:	4631      	mov	r1, r6
 800bd92:	4628      	mov	r0, r5
 800bd94:	47b8      	blx	r7
 800bd96:	3001      	adds	r0, #1
 800bd98:	f43f af1d 	beq.w	800bbd6 <_printf_float+0xb6>
 800bd9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bda0:	ea59 0303 	orrs.w	r3, r9, r3
 800bda4:	d102      	bne.n	800bdac <_printf_float+0x28c>
 800bda6:	6823      	ldr	r3, [r4, #0]
 800bda8:	07d9      	lsls	r1, r3, #31
 800bdaa:	d5d7      	bpl.n	800bd5c <_printf_float+0x23c>
 800bdac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdb0:	4631      	mov	r1, r6
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	47b8      	blx	r7
 800bdb6:	3001      	adds	r0, #1
 800bdb8:	f43f af0d 	beq.w	800bbd6 <_printf_float+0xb6>
 800bdbc:	f04f 0a00 	mov.w	sl, #0
 800bdc0:	f104 0b1a 	add.w	fp, r4, #26
 800bdc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdc6:	425b      	negs	r3, r3
 800bdc8:	4553      	cmp	r3, sl
 800bdca:	dc01      	bgt.n	800bdd0 <_printf_float+0x2b0>
 800bdcc:	464b      	mov	r3, r9
 800bdce:	e793      	b.n	800bcf8 <_printf_float+0x1d8>
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	465a      	mov	r2, fp
 800bdd4:	4631      	mov	r1, r6
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	47b8      	blx	r7
 800bdda:	3001      	adds	r0, #1
 800bddc:	f43f aefb 	beq.w	800bbd6 <_printf_float+0xb6>
 800bde0:	f10a 0a01 	add.w	sl, sl, #1
 800bde4:	e7ee      	b.n	800bdc4 <_printf_float+0x2a4>
 800bde6:	bf00      	nop
 800bde8:	7fefffff 	.word	0x7fefffff
 800bdec:	080106e4 	.word	0x080106e4
 800bdf0:	080106e8 	.word	0x080106e8
 800bdf4:	080106ec 	.word	0x080106ec
 800bdf8:	080106f0 	.word	0x080106f0
 800bdfc:	080106f4 	.word	0x080106f4
 800be00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800be02:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800be06:	4553      	cmp	r3, sl
 800be08:	bfa8      	it	ge
 800be0a:	4653      	movge	r3, sl
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	4699      	mov	r9, r3
 800be10:	dc36      	bgt.n	800be80 <_printf_float+0x360>
 800be12:	f04f 0b00 	mov.w	fp, #0
 800be16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be1a:	f104 021a 	add.w	r2, r4, #26
 800be1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800be20:	9306      	str	r3, [sp, #24]
 800be22:	eba3 0309 	sub.w	r3, r3, r9
 800be26:	455b      	cmp	r3, fp
 800be28:	dc31      	bgt.n	800be8e <_printf_float+0x36e>
 800be2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be2c:	459a      	cmp	sl, r3
 800be2e:	dc3a      	bgt.n	800bea6 <_printf_float+0x386>
 800be30:	6823      	ldr	r3, [r4, #0]
 800be32:	07da      	lsls	r2, r3, #31
 800be34:	d437      	bmi.n	800bea6 <_printf_float+0x386>
 800be36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be38:	ebaa 0903 	sub.w	r9, sl, r3
 800be3c:	9b06      	ldr	r3, [sp, #24]
 800be3e:	ebaa 0303 	sub.w	r3, sl, r3
 800be42:	4599      	cmp	r9, r3
 800be44:	bfa8      	it	ge
 800be46:	4699      	movge	r9, r3
 800be48:	f1b9 0f00 	cmp.w	r9, #0
 800be4c:	dc33      	bgt.n	800beb6 <_printf_float+0x396>
 800be4e:	f04f 0800 	mov.w	r8, #0
 800be52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be56:	f104 0b1a 	add.w	fp, r4, #26
 800be5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be5c:	ebaa 0303 	sub.w	r3, sl, r3
 800be60:	eba3 0309 	sub.w	r3, r3, r9
 800be64:	4543      	cmp	r3, r8
 800be66:	f77f af79 	ble.w	800bd5c <_printf_float+0x23c>
 800be6a:	2301      	movs	r3, #1
 800be6c:	465a      	mov	r2, fp
 800be6e:	4631      	mov	r1, r6
 800be70:	4628      	mov	r0, r5
 800be72:	47b8      	blx	r7
 800be74:	3001      	adds	r0, #1
 800be76:	f43f aeae 	beq.w	800bbd6 <_printf_float+0xb6>
 800be7a:	f108 0801 	add.w	r8, r8, #1
 800be7e:	e7ec      	b.n	800be5a <_printf_float+0x33a>
 800be80:	4642      	mov	r2, r8
 800be82:	4631      	mov	r1, r6
 800be84:	4628      	mov	r0, r5
 800be86:	47b8      	blx	r7
 800be88:	3001      	adds	r0, #1
 800be8a:	d1c2      	bne.n	800be12 <_printf_float+0x2f2>
 800be8c:	e6a3      	b.n	800bbd6 <_printf_float+0xb6>
 800be8e:	2301      	movs	r3, #1
 800be90:	4631      	mov	r1, r6
 800be92:	4628      	mov	r0, r5
 800be94:	9206      	str	r2, [sp, #24]
 800be96:	47b8      	blx	r7
 800be98:	3001      	adds	r0, #1
 800be9a:	f43f ae9c 	beq.w	800bbd6 <_printf_float+0xb6>
 800be9e:	9a06      	ldr	r2, [sp, #24]
 800bea0:	f10b 0b01 	add.w	fp, fp, #1
 800bea4:	e7bb      	b.n	800be1e <_printf_float+0x2fe>
 800bea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800beaa:	4631      	mov	r1, r6
 800beac:	4628      	mov	r0, r5
 800beae:	47b8      	blx	r7
 800beb0:	3001      	adds	r0, #1
 800beb2:	d1c0      	bne.n	800be36 <_printf_float+0x316>
 800beb4:	e68f      	b.n	800bbd6 <_printf_float+0xb6>
 800beb6:	9a06      	ldr	r2, [sp, #24]
 800beb8:	464b      	mov	r3, r9
 800beba:	4442      	add	r2, r8
 800bebc:	4631      	mov	r1, r6
 800bebe:	4628      	mov	r0, r5
 800bec0:	47b8      	blx	r7
 800bec2:	3001      	adds	r0, #1
 800bec4:	d1c3      	bne.n	800be4e <_printf_float+0x32e>
 800bec6:	e686      	b.n	800bbd6 <_printf_float+0xb6>
 800bec8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800becc:	f1ba 0f01 	cmp.w	sl, #1
 800bed0:	dc01      	bgt.n	800bed6 <_printf_float+0x3b6>
 800bed2:	07db      	lsls	r3, r3, #31
 800bed4:	d536      	bpl.n	800bf44 <_printf_float+0x424>
 800bed6:	2301      	movs	r3, #1
 800bed8:	4642      	mov	r2, r8
 800beda:	4631      	mov	r1, r6
 800bedc:	4628      	mov	r0, r5
 800bede:	47b8      	blx	r7
 800bee0:	3001      	adds	r0, #1
 800bee2:	f43f ae78 	beq.w	800bbd6 <_printf_float+0xb6>
 800bee6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800beea:	4631      	mov	r1, r6
 800beec:	4628      	mov	r0, r5
 800beee:	47b8      	blx	r7
 800bef0:	3001      	adds	r0, #1
 800bef2:	f43f ae70 	beq.w	800bbd6 <_printf_float+0xb6>
 800bef6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800befa:	2200      	movs	r2, #0
 800befc:	2300      	movs	r3, #0
 800befe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf02:	f7f4 fde1 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf06:	b9c0      	cbnz	r0, 800bf3a <_printf_float+0x41a>
 800bf08:	4653      	mov	r3, sl
 800bf0a:	f108 0201 	add.w	r2, r8, #1
 800bf0e:	4631      	mov	r1, r6
 800bf10:	4628      	mov	r0, r5
 800bf12:	47b8      	blx	r7
 800bf14:	3001      	adds	r0, #1
 800bf16:	d10c      	bne.n	800bf32 <_printf_float+0x412>
 800bf18:	e65d      	b.n	800bbd6 <_printf_float+0xb6>
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	465a      	mov	r2, fp
 800bf1e:	4631      	mov	r1, r6
 800bf20:	4628      	mov	r0, r5
 800bf22:	47b8      	blx	r7
 800bf24:	3001      	adds	r0, #1
 800bf26:	f43f ae56 	beq.w	800bbd6 <_printf_float+0xb6>
 800bf2a:	f108 0801 	add.w	r8, r8, #1
 800bf2e:	45d0      	cmp	r8, sl
 800bf30:	dbf3      	blt.n	800bf1a <_printf_float+0x3fa>
 800bf32:	464b      	mov	r3, r9
 800bf34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bf38:	e6df      	b.n	800bcfa <_printf_float+0x1da>
 800bf3a:	f04f 0800 	mov.w	r8, #0
 800bf3e:	f104 0b1a 	add.w	fp, r4, #26
 800bf42:	e7f4      	b.n	800bf2e <_printf_float+0x40e>
 800bf44:	2301      	movs	r3, #1
 800bf46:	4642      	mov	r2, r8
 800bf48:	e7e1      	b.n	800bf0e <_printf_float+0x3ee>
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	464a      	mov	r2, r9
 800bf4e:	4631      	mov	r1, r6
 800bf50:	4628      	mov	r0, r5
 800bf52:	47b8      	blx	r7
 800bf54:	3001      	adds	r0, #1
 800bf56:	f43f ae3e 	beq.w	800bbd6 <_printf_float+0xb6>
 800bf5a:	f108 0801 	add.w	r8, r8, #1
 800bf5e:	68e3      	ldr	r3, [r4, #12]
 800bf60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf62:	1a5b      	subs	r3, r3, r1
 800bf64:	4543      	cmp	r3, r8
 800bf66:	dcf0      	bgt.n	800bf4a <_printf_float+0x42a>
 800bf68:	e6fc      	b.n	800bd64 <_printf_float+0x244>
 800bf6a:	f04f 0800 	mov.w	r8, #0
 800bf6e:	f104 0919 	add.w	r9, r4, #25
 800bf72:	e7f4      	b.n	800bf5e <_printf_float+0x43e>

0800bf74 <_printf_common>:
 800bf74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf78:	4616      	mov	r6, r2
 800bf7a:	4698      	mov	r8, r3
 800bf7c:	688a      	ldr	r2, [r1, #8]
 800bf7e:	690b      	ldr	r3, [r1, #16]
 800bf80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf84:	4293      	cmp	r3, r2
 800bf86:	bfb8      	it	lt
 800bf88:	4613      	movlt	r3, r2
 800bf8a:	6033      	str	r3, [r6, #0]
 800bf8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf90:	4607      	mov	r7, r0
 800bf92:	460c      	mov	r4, r1
 800bf94:	b10a      	cbz	r2, 800bf9a <_printf_common+0x26>
 800bf96:	3301      	adds	r3, #1
 800bf98:	6033      	str	r3, [r6, #0]
 800bf9a:	6823      	ldr	r3, [r4, #0]
 800bf9c:	0699      	lsls	r1, r3, #26
 800bf9e:	bf42      	ittt	mi
 800bfa0:	6833      	ldrmi	r3, [r6, #0]
 800bfa2:	3302      	addmi	r3, #2
 800bfa4:	6033      	strmi	r3, [r6, #0]
 800bfa6:	6825      	ldr	r5, [r4, #0]
 800bfa8:	f015 0506 	ands.w	r5, r5, #6
 800bfac:	d106      	bne.n	800bfbc <_printf_common+0x48>
 800bfae:	f104 0a19 	add.w	sl, r4, #25
 800bfb2:	68e3      	ldr	r3, [r4, #12]
 800bfb4:	6832      	ldr	r2, [r6, #0]
 800bfb6:	1a9b      	subs	r3, r3, r2
 800bfb8:	42ab      	cmp	r3, r5
 800bfba:	dc26      	bgt.n	800c00a <_printf_common+0x96>
 800bfbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bfc0:	6822      	ldr	r2, [r4, #0]
 800bfc2:	3b00      	subs	r3, #0
 800bfc4:	bf18      	it	ne
 800bfc6:	2301      	movne	r3, #1
 800bfc8:	0692      	lsls	r2, r2, #26
 800bfca:	d42b      	bmi.n	800c024 <_printf_common+0xb0>
 800bfcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bfd0:	4641      	mov	r1, r8
 800bfd2:	4638      	mov	r0, r7
 800bfd4:	47c8      	blx	r9
 800bfd6:	3001      	adds	r0, #1
 800bfd8:	d01e      	beq.n	800c018 <_printf_common+0xa4>
 800bfda:	6823      	ldr	r3, [r4, #0]
 800bfdc:	6922      	ldr	r2, [r4, #16]
 800bfde:	f003 0306 	and.w	r3, r3, #6
 800bfe2:	2b04      	cmp	r3, #4
 800bfe4:	bf02      	ittt	eq
 800bfe6:	68e5      	ldreq	r5, [r4, #12]
 800bfe8:	6833      	ldreq	r3, [r6, #0]
 800bfea:	1aed      	subeq	r5, r5, r3
 800bfec:	68a3      	ldr	r3, [r4, #8]
 800bfee:	bf0c      	ite	eq
 800bff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bff4:	2500      	movne	r5, #0
 800bff6:	4293      	cmp	r3, r2
 800bff8:	bfc4      	itt	gt
 800bffa:	1a9b      	subgt	r3, r3, r2
 800bffc:	18ed      	addgt	r5, r5, r3
 800bffe:	2600      	movs	r6, #0
 800c000:	341a      	adds	r4, #26
 800c002:	42b5      	cmp	r5, r6
 800c004:	d11a      	bne.n	800c03c <_printf_common+0xc8>
 800c006:	2000      	movs	r0, #0
 800c008:	e008      	b.n	800c01c <_printf_common+0xa8>
 800c00a:	2301      	movs	r3, #1
 800c00c:	4652      	mov	r2, sl
 800c00e:	4641      	mov	r1, r8
 800c010:	4638      	mov	r0, r7
 800c012:	47c8      	blx	r9
 800c014:	3001      	adds	r0, #1
 800c016:	d103      	bne.n	800c020 <_printf_common+0xac>
 800c018:	f04f 30ff 	mov.w	r0, #4294967295
 800c01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c020:	3501      	adds	r5, #1
 800c022:	e7c6      	b.n	800bfb2 <_printf_common+0x3e>
 800c024:	18e1      	adds	r1, r4, r3
 800c026:	1c5a      	adds	r2, r3, #1
 800c028:	2030      	movs	r0, #48	@ 0x30
 800c02a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c02e:	4422      	add	r2, r4
 800c030:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c034:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c038:	3302      	adds	r3, #2
 800c03a:	e7c7      	b.n	800bfcc <_printf_common+0x58>
 800c03c:	2301      	movs	r3, #1
 800c03e:	4622      	mov	r2, r4
 800c040:	4641      	mov	r1, r8
 800c042:	4638      	mov	r0, r7
 800c044:	47c8      	blx	r9
 800c046:	3001      	adds	r0, #1
 800c048:	d0e6      	beq.n	800c018 <_printf_common+0xa4>
 800c04a:	3601      	adds	r6, #1
 800c04c:	e7d9      	b.n	800c002 <_printf_common+0x8e>
	...

0800c050 <_printf_i>:
 800c050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c054:	7e0f      	ldrb	r7, [r1, #24]
 800c056:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c058:	2f78      	cmp	r7, #120	@ 0x78
 800c05a:	4691      	mov	r9, r2
 800c05c:	4680      	mov	r8, r0
 800c05e:	460c      	mov	r4, r1
 800c060:	469a      	mov	sl, r3
 800c062:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c066:	d807      	bhi.n	800c078 <_printf_i+0x28>
 800c068:	2f62      	cmp	r7, #98	@ 0x62
 800c06a:	d80a      	bhi.n	800c082 <_printf_i+0x32>
 800c06c:	2f00      	cmp	r7, #0
 800c06e:	f000 80d2 	beq.w	800c216 <_printf_i+0x1c6>
 800c072:	2f58      	cmp	r7, #88	@ 0x58
 800c074:	f000 80b9 	beq.w	800c1ea <_printf_i+0x19a>
 800c078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c07c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c080:	e03a      	b.n	800c0f8 <_printf_i+0xa8>
 800c082:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c086:	2b15      	cmp	r3, #21
 800c088:	d8f6      	bhi.n	800c078 <_printf_i+0x28>
 800c08a:	a101      	add	r1, pc, #4	@ (adr r1, 800c090 <_printf_i+0x40>)
 800c08c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c090:	0800c0e9 	.word	0x0800c0e9
 800c094:	0800c0fd 	.word	0x0800c0fd
 800c098:	0800c079 	.word	0x0800c079
 800c09c:	0800c079 	.word	0x0800c079
 800c0a0:	0800c079 	.word	0x0800c079
 800c0a4:	0800c079 	.word	0x0800c079
 800c0a8:	0800c0fd 	.word	0x0800c0fd
 800c0ac:	0800c079 	.word	0x0800c079
 800c0b0:	0800c079 	.word	0x0800c079
 800c0b4:	0800c079 	.word	0x0800c079
 800c0b8:	0800c079 	.word	0x0800c079
 800c0bc:	0800c1fd 	.word	0x0800c1fd
 800c0c0:	0800c127 	.word	0x0800c127
 800c0c4:	0800c1b7 	.word	0x0800c1b7
 800c0c8:	0800c079 	.word	0x0800c079
 800c0cc:	0800c079 	.word	0x0800c079
 800c0d0:	0800c21f 	.word	0x0800c21f
 800c0d4:	0800c079 	.word	0x0800c079
 800c0d8:	0800c127 	.word	0x0800c127
 800c0dc:	0800c079 	.word	0x0800c079
 800c0e0:	0800c079 	.word	0x0800c079
 800c0e4:	0800c1bf 	.word	0x0800c1bf
 800c0e8:	6833      	ldr	r3, [r6, #0]
 800c0ea:	1d1a      	adds	r2, r3, #4
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	6032      	str	r2, [r6, #0]
 800c0f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	e09d      	b.n	800c238 <_printf_i+0x1e8>
 800c0fc:	6833      	ldr	r3, [r6, #0]
 800c0fe:	6820      	ldr	r0, [r4, #0]
 800c100:	1d19      	adds	r1, r3, #4
 800c102:	6031      	str	r1, [r6, #0]
 800c104:	0606      	lsls	r6, r0, #24
 800c106:	d501      	bpl.n	800c10c <_printf_i+0xbc>
 800c108:	681d      	ldr	r5, [r3, #0]
 800c10a:	e003      	b.n	800c114 <_printf_i+0xc4>
 800c10c:	0645      	lsls	r5, r0, #25
 800c10e:	d5fb      	bpl.n	800c108 <_printf_i+0xb8>
 800c110:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c114:	2d00      	cmp	r5, #0
 800c116:	da03      	bge.n	800c120 <_printf_i+0xd0>
 800c118:	232d      	movs	r3, #45	@ 0x2d
 800c11a:	426d      	negs	r5, r5
 800c11c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c120:	4859      	ldr	r0, [pc, #356]	@ (800c288 <_printf_i+0x238>)
 800c122:	230a      	movs	r3, #10
 800c124:	e011      	b.n	800c14a <_printf_i+0xfa>
 800c126:	6821      	ldr	r1, [r4, #0]
 800c128:	6833      	ldr	r3, [r6, #0]
 800c12a:	0608      	lsls	r0, r1, #24
 800c12c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c130:	d402      	bmi.n	800c138 <_printf_i+0xe8>
 800c132:	0649      	lsls	r1, r1, #25
 800c134:	bf48      	it	mi
 800c136:	b2ad      	uxthmi	r5, r5
 800c138:	2f6f      	cmp	r7, #111	@ 0x6f
 800c13a:	4853      	ldr	r0, [pc, #332]	@ (800c288 <_printf_i+0x238>)
 800c13c:	6033      	str	r3, [r6, #0]
 800c13e:	bf14      	ite	ne
 800c140:	230a      	movne	r3, #10
 800c142:	2308      	moveq	r3, #8
 800c144:	2100      	movs	r1, #0
 800c146:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c14a:	6866      	ldr	r6, [r4, #4]
 800c14c:	60a6      	str	r6, [r4, #8]
 800c14e:	2e00      	cmp	r6, #0
 800c150:	bfa2      	ittt	ge
 800c152:	6821      	ldrge	r1, [r4, #0]
 800c154:	f021 0104 	bicge.w	r1, r1, #4
 800c158:	6021      	strge	r1, [r4, #0]
 800c15a:	b90d      	cbnz	r5, 800c160 <_printf_i+0x110>
 800c15c:	2e00      	cmp	r6, #0
 800c15e:	d04b      	beq.n	800c1f8 <_printf_i+0x1a8>
 800c160:	4616      	mov	r6, r2
 800c162:	fbb5 f1f3 	udiv	r1, r5, r3
 800c166:	fb03 5711 	mls	r7, r3, r1, r5
 800c16a:	5dc7      	ldrb	r7, [r0, r7]
 800c16c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c170:	462f      	mov	r7, r5
 800c172:	42bb      	cmp	r3, r7
 800c174:	460d      	mov	r5, r1
 800c176:	d9f4      	bls.n	800c162 <_printf_i+0x112>
 800c178:	2b08      	cmp	r3, #8
 800c17a:	d10b      	bne.n	800c194 <_printf_i+0x144>
 800c17c:	6823      	ldr	r3, [r4, #0]
 800c17e:	07df      	lsls	r7, r3, #31
 800c180:	d508      	bpl.n	800c194 <_printf_i+0x144>
 800c182:	6923      	ldr	r3, [r4, #16]
 800c184:	6861      	ldr	r1, [r4, #4]
 800c186:	4299      	cmp	r1, r3
 800c188:	bfde      	ittt	le
 800c18a:	2330      	movle	r3, #48	@ 0x30
 800c18c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c190:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c194:	1b92      	subs	r2, r2, r6
 800c196:	6122      	str	r2, [r4, #16]
 800c198:	f8cd a000 	str.w	sl, [sp]
 800c19c:	464b      	mov	r3, r9
 800c19e:	aa03      	add	r2, sp, #12
 800c1a0:	4621      	mov	r1, r4
 800c1a2:	4640      	mov	r0, r8
 800c1a4:	f7ff fee6 	bl	800bf74 <_printf_common>
 800c1a8:	3001      	adds	r0, #1
 800c1aa:	d14a      	bne.n	800c242 <_printf_i+0x1f2>
 800c1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b0:	b004      	add	sp, #16
 800c1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1b6:	6823      	ldr	r3, [r4, #0]
 800c1b8:	f043 0320 	orr.w	r3, r3, #32
 800c1bc:	6023      	str	r3, [r4, #0]
 800c1be:	4833      	ldr	r0, [pc, #204]	@ (800c28c <_printf_i+0x23c>)
 800c1c0:	2778      	movs	r7, #120	@ 0x78
 800c1c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c1c6:	6823      	ldr	r3, [r4, #0]
 800c1c8:	6831      	ldr	r1, [r6, #0]
 800c1ca:	061f      	lsls	r7, r3, #24
 800c1cc:	f851 5b04 	ldr.w	r5, [r1], #4
 800c1d0:	d402      	bmi.n	800c1d8 <_printf_i+0x188>
 800c1d2:	065f      	lsls	r7, r3, #25
 800c1d4:	bf48      	it	mi
 800c1d6:	b2ad      	uxthmi	r5, r5
 800c1d8:	6031      	str	r1, [r6, #0]
 800c1da:	07d9      	lsls	r1, r3, #31
 800c1dc:	bf44      	itt	mi
 800c1de:	f043 0320 	orrmi.w	r3, r3, #32
 800c1e2:	6023      	strmi	r3, [r4, #0]
 800c1e4:	b11d      	cbz	r5, 800c1ee <_printf_i+0x19e>
 800c1e6:	2310      	movs	r3, #16
 800c1e8:	e7ac      	b.n	800c144 <_printf_i+0xf4>
 800c1ea:	4827      	ldr	r0, [pc, #156]	@ (800c288 <_printf_i+0x238>)
 800c1ec:	e7e9      	b.n	800c1c2 <_printf_i+0x172>
 800c1ee:	6823      	ldr	r3, [r4, #0]
 800c1f0:	f023 0320 	bic.w	r3, r3, #32
 800c1f4:	6023      	str	r3, [r4, #0]
 800c1f6:	e7f6      	b.n	800c1e6 <_printf_i+0x196>
 800c1f8:	4616      	mov	r6, r2
 800c1fa:	e7bd      	b.n	800c178 <_printf_i+0x128>
 800c1fc:	6833      	ldr	r3, [r6, #0]
 800c1fe:	6825      	ldr	r5, [r4, #0]
 800c200:	6961      	ldr	r1, [r4, #20]
 800c202:	1d18      	adds	r0, r3, #4
 800c204:	6030      	str	r0, [r6, #0]
 800c206:	062e      	lsls	r6, r5, #24
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	d501      	bpl.n	800c210 <_printf_i+0x1c0>
 800c20c:	6019      	str	r1, [r3, #0]
 800c20e:	e002      	b.n	800c216 <_printf_i+0x1c6>
 800c210:	0668      	lsls	r0, r5, #25
 800c212:	d5fb      	bpl.n	800c20c <_printf_i+0x1bc>
 800c214:	8019      	strh	r1, [r3, #0]
 800c216:	2300      	movs	r3, #0
 800c218:	6123      	str	r3, [r4, #16]
 800c21a:	4616      	mov	r6, r2
 800c21c:	e7bc      	b.n	800c198 <_printf_i+0x148>
 800c21e:	6833      	ldr	r3, [r6, #0]
 800c220:	1d1a      	adds	r2, r3, #4
 800c222:	6032      	str	r2, [r6, #0]
 800c224:	681e      	ldr	r6, [r3, #0]
 800c226:	6862      	ldr	r2, [r4, #4]
 800c228:	2100      	movs	r1, #0
 800c22a:	4630      	mov	r0, r6
 800c22c:	f7f3 ffd0 	bl	80001d0 <memchr>
 800c230:	b108      	cbz	r0, 800c236 <_printf_i+0x1e6>
 800c232:	1b80      	subs	r0, r0, r6
 800c234:	6060      	str	r0, [r4, #4]
 800c236:	6863      	ldr	r3, [r4, #4]
 800c238:	6123      	str	r3, [r4, #16]
 800c23a:	2300      	movs	r3, #0
 800c23c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c240:	e7aa      	b.n	800c198 <_printf_i+0x148>
 800c242:	6923      	ldr	r3, [r4, #16]
 800c244:	4632      	mov	r2, r6
 800c246:	4649      	mov	r1, r9
 800c248:	4640      	mov	r0, r8
 800c24a:	47d0      	blx	sl
 800c24c:	3001      	adds	r0, #1
 800c24e:	d0ad      	beq.n	800c1ac <_printf_i+0x15c>
 800c250:	6823      	ldr	r3, [r4, #0]
 800c252:	079b      	lsls	r3, r3, #30
 800c254:	d413      	bmi.n	800c27e <_printf_i+0x22e>
 800c256:	68e0      	ldr	r0, [r4, #12]
 800c258:	9b03      	ldr	r3, [sp, #12]
 800c25a:	4298      	cmp	r0, r3
 800c25c:	bfb8      	it	lt
 800c25e:	4618      	movlt	r0, r3
 800c260:	e7a6      	b.n	800c1b0 <_printf_i+0x160>
 800c262:	2301      	movs	r3, #1
 800c264:	4632      	mov	r2, r6
 800c266:	4649      	mov	r1, r9
 800c268:	4640      	mov	r0, r8
 800c26a:	47d0      	blx	sl
 800c26c:	3001      	adds	r0, #1
 800c26e:	d09d      	beq.n	800c1ac <_printf_i+0x15c>
 800c270:	3501      	adds	r5, #1
 800c272:	68e3      	ldr	r3, [r4, #12]
 800c274:	9903      	ldr	r1, [sp, #12]
 800c276:	1a5b      	subs	r3, r3, r1
 800c278:	42ab      	cmp	r3, r5
 800c27a:	dcf2      	bgt.n	800c262 <_printf_i+0x212>
 800c27c:	e7eb      	b.n	800c256 <_printf_i+0x206>
 800c27e:	2500      	movs	r5, #0
 800c280:	f104 0619 	add.w	r6, r4, #25
 800c284:	e7f5      	b.n	800c272 <_printf_i+0x222>
 800c286:	bf00      	nop
 800c288:	080106f6 	.word	0x080106f6
 800c28c:	08010707 	.word	0x08010707

0800c290 <_scanf_float>:
 800c290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c294:	b087      	sub	sp, #28
 800c296:	4617      	mov	r7, r2
 800c298:	9303      	str	r3, [sp, #12]
 800c29a:	688b      	ldr	r3, [r1, #8]
 800c29c:	1e5a      	subs	r2, r3, #1
 800c29e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c2a2:	bf81      	itttt	hi
 800c2a4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c2a8:	eb03 0b05 	addhi.w	fp, r3, r5
 800c2ac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c2b0:	608b      	strhi	r3, [r1, #8]
 800c2b2:	680b      	ldr	r3, [r1, #0]
 800c2b4:	460a      	mov	r2, r1
 800c2b6:	f04f 0500 	mov.w	r5, #0
 800c2ba:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c2be:	f842 3b1c 	str.w	r3, [r2], #28
 800c2c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c2c6:	4680      	mov	r8, r0
 800c2c8:	460c      	mov	r4, r1
 800c2ca:	bf98      	it	ls
 800c2cc:	f04f 0b00 	movls.w	fp, #0
 800c2d0:	9201      	str	r2, [sp, #4]
 800c2d2:	4616      	mov	r6, r2
 800c2d4:	46aa      	mov	sl, r5
 800c2d6:	46a9      	mov	r9, r5
 800c2d8:	9502      	str	r5, [sp, #8]
 800c2da:	68a2      	ldr	r2, [r4, #8]
 800c2dc:	b152      	cbz	r2, 800c2f4 <_scanf_float+0x64>
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	2b4e      	cmp	r3, #78	@ 0x4e
 800c2e4:	d864      	bhi.n	800c3b0 <_scanf_float+0x120>
 800c2e6:	2b40      	cmp	r3, #64	@ 0x40
 800c2e8:	d83c      	bhi.n	800c364 <_scanf_float+0xd4>
 800c2ea:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c2ee:	b2c8      	uxtb	r0, r1
 800c2f0:	280e      	cmp	r0, #14
 800c2f2:	d93a      	bls.n	800c36a <_scanf_float+0xda>
 800c2f4:	f1b9 0f00 	cmp.w	r9, #0
 800c2f8:	d003      	beq.n	800c302 <_scanf_float+0x72>
 800c2fa:	6823      	ldr	r3, [r4, #0]
 800c2fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c306:	f1ba 0f01 	cmp.w	sl, #1
 800c30a:	f200 8117 	bhi.w	800c53c <_scanf_float+0x2ac>
 800c30e:	9b01      	ldr	r3, [sp, #4]
 800c310:	429e      	cmp	r6, r3
 800c312:	f200 8108 	bhi.w	800c526 <_scanf_float+0x296>
 800c316:	2001      	movs	r0, #1
 800c318:	b007      	add	sp, #28
 800c31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c31e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c322:	2a0d      	cmp	r2, #13
 800c324:	d8e6      	bhi.n	800c2f4 <_scanf_float+0x64>
 800c326:	a101      	add	r1, pc, #4	@ (adr r1, 800c32c <_scanf_float+0x9c>)
 800c328:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c32c:	0800c473 	.word	0x0800c473
 800c330:	0800c2f5 	.word	0x0800c2f5
 800c334:	0800c2f5 	.word	0x0800c2f5
 800c338:	0800c2f5 	.word	0x0800c2f5
 800c33c:	0800c4d3 	.word	0x0800c4d3
 800c340:	0800c4ab 	.word	0x0800c4ab
 800c344:	0800c2f5 	.word	0x0800c2f5
 800c348:	0800c2f5 	.word	0x0800c2f5
 800c34c:	0800c481 	.word	0x0800c481
 800c350:	0800c2f5 	.word	0x0800c2f5
 800c354:	0800c2f5 	.word	0x0800c2f5
 800c358:	0800c2f5 	.word	0x0800c2f5
 800c35c:	0800c2f5 	.word	0x0800c2f5
 800c360:	0800c439 	.word	0x0800c439
 800c364:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c368:	e7db      	b.n	800c322 <_scanf_float+0x92>
 800c36a:	290e      	cmp	r1, #14
 800c36c:	d8c2      	bhi.n	800c2f4 <_scanf_float+0x64>
 800c36e:	a001      	add	r0, pc, #4	@ (adr r0, 800c374 <_scanf_float+0xe4>)
 800c370:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c374:	0800c429 	.word	0x0800c429
 800c378:	0800c2f5 	.word	0x0800c2f5
 800c37c:	0800c429 	.word	0x0800c429
 800c380:	0800c4bf 	.word	0x0800c4bf
 800c384:	0800c2f5 	.word	0x0800c2f5
 800c388:	0800c3d1 	.word	0x0800c3d1
 800c38c:	0800c40f 	.word	0x0800c40f
 800c390:	0800c40f 	.word	0x0800c40f
 800c394:	0800c40f 	.word	0x0800c40f
 800c398:	0800c40f 	.word	0x0800c40f
 800c39c:	0800c40f 	.word	0x0800c40f
 800c3a0:	0800c40f 	.word	0x0800c40f
 800c3a4:	0800c40f 	.word	0x0800c40f
 800c3a8:	0800c40f 	.word	0x0800c40f
 800c3ac:	0800c40f 	.word	0x0800c40f
 800c3b0:	2b6e      	cmp	r3, #110	@ 0x6e
 800c3b2:	d809      	bhi.n	800c3c8 <_scanf_float+0x138>
 800c3b4:	2b60      	cmp	r3, #96	@ 0x60
 800c3b6:	d8b2      	bhi.n	800c31e <_scanf_float+0x8e>
 800c3b8:	2b54      	cmp	r3, #84	@ 0x54
 800c3ba:	d07b      	beq.n	800c4b4 <_scanf_float+0x224>
 800c3bc:	2b59      	cmp	r3, #89	@ 0x59
 800c3be:	d199      	bne.n	800c2f4 <_scanf_float+0x64>
 800c3c0:	2d07      	cmp	r5, #7
 800c3c2:	d197      	bne.n	800c2f4 <_scanf_float+0x64>
 800c3c4:	2508      	movs	r5, #8
 800c3c6:	e02c      	b.n	800c422 <_scanf_float+0x192>
 800c3c8:	2b74      	cmp	r3, #116	@ 0x74
 800c3ca:	d073      	beq.n	800c4b4 <_scanf_float+0x224>
 800c3cc:	2b79      	cmp	r3, #121	@ 0x79
 800c3ce:	e7f6      	b.n	800c3be <_scanf_float+0x12e>
 800c3d0:	6821      	ldr	r1, [r4, #0]
 800c3d2:	05c8      	lsls	r0, r1, #23
 800c3d4:	d51b      	bpl.n	800c40e <_scanf_float+0x17e>
 800c3d6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c3da:	6021      	str	r1, [r4, #0]
 800c3dc:	f109 0901 	add.w	r9, r9, #1
 800c3e0:	f1bb 0f00 	cmp.w	fp, #0
 800c3e4:	d003      	beq.n	800c3ee <_scanf_float+0x15e>
 800c3e6:	3201      	adds	r2, #1
 800c3e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c3ec:	60a2      	str	r2, [r4, #8]
 800c3ee:	68a3      	ldr	r3, [r4, #8]
 800c3f0:	3b01      	subs	r3, #1
 800c3f2:	60a3      	str	r3, [r4, #8]
 800c3f4:	6923      	ldr	r3, [r4, #16]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	6123      	str	r3, [r4, #16]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	607b      	str	r3, [r7, #4]
 800c402:	f340 8087 	ble.w	800c514 <_scanf_float+0x284>
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	3301      	adds	r3, #1
 800c40a:	603b      	str	r3, [r7, #0]
 800c40c:	e765      	b.n	800c2da <_scanf_float+0x4a>
 800c40e:	eb1a 0105 	adds.w	r1, sl, r5
 800c412:	f47f af6f 	bne.w	800c2f4 <_scanf_float+0x64>
 800c416:	6822      	ldr	r2, [r4, #0]
 800c418:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c41c:	6022      	str	r2, [r4, #0]
 800c41e:	460d      	mov	r5, r1
 800c420:	468a      	mov	sl, r1
 800c422:	f806 3b01 	strb.w	r3, [r6], #1
 800c426:	e7e2      	b.n	800c3ee <_scanf_float+0x15e>
 800c428:	6822      	ldr	r2, [r4, #0]
 800c42a:	0610      	lsls	r0, r2, #24
 800c42c:	f57f af62 	bpl.w	800c2f4 <_scanf_float+0x64>
 800c430:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c434:	6022      	str	r2, [r4, #0]
 800c436:	e7f4      	b.n	800c422 <_scanf_float+0x192>
 800c438:	f1ba 0f00 	cmp.w	sl, #0
 800c43c:	d10e      	bne.n	800c45c <_scanf_float+0x1cc>
 800c43e:	f1b9 0f00 	cmp.w	r9, #0
 800c442:	d10e      	bne.n	800c462 <_scanf_float+0x1d2>
 800c444:	6822      	ldr	r2, [r4, #0]
 800c446:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c44a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c44e:	d108      	bne.n	800c462 <_scanf_float+0x1d2>
 800c450:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c454:	6022      	str	r2, [r4, #0]
 800c456:	f04f 0a01 	mov.w	sl, #1
 800c45a:	e7e2      	b.n	800c422 <_scanf_float+0x192>
 800c45c:	f1ba 0f02 	cmp.w	sl, #2
 800c460:	d055      	beq.n	800c50e <_scanf_float+0x27e>
 800c462:	2d01      	cmp	r5, #1
 800c464:	d002      	beq.n	800c46c <_scanf_float+0x1dc>
 800c466:	2d04      	cmp	r5, #4
 800c468:	f47f af44 	bne.w	800c2f4 <_scanf_float+0x64>
 800c46c:	3501      	adds	r5, #1
 800c46e:	b2ed      	uxtb	r5, r5
 800c470:	e7d7      	b.n	800c422 <_scanf_float+0x192>
 800c472:	f1ba 0f01 	cmp.w	sl, #1
 800c476:	f47f af3d 	bne.w	800c2f4 <_scanf_float+0x64>
 800c47a:	f04f 0a02 	mov.w	sl, #2
 800c47e:	e7d0      	b.n	800c422 <_scanf_float+0x192>
 800c480:	b97d      	cbnz	r5, 800c4a2 <_scanf_float+0x212>
 800c482:	f1b9 0f00 	cmp.w	r9, #0
 800c486:	f47f af38 	bne.w	800c2fa <_scanf_float+0x6a>
 800c48a:	6822      	ldr	r2, [r4, #0]
 800c48c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c490:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c494:	f040 8108 	bne.w	800c6a8 <_scanf_float+0x418>
 800c498:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c49c:	6022      	str	r2, [r4, #0]
 800c49e:	2501      	movs	r5, #1
 800c4a0:	e7bf      	b.n	800c422 <_scanf_float+0x192>
 800c4a2:	2d03      	cmp	r5, #3
 800c4a4:	d0e2      	beq.n	800c46c <_scanf_float+0x1dc>
 800c4a6:	2d05      	cmp	r5, #5
 800c4a8:	e7de      	b.n	800c468 <_scanf_float+0x1d8>
 800c4aa:	2d02      	cmp	r5, #2
 800c4ac:	f47f af22 	bne.w	800c2f4 <_scanf_float+0x64>
 800c4b0:	2503      	movs	r5, #3
 800c4b2:	e7b6      	b.n	800c422 <_scanf_float+0x192>
 800c4b4:	2d06      	cmp	r5, #6
 800c4b6:	f47f af1d 	bne.w	800c2f4 <_scanf_float+0x64>
 800c4ba:	2507      	movs	r5, #7
 800c4bc:	e7b1      	b.n	800c422 <_scanf_float+0x192>
 800c4be:	6822      	ldr	r2, [r4, #0]
 800c4c0:	0591      	lsls	r1, r2, #22
 800c4c2:	f57f af17 	bpl.w	800c2f4 <_scanf_float+0x64>
 800c4c6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c4ca:	6022      	str	r2, [r4, #0]
 800c4cc:	f8cd 9008 	str.w	r9, [sp, #8]
 800c4d0:	e7a7      	b.n	800c422 <_scanf_float+0x192>
 800c4d2:	6822      	ldr	r2, [r4, #0]
 800c4d4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c4d8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c4dc:	d006      	beq.n	800c4ec <_scanf_float+0x25c>
 800c4de:	0550      	lsls	r0, r2, #21
 800c4e0:	f57f af08 	bpl.w	800c2f4 <_scanf_float+0x64>
 800c4e4:	f1b9 0f00 	cmp.w	r9, #0
 800c4e8:	f000 80de 	beq.w	800c6a8 <_scanf_float+0x418>
 800c4ec:	0591      	lsls	r1, r2, #22
 800c4ee:	bf58      	it	pl
 800c4f0:	9902      	ldrpl	r1, [sp, #8]
 800c4f2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c4f6:	bf58      	it	pl
 800c4f8:	eba9 0101 	subpl.w	r1, r9, r1
 800c4fc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c500:	bf58      	it	pl
 800c502:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c506:	6022      	str	r2, [r4, #0]
 800c508:	f04f 0900 	mov.w	r9, #0
 800c50c:	e789      	b.n	800c422 <_scanf_float+0x192>
 800c50e:	f04f 0a03 	mov.w	sl, #3
 800c512:	e786      	b.n	800c422 <_scanf_float+0x192>
 800c514:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c518:	4639      	mov	r1, r7
 800c51a:	4640      	mov	r0, r8
 800c51c:	4798      	blx	r3
 800c51e:	2800      	cmp	r0, #0
 800c520:	f43f aedb 	beq.w	800c2da <_scanf_float+0x4a>
 800c524:	e6e6      	b.n	800c2f4 <_scanf_float+0x64>
 800c526:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c52a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c52e:	463a      	mov	r2, r7
 800c530:	4640      	mov	r0, r8
 800c532:	4798      	blx	r3
 800c534:	6923      	ldr	r3, [r4, #16]
 800c536:	3b01      	subs	r3, #1
 800c538:	6123      	str	r3, [r4, #16]
 800c53a:	e6e8      	b.n	800c30e <_scanf_float+0x7e>
 800c53c:	1e6b      	subs	r3, r5, #1
 800c53e:	2b06      	cmp	r3, #6
 800c540:	d824      	bhi.n	800c58c <_scanf_float+0x2fc>
 800c542:	2d02      	cmp	r5, #2
 800c544:	d836      	bhi.n	800c5b4 <_scanf_float+0x324>
 800c546:	9b01      	ldr	r3, [sp, #4]
 800c548:	429e      	cmp	r6, r3
 800c54a:	f67f aee4 	bls.w	800c316 <_scanf_float+0x86>
 800c54e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c552:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c556:	463a      	mov	r2, r7
 800c558:	4640      	mov	r0, r8
 800c55a:	4798      	blx	r3
 800c55c:	6923      	ldr	r3, [r4, #16]
 800c55e:	3b01      	subs	r3, #1
 800c560:	6123      	str	r3, [r4, #16]
 800c562:	e7f0      	b.n	800c546 <_scanf_float+0x2b6>
 800c564:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c568:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c56c:	463a      	mov	r2, r7
 800c56e:	4640      	mov	r0, r8
 800c570:	4798      	blx	r3
 800c572:	6923      	ldr	r3, [r4, #16]
 800c574:	3b01      	subs	r3, #1
 800c576:	6123      	str	r3, [r4, #16]
 800c578:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c57c:	fa5f fa8a 	uxtb.w	sl, sl
 800c580:	f1ba 0f02 	cmp.w	sl, #2
 800c584:	d1ee      	bne.n	800c564 <_scanf_float+0x2d4>
 800c586:	3d03      	subs	r5, #3
 800c588:	b2ed      	uxtb	r5, r5
 800c58a:	1b76      	subs	r6, r6, r5
 800c58c:	6823      	ldr	r3, [r4, #0]
 800c58e:	05da      	lsls	r2, r3, #23
 800c590:	d530      	bpl.n	800c5f4 <_scanf_float+0x364>
 800c592:	055b      	lsls	r3, r3, #21
 800c594:	d511      	bpl.n	800c5ba <_scanf_float+0x32a>
 800c596:	9b01      	ldr	r3, [sp, #4]
 800c598:	429e      	cmp	r6, r3
 800c59a:	f67f aebc 	bls.w	800c316 <_scanf_float+0x86>
 800c59e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c5a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c5a6:	463a      	mov	r2, r7
 800c5a8:	4640      	mov	r0, r8
 800c5aa:	4798      	blx	r3
 800c5ac:	6923      	ldr	r3, [r4, #16]
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	6123      	str	r3, [r4, #16]
 800c5b2:	e7f0      	b.n	800c596 <_scanf_float+0x306>
 800c5b4:	46aa      	mov	sl, r5
 800c5b6:	46b3      	mov	fp, r6
 800c5b8:	e7de      	b.n	800c578 <_scanf_float+0x2e8>
 800c5ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c5be:	6923      	ldr	r3, [r4, #16]
 800c5c0:	2965      	cmp	r1, #101	@ 0x65
 800c5c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c5c6:	f106 35ff 	add.w	r5, r6, #4294967295
 800c5ca:	6123      	str	r3, [r4, #16]
 800c5cc:	d00c      	beq.n	800c5e8 <_scanf_float+0x358>
 800c5ce:	2945      	cmp	r1, #69	@ 0x45
 800c5d0:	d00a      	beq.n	800c5e8 <_scanf_float+0x358>
 800c5d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c5d6:	463a      	mov	r2, r7
 800c5d8:	4640      	mov	r0, r8
 800c5da:	4798      	blx	r3
 800c5dc:	6923      	ldr	r3, [r4, #16]
 800c5de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	1eb5      	subs	r5, r6, #2
 800c5e6:	6123      	str	r3, [r4, #16]
 800c5e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c5ec:	463a      	mov	r2, r7
 800c5ee:	4640      	mov	r0, r8
 800c5f0:	4798      	blx	r3
 800c5f2:	462e      	mov	r6, r5
 800c5f4:	6822      	ldr	r2, [r4, #0]
 800c5f6:	f012 0210 	ands.w	r2, r2, #16
 800c5fa:	d001      	beq.n	800c600 <_scanf_float+0x370>
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	e68b      	b.n	800c318 <_scanf_float+0x88>
 800c600:	7032      	strb	r2, [r6, #0]
 800c602:	6823      	ldr	r3, [r4, #0]
 800c604:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c60c:	d11c      	bne.n	800c648 <_scanf_float+0x3b8>
 800c60e:	9b02      	ldr	r3, [sp, #8]
 800c610:	454b      	cmp	r3, r9
 800c612:	eba3 0209 	sub.w	r2, r3, r9
 800c616:	d123      	bne.n	800c660 <_scanf_float+0x3d0>
 800c618:	9901      	ldr	r1, [sp, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	4640      	mov	r0, r8
 800c61e:	f002 fd2f 	bl	800f080 <_strtod_r>
 800c622:	9b03      	ldr	r3, [sp, #12]
 800c624:	6821      	ldr	r1, [r4, #0]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f011 0f02 	tst.w	r1, #2
 800c62c:	ec57 6b10 	vmov	r6, r7, d0
 800c630:	f103 0204 	add.w	r2, r3, #4
 800c634:	d01f      	beq.n	800c676 <_scanf_float+0x3e6>
 800c636:	9903      	ldr	r1, [sp, #12]
 800c638:	600a      	str	r2, [r1, #0]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	e9c3 6700 	strd	r6, r7, [r3]
 800c640:	68e3      	ldr	r3, [r4, #12]
 800c642:	3301      	adds	r3, #1
 800c644:	60e3      	str	r3, [r4, #12]
 800c646:	e7d9      	b.n	800c5fc <_scanf_float+0x36c>
 800c648:	9b04      	ldr	r3, [sp, #16]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d0e4      	beq.n	800c618 <_scanf_float+0x388>
 800c64e:	9905      	ldr	r1, [sp, #20]
 800c650:	230a      	movs	r3, #10
 800c652:	3101      	adds	r1, #1
 800c654:	4640      	mov	r0, r8
 800c656:	f002 fd93 	bl	800f180 <_strtol_r>
 800c65a:	9b04      	ldr	r3, [sp, #16]
 800c65c:	9e05      	ldr	r6, [sp, #20]
 800c65e:	1ac2      	subs	r2, r0, r3
 800c660:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c664:	429e      	cmp	r6, r3
 800c666:	bf28      	it	cs
 800c668:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c66c:	4910      	ldr	r1, [pc, #64]	@ (800c6b0 <_scanf_float+0x420>)
 800c66e:	4630      	mov	r0, r6
 800c670:	f000 f988 	bl	800c984 <siprintf>
 800c674:	e7d0      	b.n	800c618 <_scanf_float+0x388>
 800c676:	f011 0f04 	tst.w	r1, #4
 800c67a:	9903      	ldr	r1, [sp, #12]
 800c67c:	600a      	str	r2, [r1, #0]
 800c67e:	d1dc      	bne.n	800c63a <_scanf_float+0x3aa>
 800c680:	681d      	ldr	r5, [r3, #0]
 800c682:	4632      	mov	r2, r6
 800c684:	463b      	mov	r3, r7
 800c686:	4630      	mov	r0, r6
 800c688:	4639      	mov	r1, r7
 800c68a:	f7f4 fa4f 	bl	8000b2c <__aeabi_dcmpun>
 800c68e:	b128      	cbz	r0, 800c69c <_scanf_float+0x40c>
 800c690:	4808      	ldr	r0, [pc, #32]	@ (800c6b4 <_scanf_float+0x424>)
 800c692:	f000 faef 	bl	800cc74 <nanf>
 800c696:	ed85 0a00 	vstr	s0, [r5]
 800c69a:	e7d1      	b.n	800c640 <_scanf_float+0x3b0>
 800c69c:	4630      	mov	r0, r6
 800c69e:	4639      	mov	r1, r7
 800c6a0:	f7f4 faa2 	bl	8000be8 <__aeabi_d2f>
 800c6a4:	6028      	str	r0, [r5, #0]
 800c6a6:	e7cb      	b.n	800c640 <_scanf_float+0x3b0>
 800c6a8:	f04f 0900 	mov.w	r9, #0
 800c6ac:	e629      	b.n	800c302 <_scanf_float+0x72>
 800c6ae:	bf00      	nop
 800c6b0:	08010718 	.word	0x08010718
 800c6b4:	08010aad 	.word	0x08010aad

0800c6b8 <std>:
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	b510      	push	{r4, lr}
 800c6bc:	4604      	mov	r4, r0
 800c6be:	e9c0 3300 	strd	r3, r3, [r0]
 800c6c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6c6:	6083      	str	r3, [r0, #8]
 800c6c8:	8181      	strh	r1, [r0, #12]
 800c6ca:	6643      	str	r3, [r0, #100]	@ 0x64
 800c6cc:	81c2      	strh	r2, [r0, #14]
 800c6ce:	6183      	str	r3, [r0, #24]
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	2208      	movs	r2, #8
 800c6d4:	305c      	adds	r0, #92	@ 0x5c
 800c6d6:	f000 fa4d 	bl	800cb74 <memset>
 800c6da:	4b0d      	ldr	r3, [pc, #52]	@ (800c710 <std+0x58>)
 800c6dc:	6263      	str	r3, [r4, #36]	@ 0x24
 800c6de:	4b0d      	ldr	r3, [pc, #52]	@ (800c714 <std+0x5c>)
 800c6e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c6e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c718 <std+0x60>)
 800c6e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c6e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c71c <std+0x64>)
 800c6e8:	6323      	str	r3, [r4, #48]	@ 0x30
 800c6ea:	4b0d      	ldr	r3, [pc, #52]	@ (800c720 <std+0x68>)
 800c6ec:	6224      	str	r4, [r4, #32]
 800c6ee:	429c      	cmp	r4, r3
 800c6f0:	d006      	beq.n	800c700 <std+0x48>
 800c6f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c6f6:	4294      	cmp	r4, r2
 800c6f8:	d002      	beq.n	800c700 <std+0x48>
 800c6fa:	33d0      	adds	r3, #208	@ 0xd0
 800c6fc:	429c      	cmp	r4, r3
 800c6fe:	d105      	bne.n	800c70c <std+0x54>
 800c700:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c708:	f000 bab0 	b.w	800cc6c <__retarget_lock_init_recursive>
 800c70c:	bd10      	pop	{r4, pc}
 800c70e:	bf00      	nop
 800c710:	0800c9c5 	.word	0x0800c9c5
 800c714:	0800c9e7 	.word	0x0800c9e7
 800c718:	0800ca1f 	.word	0x0800ca1f
 800c71c:	0800ca43 	.word	0x0800ca43
 800c720:	20000638 	.word	0x20000638

0800c724 <stdio_exit_handler>:
 800c724:	4a02      	ldr	r2, [pc, #8]	@ (800c730 <stdio_exit_handler+0xc>)
 800c726:	4903      	ldr	r1, [pc, #12]	@ (800c734 <stdio_exit_handler+0x10>)
 800c728:	4803      	ldr	r0, [pc, #12]	@ (800c738 <stdio_exit_handler+0x14>)
 800c72a:	f000 b869 	b.w	800c800 <_fwalk_sglue>
 800c72e:	bf00      	nop
 800c730:	2000000c 	.word	0x2000000c
 800c734:	0800f7c1 	.word	0x0800f7c1
 800c738:	2000001c 	.word	0x2000001c

0800c73c <cleanup_stdio>:
 800c73c:	6841      	ldr	r1, [r0, #4]
 800c73e:	4b0c      	ldr	r3, [pc, #48]	@ (800c770 <cleanup_stdio+0x34>)
 800c740:	4299      	cmp	r1, r3
 800c742:	b510      	push	{r4, lr}
 800c744:	4604      	mov	r4, r0
 800c746:	d001      	beq.n	800c74c <cleanup_stdio+0x10>
 800c748:	f003 f83a 	bl	800f7c0 <_fflush_r>
 800c74c:	68a1      	ldr	r1, [r4, #8]
 800c74e:	4b09      	ldr	r3, [pc, #36]	@ (800c774 <cleanup_stdio+0x38>)
 800c750:	4299      	cmp	r1, r3
 800c752:	d002      	beq.n	800c75a <cleanup_stdio+0x1e>
 800c754:	4620      	mov	r0, r4
 800c756:	f003 f833 	bl	800f7c0 <_fflush_r>
 800c75a:	68e1      	ldr	r1, [r4, #12]
 800c75c:	4b06      	ldr	r3, [pc, #24]	@ (800c778 <cleanup_stdio+0x3c>)
 800c75e:	4299      	cmp	r1, r3
 800c760:	d004      	beq.n	800c76c <cleanup_stdio+0x30>
 800c762:	4620      	mov	r0, r4
 800c764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c768:	f003 b82a 	b.w	800f7c0 <_fflush_r>
 800c76c:	bd10      	pop	{r4, pc}
 800c76e:	bf00      	nop
 800c770:	20000638 	.word	0x20000638
 800c774:	200006a0 	.word	0x200006a0
 800c778:	20000708 	.word	0x20000708

0800c77c <global_stdio_init.part.0>:
 800c77c:	b510      	push	{r4, lr}
 800c77e:	4b0b      	ldr	r3, [pc, #44]	@ (800c7ac <global_stdio_init.part.0+0x30>)
 800c780:	4c0b      	ldr	r4, [pc, #44]	@ (800c7b0 <global_stdio_init.part.0+0x34>)
 800c782:	4a0c      	ldr	r2, [pc, #48]	@ (800c7b4 <global_stdio_init.part.0+0x38>)
 800c784:	601a      	str	r2, [r3, #0]
 800c786:	4620      	mov	r0, r4
 800c788:	2200      	movs	r2, #0
 800c78a:	2104      	movs	r1, #4
 800c78c:	f7ff ff94 	bl	800c6b8 <std>
 800c790:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c794:	2201      	movs	r2, #1
 800c796:	2109      	movs	r1, #9
 800c798:	f7ff ff8e 	bl	800c6b8 <std>
 800c79c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c7a0:	2202      	movs	r2, #2
 800c7a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7a6:	2112      	movs	r1, #18
 800c7a8:	f7ff bf86 	b.w	800c6b8 <std>
 800c7ac:	20000770 	.word	0x20000770
 800c7b0:	20000638 	.word	0x20000638
 800c7b4:	0800c725 	.word	0x0800c725

0800c7b8 <__sfp_lock_acquire>:
 800c7b8:	4801      	ldr	r0, [pc, #4]	@ (800c7c0 <__sfp_lock_acquire+0x8>)
 800c7ba:	f000 ba58 	b.w	800cc6e <__retarget_lock_acquire_recursive>
 800c7be:	bf00      	nop
 800c7c0:	20000779 	.word	0x20000779

0800c7c4 <__sfp_lock_release>:
 800c7c4:	4801      	ldr	r0, [pc, #4]	@ (800c7cc <__sfp_lock_release+0x8>)
 800c7c6:	f000 ba53 	b.w	800cc70 <__retarget_lock_release_recursive>
 800c7ca:	bf00      	nop
 800c7cc:	20000779 	.word	0x20000779

0800c7d0 <__sinit>:
 800c7d0:	b510      	push	{r4, lr}
 800c7d2:	4604      	mov	r4, r0
 800c7d4:	f7ff fff0 	bl	800c7b8 <__sfp_lock_acquire>
 800c7d8:	6a23      	ldr	r3, [r4, #32]
 800c7da:	b11b      	cbz	r3, 800c7e4 <__sinit+0x14>
 800c7dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7e0:	f7ff bff0 	b.w	800c7c4 <__sfp_lock_release>
 800c7e4:	4b04      	ldr	r3, [pc, #16]	@ (800c7f8 <__sinit+0x28>)
 800c7e6:	6223      	str	r3, [r4, #32]
 800c7e8:	4b04      	ldr	r3, [pc, #16]	@ (800c7fc <__sinit+0x2c>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d1f5      	bne.n	800c7dc <__sinit+0xc>
 800c7f0:	f7ff ffc4 	bl	800c77c <global_stdio_init.part.0>
 800c7f4:	e7f2      	b.n	800c7dc <__sinit+0xc>
 800c7f6:	bf00      	nop
 800c7f8:	0800c73d 	.word	0x0800c73d
 800c7fc:	20000770 	.word	0x20000770

0800c800 <_fwalk_sglue>:
 800c800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c804:	4607      	mov	r7, r0
 800c806:	4688      	mov	r8, r1
 800c808:	4614      	mov	r4, r2
 800c80a:	2600      	movs	r6, #0
 800c80c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c810:	f1b9 0901 	subs.w	r9, r9, #1
 800c814:	d505      	bpl.n	800c822 <_fwalk_sglue+0x22>
 800c816:	6824      	ldr	r4, [r4, #0]
 800c818:	2c00      	cmp	r4, #0
 800c81a:	d1f7      	bne.n	800c80c <_fwalk_sglue+0xc>
 800c81c:	4630      	mov	r0, r6
 800c81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c822:	89ab      	ldrh	r3, [r5, #12]
 800c824:	2b01      	cmp	r3, #1
 800c826:	d907      	bls.n	800c838 <_fwalk_sglue+0x38>
 800c828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c82c:	3301      	adds	r3, #1
 800c82e:	d003      	beq.n	800c838 <_fwalk_sglue+0x38>
 800c830:	4629      	mov	r1, r5
 800c832:	4638      	mov	r0, r7
 800c834:	47c0      	blx	r8
 800c836:	4306      	orrs	r6, r0
 800c838:	3568      	adds	r5, #104	@ 0x68
 800c83a:	e7e9      	b.n	800c810 <_fwalk_sglue+0x10>

0800c83c <iprintf>:
 800c83c:	b40f      	push	{r0, r1, r2, r3}
 800c83e:	b507      	push	{r0, r1, r2, lr}
 800c840:	4906      	ldr	r1, [pc, #24]	@ (800c85c <iprintf+0x20>)
 800c842:	ab04      	add	r3, sp, #16
 800c844:	6808      	ldr	r0, [r1, #0]
 800c846:	f853 2b04 	ldr.w	r2, [r3], #4
 800c84a:	6881      	ldr	r1, [r0, #8]
 800c84c:	9301      	str	r3, [sp, #4]
 800c84e:	f002 fe1b 	bl	800f488 <_vfiprintf_r>
 800c852:	b003      	add	sp, #12
 800c854:	f85d eb04 	ldr.w	lr, [sp], #4
 800c858:	b004      	add	sp, #16
 800c85a:	4770      	bx	lr
 800c85c:	20000018 	.word	0x20000018

0800c860 <_puts_r>:
 800c860:	6a03      	ldr	r3, [r0, #32]
 800c862:	b570      	push	{r4, r5, r6, lr}
 800c864:	6884      	ldr	r4, [r0, #8]
 800c866:	4605      	mov	r5, r0
 800c868:	460e      	mov	r6, r1
 800c86a:	b90b      	cbnz	r3, 800c870 <_puts_r+0x10>
 800c86c:	f7ff ffb0 	bl	800c7d0 <__sinit>
 800c870:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c872:	07db      	lsls	r3, r3, #31
 800c874:	d405      	bmi.n	800c882 <_puts_r+0x22>
 800c876:	89a3      	ldrh	r3, [r4, #12]
 800c878:	0598      	lsls	r0, r3, #22
 800c87a:	d402      	bmi.n	800c882 <_puts_r+0x22>
 800c87c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c87e:	f000 f9f6 	bl	800cc6e <__retarget_lock_acquire_recursive>
 800c882:	89a3      	ldrh	r3, [r4, #12]
 800c884:	0719      	lsls	r1, r3, #28
 800c886:	d502      	bpl.n	800c88e <_puts_r+0x2e>
 800c888:	6923      	ldr	r3, [r4, #16]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d135      	bne.n	800c8fa <_puts_r+0x9a>
 800c88e:	4621      	mov	r1, r4
 800c890:	4628      	mov	r0, r5
 800c892:	f000 f919 	bl	800cac8 <__swsetup_r>
 800c896:	b380      	cbz	r0, 800c8fa <_puts_r+0x9a>
 800c898:	f04f 35ff 	mov.w	r5, #4294967295
 800c89c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c89e:	07da      	lsls	r2, r3, #31
 800c8a0:	d405      	bmi.n	800c8ae <_puts_r+0x4e>
 800c8a2:	89a3      	ldrh	r3, [r4, #12]
 800c8a4:	059b      	lsls	r3, r3, #22
 800c8a6:	d402      	bmi.n	800c8ae <_puts_r+0x4e>
 800c8a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8aa:	f000 f9e1 	bl	800cc70 <__retarget_lock_release_recursive>
 800c8ae:	4628      	mov	r0, r5
 800c8b0:	bd70      	pop	{r4, r5, r6, pc}
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	da04      	bge.n	800c8c0 <_puts_r+0x60>
 800c8b6:	69a2      	ldr	r2, [r4, #24]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	dc17      	bgt.n	800c8ec <_puts_r+0x8c>
 800c8bc:	290a      	cmp	r1, #10
 800c8be:	d015      	beq.n	800c8ec <_puts_r+0x8c>
 800c8c0:	6823      	ldr	r3, [r4, #0]
 800c8c2:	1c5a      	adds	r2, r3, #1
 800c8c4:	6022      	str	r2, [r4, #0]
 800c8c6:	7019      	strb	r1, [r3, #0]
 800c8c8:	68a3      	ldr	r3, [r4, #8]
 800c8ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	60a3      	str	r3, [r4, #8]
 800c8d2:	2900      	cmp	r1, #0
 800c8d4:	d1ed      	bne.n	800c8b2 <_puts_r+0x52>
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	da11      	bge.n	800c8fe <_puts_r+0x9e>
 800c8da:	4622      	mov	r2, r4
 800c8dc:	210a      	movs	r1, #10
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f000 f8b3 	bl	800ca4a <__swbuf_r>
 800c8e4:	3001      	adds	r0, #1
 800c8e6:	d0d7      	beq.n	800c898 <_puts_r+0x38>
 800c8e8:	250a      	movs	r5, #10
 800c8ea:	e7d7      	b.n	800c89c <_puts_r+0x3c>
 800c8ec:	4622      	mov	r2, r4
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	f000 f8ab 	bl	800ca4a <__swbuf_r>
 800c8f4:	3001      	adds	r0, #1
 800c8f6:	d1e7      	bne.n	800c8c8 <_puts_r+0x68>
 800c8f8:	e7ce      	b.n	800c898 <_puts_r+0x38>
 800c8fa:	3e01      	subs	r6, #1
 800c8fc:	e7e4      	b.n	800c8c8 <_puts_r+0x68>
 800c8fe:	6823      	ldr	r3, [r4, #0]
 800c900:	1c5a      	adds	r2, r3, #1
 800c902:	6022      	str	r2, [r4, #0]
 800c904:	220a      	movs	r2, #10
 800c906:	701a      	strb	r2, [r3, #0]
 800c908:	e7ee      	b.n	800c8e8 <_puts_r+0x88>
	...

0800c90c <puts>:
 800c90c:	4b02      	ldr	r3, [pc, #8]	@ (800c918 <puts+0xc>)
 800c90e:	4601      	mov	r1, r0
 800c910:	6818      	ldr	r0, [r3, #0]
 800c912:	f7ff bfa5 	b.w	800c860 <_puts_r>
 800c916:	bf00      	nop
 800c918:	20000018 	.word	0x20000018

0800c91c <sniprintf>:
 800c91c:	b40c      	push	{r2, r3}
 800c91e:	b530      	push	{r4, r5, lr}
 800c920:	4b17      	ldr	r3, [pc, #92]	@ (800c980 <sniprintf+0x64>)
 800c922:	1e0c      	subs	r4, r1, #0
 800c924:	681d      	ldr	r5, [r3, #0]
 800c926:	b09d      	sub	sp, #116	@ 0x74
 800c928:	da08      	bge.n	800c93c <sniprintf+0x20>
 800c92a:	238b      	movs	r3, #139	@ 0x8b
 800c92c:	602b      	str	r3, [r5, #0]
 800c92e:	f04f 30ff 	mov.w	r0, #4294967295
 800c932:	b01d      	add	sp, #116	@ 0x74
 800c934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c938:	b002      	add	sp, #8
 800c93a:	4770      	bx	lr
 800c93c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c940:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c944:	bf14      	ite	ne
 800c946:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c94a:	4623      	moveq	r3, r4
 800c94c:	9304      	str	r3, [sp, #16]
 800c94e:	9307      	str	r3, [sp, #28]
 800c950:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c954:	9002      	str	r0, [sp, #8]
 800c956:	9006      	str	r0, [sp, #24]
 800c958:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c95c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c95e:	ab21      	add	r3, sp, #132	@ 0x84
 800c960:	a902      	add	r1, sp, #8
 800c962:	4628      	mov	r0, r5
 800c964:	9301      	str	r3, [sp, #4]
 800c966:	f002 fc69 	bl	800f23c <_svfiprintf_r>
 800c96a:	1c43      	adds	r3, r0, #1
 800c96c:	bfbc      	itt	lt
 800c96e:	238b      	movlt	r3, #139	@ 0x8b
 800c970:	602b      	strlt	r3, [r5, #0]
 800c972:	2c00      	cmp	r4, #0
 800c974:	d0dd      	beq.n	800c932 <sniprintf+0x16>
 800c976:	9b02      	ldr	r3, [sp, #8]
 800c978:	2200      	movs	r2, #0
 800c97a:	701a      	strb	r2, [r3, #0]
 800c97c:	e7d9      	b.n	800c932 <sniprintf+0x16>
 800c97e:	bf00      	nop
 800c980:	20000018 	.word	0x20000018

0800c984 <siprintf>:
 800c984:	b40e      	push	{r1, r2, r3}
 800c986:	b500      	push	{lr}
 800c988:	b09c      	sub	sp, #112	@ 0x70
 800c98a:	ab1d      	add	r3, sp, #116	@ 0x74
 800c98c:	9002      	str	r0, [sp, #8]
 800c98e:	9006      	str	r0, [sp, #24]
 800c990:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c994:	4809      	ldr	r0, [pc, #36]	@ (800c9bc <siprintf+0x38>)
 800c996:	9107      	str	r1, [sp, #28]
 800c998:	9104      	str	r1, [sp, #16]
 800c99a:	4909      	ldr	r1, [pc, #36]	@ (800c9c0 <siprintf+0x3c>)
 800c99c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9a0:	9105      	str	r1, [sp, #20]
 800c9a2:	6800      	ldr	r0, [r0, #0]
 800c9a4:	9301      	str	r3, [sp, #4]
 800c9a6:	a902      	add	r1, sp, #8
 800c9a8:	f002 fc48 	bl	800f23c <_svfiprintf_r>
 800c9ac:	9b02      	ldr	r3, [sp, #8]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	701a      	strb	r2, [r3, #0]
 800c9b2:	b01c      	add	sp, #112	@ 0x70
 800c9b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9b8:	b003      	add	sp, #12
 800c9ba:	4770      	bx	lr
 800c9bc:	20000018 	.word	0x20000018
 800c9c0:	ffff0208 	.word	0xffff0208

0800c9c4 <__sread>:
 800c9c4:	b510      	push	{r4, lr}
 800c9c6:	460c      	mov	r4, r1
 800c9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9cc:	f000 f900 	bl	800cbd0 <_read_r>
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	bfab      	itete	ge
 800c9d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c9d6:	89a3      	ldrhlt	r3, [r4, #12]
 800c9d8:	181b      	addge	r3, r3, r0
 800c9da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c9de:	bfac      	ite	ge
 800c9e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c9e2:	81a3      	strhlt	r3, [r4, #12]
 800c9e4:	bd10      	pop	{r4, pc}

0800c9e6 <__swrite>:
 800c9e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ea:	461f      	mov	r7, r3
 800c9ec:	898b      	ldrh	r3, [r1, #12]
 800c9ee:	05db      	lsls	r3, r3, #23
 800c9f0:	4605      	mov	r5, r0
 800c9f2:	460c      	mov	r4, r1
 800c9f4:	4616      	mov	r6, r2
 800c9f6:	d505      	bpl.n	800ca04 <__swrite+0x1e>
 800c9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9fc:	2302      	movs	r3, #2
 800c9fe:	2200      	movs	r2, #0
 800ca00:	f000 f8d4 	bl	800cbac <_lseek_r>
 800ca04:	89a3      	ldrh	r3, [r4, #12]
 800ca06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca0e:	81a3      	strh	r3, [r4, #12]
 800ca10:	4632      	mov	r2, r6
 800ca12:	463b      	mov	r3, r7
 800ca14:	4628      	mov	r0, r5
 800ca16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca1a:	f000 b8eb 	b.w	800cbf4 <_write_r>

0800ca1e <__sseek>:
 800ca1e:	b510      	push	{r4, lr}
 800ca20:	460c      	mov	r4, r1
 800ca22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca26:	f000 f8c1 	bl	800cbac <_lseek_r>
 800ca2a:	1c43      	adds	r3, r0, #1
 800ca2c:	89a3      	ldrh	r3, [r4, #12]
 800ca2e:	bf15      	itete	ne
 800ca30:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ca32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ca36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ca3a:	81a3      	strheq	r3, [r4, #12]
 800ca3c:	bf18      	it	ne
 800ca3e:	81a3      	strhne	r3, [r4, #12]
 800ca40:	bd10      	pop	{r4, pc}

0800ca42 <__sclose>:
 800ca42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca46:	f000 b8a1 	b.w	800cb8c <_close_r>

0800ca4a <__swbuf_r>:
 800ca4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca4c:	460e      	mov	r6, r1
 800ca4e:	4614      	mov	r4, r2
 800ca50:	4605      	mov	r5, r0
 800ca52:	b118      	cbz	r0, 800ca5c <__swbuf_r+0x12>
 800ca54:	6a03      	ldr	r3, [r0, #32]
 800ca56:	b90b      	cbnz	r3, 800ca5c <__swbuf_r+0x12>
 800ca58:	f7ff feba 	bl	800c7d0 <__sinit>
 800ca5c:	69a3      	ldr	r3, [r4, #24]
 800ca5e:	60a3      	str	r3, [r4, #8]
 800ca60:	89a3      	ldrh	r3, [r4, #12]
 800ca62:	071a      	lsls	r2, r3, #28
 800ca64:	d501      	bpl.n	800ca6a <__swbuf_r+0x20>
 800ca66:	6923      	ldr	r3, [r4, #16]
 800ca68:	b943      	cbnz	r3, 800ca7c <__swbuf_r+0x32>
 800ca6a:	4621      	mov	r1, r4
 800ca6c:	4628      	mov	r0, r5
 800ca6e:	f000 f82b 	bl	800cac8 <__swsetup_r>
 800ca72:	b118      	cbz	r0, 800ca7c <__swbuf_r+0x32>
 800ca74:	f04f 37ff 	mov.w	r7, #4294967295
 800ca78:	4638      	mov	r0, r7
 800ca7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca7c:	6823      	ldr	r3, [r4, #0]
 800ca7e:	6922      	ldr	r2, [r4, #16]
 800ca80:	1a98      	subs	r0, r3, r2
 800ca82:	6963      	ldr	r3, [r4, #20]
 800ca84:	b2f6      	uxtb	r6, r6
 800ca86:	4283      	cmp	r3, r0
 800ca88:	4637      	mov	r7, r6
 800ca8a:	dc05      	bgt.n	800ca98 <__swbuf_r+0x4e>
 800ca8c:	4621      	mov	r1, r4
 800ca8e:	4628      	mov	r0, r5
 800ca90:	f002 fe96 	bl	800f7c0 <_fflush_r>
 800ca94:	2800      	cmp	r0, #0
 800ca96:	d1ed      	bne.n	800ca74 <__swbuf_r+0x2a>
 800ca98:	68a3      	ldr	r3, [r4, #8]
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	60a3      	str	r3, [r4, #8]
 800ca9e:	6823      	ldr	r3, [r4, #0]
 800caa0:	1c5a      	adds	r2, r3, #1
 800caa2:	6022      	str	r2, [r4, #0]
 800caa4:	701e      	strb	r6, [r3, #0]
 800caa6:	6962      	ldr	r2, [r4, #20]
 800caa8:	1c43      	adds	r3, r0, #1
 800caaa:	429a      	cmp	r2, r3
 800caac:	d004      	beq.n	800cab8 <__swbuf_r+0x6e>
 800caae:	89a3      	ldrh	r3, [r4, #12]
 800cab0:	07db      	lsls	r3, r3, #31
 800cab2:	d5e1      	bpl.n	800ca78 <__swbuf_r+0x2e>
 800cab4:	2e0a      	cmp	r6, #10
 800cab6:	d1df      	bne.n	800ca78 <__swbuf_r+0x2e>
 800cab8:	4621      	mov	r1, r4
 800caba:	4628      	mov	r0, r5
 800cabc:	f002 fe80 	bl	800f7c0 <_fflush_r>
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d0d9      	beq.n	800ca78 <__swbuf_r+0x2e>
 800cac4:	e7d6      	b.n	800ca74 <__swbuf_r+0x2a>
	...

0800cac8 <__swsetup_r>:
 800cac8:	b538      	push	{r3, r4, r5, lr}
 800caca:	4b29      	ldr	r3, [pc, #164]	@ (800cb70 <__swsetup_r+0xa8>)
 800cacc:	4605      	mov	r5, r0
 800cace:	6818      	ldr	r0, [r3, #0]
 800cad0:	460c      	mov	r4, r1
 800cad2:	b118      	cbz	r0, 800cadc <__swsetup_r+0x14>
 800cad4:	6a03      	ldr	r3, [r0, #32]
 800cad6:	b90b      	cbnz	r3, 800cadc <__swsetup_r+0x14>
 800cad8:	f7ff fe7a 	bl	800c7d0 <__sinit>
 800cadc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cae0:	0719      	lsls	r1, r3, #28
 800cae2:	d422      	bmi.n	800cb2a <__swsetup_r+0x62>
 800cae4:	06da      	lsls	r2, r3, #27
 800cae6:	d407      	bmi.n	800caf8 <__swsetup_r+0x30>
 800cae8:	2209      	movs	r2, #9
 800caea:	602a      	str	r2, [r5, #0]
 800caec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caf0:	81a3      	strh	r3, [r4, #12]
 800caf2:	f04f 30ff 	mov.w	r0, #4294967295
 800caf6:	e033      	b.n	800cb60 <__swsetup_r+0x98>
 800caf8:	0758      	lsls	r0, r3, #29
 800cafa:	d512      	bpl.n	800cb22 <__swsetup_r+0x5a>
 800cafc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cafe:	b141      	cbz	r1, 800cb12 <__swsetup_r+0x4a>
 800cb00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb04:	4299      	cmp	r1, r3
 800cb06:	d002      	beq.n	800cb0e <__swsetup_r+0x46>
 800cb08:	4628      	mov	r0, r5
 800cb0a:	f000 ff05 	bl	800d918 <_free_r>
 800cb0e:	2300      	movs	r3, #0
 800cb10:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb12:	89a3      	ldrh	r3, [r4, #12]
 800cb14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cb18:	81a3      	strh	r3, [r4, #12]
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	6063      	str	r3, [r4, #4]
 800cb1e:	6923      	ldr	r3, [r4, #16]
 800cb20:	6023      	str	r3, [r4, #0]
 800cb22:	89a3      	ldrh	r3, [r4, #12]
 800cb24:	f043 0308 	orr.w	r3, r3, #8
 800cb28:	81a3      	strh	r3, [r4, #12]
 800cb2a:	6923      	ldr	r3, [r4, #16]
 800cb2c:	b94b      	cbnz	r3, 800cb42 <__swsetup_r+0x7a>
 800cb2e:	89a3      	ldrh	r3, [r4, #12]
 800cb30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cb34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb38:	d003      	beq.n	800cb42 <__swsetup_r+0x7a>
 800cb3a:	4621      	mov	r1, r4
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	f002 fe8d 	bl	800f85c <__smakebuf_r>
 800cb42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb46:	f013 0201 	ands.w	r2, r3, #1
 800cb4a:	d00a      	beq.n	800cb62 <__swsetup_r+0x9a>
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	60a2      	str	r2, [r4, #8]
 800cb50:	6962      	ldr	r2, [r4, #20]
 800cb52:	4252      	negs	r2, r2
 800cb54:	61a2      	str	r2, [r4, #24]
 800cb56:	6922      	ldr	r2, [r4, #16]
 800cb58:	b942      	cbnz	r2, 800cb6c <__swsetup_r+0xa4>
 800cb5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cb5e:	d1c5      	bne.n	800caec <__swsetup_r+0x24>
 800cb60:	bd38      	pop	{r3, r4, r5, pc}
 800cb62:	0799      	lsls	r1, r3, #30
 800cb64:	bf58      	it	pl
 800cb66:	6962      	ldrpl	r2, [r4, #20]
 800cb68:	60a2      	str	r2, [r4, #8]
 800cb6a:	e7f4      	b.n	800cb56 <__swsetup_r+0x8e>
 800cb6c:	2000      	movs	r0, #0
 800cb6e:	e7f7      	b.n	800cb60 <__swsetup_r+0x98>
 800cb70:	20000018 	.word	0x20000018

0800cb74 <memset>:
 800cb74:	4402      	add	r2, r0
 800cb76:	4603      	mov	r3, r0
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d100      	bne.n	800cb7e <memset+0xa>
 800cb7c:	4770      	bx	lr
 800cb7e:	f803 1b01 	strb.w	r1, [r3], #1
 800cb82:	e7f9      	b.n	800cb78 <memset+0x4>

0800cb84 <_localeconv_r>:
 800cb84:	4800      	ldr	r0, [pc, #0]	@ (800cb88 <_localeconv_r+0x4>)
 800cb86:	4770      	bx	lr
 800cb88:	20000158 	.word	0x20000158

0800cb8c <_close_r>:
 800cb8c:	b538      	push	{r3, r4, r5, lr}
 800cb8e:	4d06      	ldr	r5, [pc, #24]	@ (800cba8 <_close_r+0x1c>)
 800cb90:	2300      	movs	r3, #0
 800cb92:	4604      	mov	r4, r0
 800cb94:	4608      	mov	r0, r1
 800cb96:	602b      	str	r3, [r5, #0]
 800cb98:	f7f5 ff9a 	bl	8002ad0 <_close>
 800cb9c:	1c43      	adds	r3, r0, #1
 800cb9e:	d102      	bne.n	800cba6 <_close_r+0x1a>
 800cba0:	682b      	ldr	r3, [r5, #0]
 800cba2:	b103      	cbz	r3, 800cba6 <_close_r+0x1a>
 800cba4:	6023      	str	r3, [r4, #0]
 800cba6:	bd38      	pop	{r3, r4, r5, pc}
 800cba8:	20000774 	.word	0x20000774

0800cbac <_lseek_r>:
 800cbac:	b538      	push	{r3, r4, r5, lr}
 800cbae:	4d07      	ldr	r5, [pc, #28]	@ (800cbcc <_lseek_r+0x20>)
 800cbb0:	4604      	mov	r4, r0
 800cbb2:	4608      	mov	r0, r1
 800cbb4:	4611      	mov	r1, r2
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	602a      	str	r2, [r5, #0]
 800cbba:	461a      	mov	r2, r3
 800cbbc:	f7f5 ffaf 	bl	8002b1e <_lseek>
 800cbc0:	1c43      	adds	r3, r0, #1
 800cbc2:	d102      	bne.n	800cbca <_lseek_r+0x1e>
 800cbc4:	682b      	ldr	r3, [r5, #0]
 800cbc6:	b103      	cbz	r3, 800cbca <_lseek_r+0x1e>
 800cbc8:	6023      	str	r3, [r4, #0]
 800cbca:	bd38      	pop	{r3, r4, r5, pc}
 800cbcc:	20000774 	.word	0x20000774

0800cbd0 <_read_r>:
 800cbd0:	b538      	push	{r3, r4, r5, lr}
 800cbd2:	4d07      	ldr	r5, [pc, #28]	@ (800cbf0 <_read_r+0x20>)
 800cbd4:	4604      	mov	r4, r0
 800cbd6:	4608      	mov	r0, r1
 800cbd8:	4611      	mov	r1, r2
 800cbda:	2200      	movs	r2, #0
 800cbdc:	602a      	str	r2, [r5, #0]
 800cbde:	461a      	mov	r2, r3
 800cbe0:	f7f5 ff3d 	bl	8002a5e <_read>
 800cbe4:	1c43      	adds	r3, r0, #1
 800cbe6:	d102      	bne.n	800cbee <_read_r+0x1e>
 800cbe8:	682b      	ldr	r3, [r5, #0]
 800cbea:	b103      	cbz	r3, 800cbee <_read_r+0x1e>
 800cbec:	6023      	str	r3, [r4, #0]
 800cbee:	bd38      	pop	{r3, r4, r5, pc}
 800cbf0:	20000774 	.word	0x20000774

0800cbf4 <_write_r>:
 800cbf4:	b538      	push	{r3, r4, r5, lr}
 800cbf6:	4d07      	ldr	r5, [pc, #28]	@ (800cc14 <_write_r+0x20>)
 800cbf8:	4604      	mov	r4, r0
 800cbfa:	4608      	mov	r0, r1
 800cbfc:	4611      	mov	r1, r2
 800cbfe:	2200      	movs	r2, #0
 800cc00:	602a      	str	r2, [r5, #0]
 800cc02:	461a      	mov	r2, r3
 800cc04:	f7f5 ff48 	bl	8002a98 <_write>
 800cc08:	1c43      	adds	r3, r0, #1
 800cc0a:	d102      	bne.n	800cc12 <_write_r+0x1e>
 800cc0c:	682b      	ldr	r3, [r5, #0]
 800cc0e:	b103      	cbz	r3, 800cc12 <_write_r+0x1e>
 800cc10:	6023      	str	r3, [r4, #0]
 800cc12:	bd38      	pop	{r3, r4, r5, pc}
 800cc14:	20000774 	.word	0x20000774

0800cc18 <__errno>:
 800cc18:	4b01      	ldr	r3, [pc, #4]	@ (800cc20 <__errno+0x8>)
 800cc1a:	6818      	ldr	r0, [r3, #0]
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop
 800cc20:	20000018 	.word	0x20000018

0800cc24 <__libc_init_array>:
 800cc24:	b570      	push	{r4, r5, r6, lr}
 800cc26:	4d0d      	ldr	r5, [pc, #52]	@ (800cc5c <__libc_init_array+0x38>)
 800cc28:	4c0d      	ldr	r4, [pc, #52]	@ (800cc60 <__libc_init_array+0x3c>)
 800cc2a:	1b64      	subs	r4, r4, r5
 800cc2c:	10a4      	asrs	r4, r4, #2
 800cc2e:	2600      	movs	r6, #0
 800cc30:	42a6      	cmp	r6, r4
 800cc32:	d109      	bne.n	800cc48 <__libc_init_array+0x24>
 800cc34:	4d0b      	ldr	r5, [pc, #44]	@ (800cc64 <__libc_init_array+0x40>)
 800cc36:	4c0c      	ldr	r4, [pc, #48]	@ (800cc68 <__libc_init_array+0x44>)
 800cc38:	f003 fae0 	bl	80101fc <_init>
 800cc3c:	1b64      	subs	r4, r4, r5
 800cc3e:	10a4      	asrs	r4, r4, #2
 800cc40:	2600      	movs	r6, #0
 800cc42:	42a6      	cmp	r6, r4
 800cc44:	d105      	bne.n	800cc52 <__libc_init_array+0x2e>
 800cc46:	bd70      	pop	{r4, r5, r6, pc}
 800cc48:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc4c:	4798      	blx	r3
 800cc4e:	3601      	adds	r6, #1
 800cc50:	e7ee      	b.n	800cc30 <__libc_init_array+0xc>
 800cc52:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc56:	4798      	blx	r3
 800cc58:	3601      	adds	r6, #1
 800cc5a:	e7f2      	b.n	800cc42 <__libc_init_array+0x1e>
 800cc5c:	08010b18 	.word	0x08010b18
 800cc60:	08010b18 	.word	0x08010b18
 800cc64:	08010b18 	.word	0x08010b18
 800cc68:	08010b1c 	.word	0x08010b1c

0800cc6c <__retarget_lock_init_recursive>:
 800cc6c:	4770      	bx	lr

0800cc6e <__retarget_lock_acquire_recursive>:
 800cc6e:	4770      	bx	lr

0800cc70 <__retarget_lock_release_recursive>:
 800cc70:	4770      	bx	lr
	...

0800cc74 <nanf>:
 800cc74:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cc7c <nanf+0x8>
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	7fc00000 	.word	0x7fc00000

0800cc80 <quorem>:
 800cc80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc84:	6903      	ldr	r3, [r0, #16]
 800cc86:	690c      	ldr	r4, [r1, #16]
 800cc88:	42a3      	cmp	r3, r4
 800cc8a:	4607      	mov	r7, r0
 800cc8c:	db7e      	blt.n	800cd8c <quorem+0x10c>
 800cc8e:	3c01      	subs	r4, #1
 800cc90:	f101 0814 	add.w	r8, r1, #20
 800cc94:	00a3      	lsls	r3, r4, #2
 800cc96:	f100 0514 	add.w	r5, r0, #20
 800cc9a:	9300      	str	r3, [sp, #0]
 800cc9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cca0:	9301      	str	r3, [sp, #4]
 800cca2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cca6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	429a      	cmp	r2, r3
 800ccae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ccb2:	fbb2 f6f3 	udiv	r6, r2, r3
 800ccb6:	d32e      	bcc.n	800cd16 <quorem+0x96>
 800ccb8:	f04f 0a00 	mov.w	sl, #0
 800ccbc:	46c4      	mov	ip, r8
 800ccbe:	46ae      	mov	lr, r5
 800ccc0:	46d3      	mov	fp, sl
 800ccc2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ccc6:	b298      	uxth	r0, r3
 800ccc8:	fb06 a000 	mla	r0, r6, r0, sl
 800cccc:	0c02      	lsrs	r2, r0, #16
 800ccce:	0c1b      	lsrs	r3, r3, #16
 800ccd0:	fb06 2303 	mla	r3, r6, r3, r2
 800ccd4:	f8de 2000 	ldr.w	r2, [lr]
 800ccd8:	b280      	uxth	r0, r0
 800ccda:	b292      	uxth	r2, r2
 800ccdc:	1a12      	subs	r2, r2, r0
 800ccde:	445a      	add	r2, fp
 800cce0:	f8de 0000 	ldr.w	r0, [lr]
 800cce4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cce8:	b29b      	uxth	r3, r3
 800ccea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ccee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ccf2:	b292      	uxth	r2, r2
 800ccf4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ccf8:	45e1      	cmp	r9, ip
 800ccfa:	f84e 2b04 	str.w	r2, [lr], #4
 800ccfe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cd02:	d2de      	bcs.n	800ccc2 <quorem+0x42>
 800cd04:	9b00      	ldr	r3, [sp, #0]
 800cd06:	58eb      	ldr	r3, [r5, r3]
 800cd08:	b92b      	cbnz	r3, 800cd16 <quorem+0x96>
 800cd0a:	9b01      	ldr	r3, [sp, #4]
 800cd0c:	3b04      	subs	r3, #4
 800cd0e:	429d      	cmp	r5, r3
 800cd10:	461a      	mov	r2, r3
 800cd12:	d32f      	bcc.n	800cd74 <quorem+0xf4>
 800cd14:	613c      	str	r4, [r7, #16]
 800cd16:	4638      	mov	r0, r7
 800cd18:	f001 f9c2 	bl	800e0a0 <__mcmp>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	db25      	blt.n	800cd6c <quorem+0xec>
 800cd20:	4629      	mov	r1, r5
 800cd22:	2000      	movs	r0, #0
 800cd24:	f858 2b04 	ldr.w	r2, [r8], #4
 800cd28:	f8d1 c000 	ldr.w	ip, [r1]
 800cd2c:	fa1f fe82 	uxth.w	lr, r2
 800cd30:	fa1f f38c 	uxth.w	r3, ip
 800cd34:	eba3 030e 	sub.w	r3, r3, lr
 800cd38:	4403      	add	r3, r0
 800cd3a:	0c12      	lsrs	r2, r2, #16
 800cd3c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cd40:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd4a:	45c1      	cmp	r9, r8
 800cd4c:	f841 3b04 	str.w	r3, [r1], #4
 800cd50:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cd54:	d2e6      	bcs.n	800cd24 <quorem+0xa4>
 800cd56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd5e:	b922      	cbnz	r2, 800cd6a <quorem+0xea>
 800cd60:	3b04      	subs	r3, #4
 800cd62:	429d      	cmp	r5, r3
 800cd64:	461a      	mov	r2, r3
 800cd66:	d30b      	bcc.n	800cd80 <quorem+0x100>
 800cd68:	613c      	str	r4, [r7, #16]
 800cd6a:	3601      	adds	r6, #1
 800cd6c:	4630      	mov	r0, r6
 800cd6e:	b003      	add	sp, #12
 800cd70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd74:	6812      	ldr	r2, [r2, #0]
 800cd76:	3b04      	subs	r3, #4
 800cd78:	2a00      	cmp	r2, #0
 800cd7a:	d1cb      	bne.n	800cd14 <quorem+0x94>
 800cd7c:	3c01      	subs	r4, #1
 800cd7e:	e7c6      	b.n	800cd0e <quorem+0x8e>
 800cd80:	6812      	ldr	r2, [r2, #0]
 800cd82:	3b04      	subs	r3, #4
 800cd84:	2a00      	cmp	r2, #0
 800cd86:	d1ef      	bne.n	800cd68 <quorem+0xe8>
 800cd88:	3c01      	subs	r4, #1
 800cd8a:	e7ea      	b.n	800cd62 <quorem+0xe2>
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	e7ee      	b.n	800cd6e <quorem+0xee>

0800cd90 <_dtoa_r>:
 800cd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd94:	69c7      	ldr	r7, [r0, #28]
 800cd96:	b099      	sub	sp, #100	@ 0x64
 800cd98:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cd9c:	ec55 4b10 	vmov	r4, r5, d0
 800cda0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cda2:	9109      	str	r1, [sp, #36]	@ 0x24
 800cda4:	4683      	mov	fp, r0
 800cda6:	920e      	str	r2, [sp, #56]	@ 0x38
 800cda8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cdaa:	b97f      	cbnz	r7, 800cdcc <_dtoa_r+0x3c>
 800cdac:	2010      	movs	r0, #16
 800cdae:	f000 fdfd 	bl	800d9ac <malloc>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	f8cb 001c 	str.w	r0, [fp, #28]
 800cdb8:	b920      	cbnz	r0, 800cdc4 <_dtoa_r+0x34>
 800cdba:	4ba7      	ldr	r3, [pc, #668]	@ (800d058 <_dtoa_r+0x2c8>)
 800cdbc:	21ef      	movs	r1, #239	@ 0xef
 800cdbe:	48a7      	ldr	r0, [pc, #668]	@ (800d05c <_dtoa_r+0x2cc>)
 800cdc0:	f002 fdfe 	bl	800f9c0 <__assert_func>
 800cdc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cdc8:	6007      	str	r7, [r0, #0]
 800cdca:	60c7      	str	r7, [r0, #12]
 800cdcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cdd0:	6819      	ldr	r1, [r3, #0]
 800cdd2:	b159      	cbz	r1, 800cdec <_dtoa_r+0x5c>
 800cdd4:	685a      	ldr	r2, [r3, #4]
 800cdd6:	604a      	str	r2, [r1, #4]
 800cdd8:	2301      	movs	r3, #1
 800cdda:	4093      	lsls	r3, r2
 800cddc:	608b      	str	r3, [r1, #8]
 800cdde:	4658      	mov	r0, fp
 800cde0:	f000 feda 	bl	800db98 <_Bfree>
 800cde4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cde8:	2200      	movs	r2, #0
 800cdea:	601a      	str	r2, [r3, #0]
 800cdec:	1e2b      	subs	r3, r5, #0
 800cdee:	bfb9      	ittee	lt
 800cdf0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cdf4:	9303      	strlt	r3, [sp, #12]
 800cdf6:	2300      	movge	r3, #0
 800cdf8:	6033      	strge	r3, [r6, #0]
 800cdfa:	9f03      	ldr	r7, [sp, #12]
 800cdfc:	4b98      	ldr	r3, [pc, #608]	@ (800d060 <_dtoa_r+0x2d0>)
 800cdfe:	bfbc      	itt	lt
 800ce00:	2201      	movlt	r2, #1
 800ce02:	6032      	strlt	r2, [r6, #0]
 800ce04:	43bb      	bics	r3, r7
 800ce06:	d112      	bne.n	800ce2e <_dtoa_r+0x9e>
 800ce08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ce0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ce0e:	6013      	str	r3, [r2, #0]
 800ce10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ce14:	4323      	orrs	r3, r4
 800ce16:	f000 854d 	beq.w	800d8b4 <_dtoa_r+0xb24>
 800ce1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ce1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d074 <_dtoa_r+0x2e4>
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f000 854f 	beq.w	800d8c4 <_dtoa_r+0xb34>
 800ce26:	f10a 0303 	add.w	r3, sl, #3
 800ce2a:	f000 bd49 	b.w	800d8c0 <_dtoa_r+0xb30>
 800ce2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce32:	2200      	movs	r2, #0
 800ce34:	ec51 0b17 	vmov	r0, r1, d7
 800ce38:	2300      	movs	r3, #0
 800ce3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ce3e:	f7f3 fe43 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce42:	4680      	mov	r8, r0
 800ce44:	b158      	cbz	r0, 800ce5e <_dtoa_r+0xce>
 800ce46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ce48:	2301      	movs	r3, #1
 800ce4a:	6013      	str	r3, [r2, #0]
 800ce4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ce4e:	b113      	cbz	r3, 800ce56 <_dtoa_r+0xc6>
 800ce50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ce52:	4b84      	ldr	r3, [pc, #528]	@ (800d064 <_dtoa_r+0x2d4>)
 800ce54:	6013      	str	r3, [r2, #0]
 800ce56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d078 <_dtoa_r+0x2e8>
 800ce5a:	f000 bd33 	b.w	800d8c4 <_dtoa_r+0xb34>
 800ce5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ce62:	aa16      	add	r2, sp, #88	@ 0x58
 800ce64:	a917      	add	r1, sp, #92	@ 0x5c
 800ce66:	4658      	mov	r0, fp
 800ce68:	f001 fa3a 	bl	800e2e0 <__d2b>
 800ce6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ce70:	4681      	mov	r9, r0
 800ce72:	2e00      	cmp	r6, #0
 800ce74:	d077      	beq.n	800cf66 <_dtoa_r+0x1d6>
 800ce76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ce7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ce88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ce8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ce90:	4619      	mov	r1, r3
 800ce92:	2200      	movs	r2, #0
 800ce94:	4b74      	ldr	r3, [pc, #464]	@ (800d068 <_dtoa_r+0x2d8>)
 800ce96:	f7f3 f9f7 	bl	8000288 <__aeabi_dsub>
 800ce9a:	a369      	add	r3, pc, #420	@ (adr r3, 800d040 <_dtoa_r+0x2b0>)
 800ce9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea0:	f7f3 fbaa 	bl	80005f8 <__aeabi_dmul>
 800cea4:	a368      	add	r3, pc, #416	@ (adr r3, 800d048 <_dtoa_r+0x2b8>)
 800cea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceaa:	f7f3 f9ef 	bl	800028c <__adddf3>
 800ceae:	4604      	mov	r4, r0
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	460d      	mov	r5, r1
 800ceb4:	f7f3 fb36 	bl	8000524 <__aeabi_i2d>
 800ceb8:	a365      	add	r3, pc, #404	@ (adr r3, 800d050 <_dtoa_r+0x2c0>)
 800ceba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebe:	f7f3 fb9b 	bl	80005f8 <__aeabi_dmul>
 800cec2:	4602      	mov	r2, r0
 800cec4:	460b      	mov	r3, r1
 800cec6:	4620      	mov	r0, r4
 800cec8:	4629      	mov	r1, r5
 800ceca:	f7f3 f9df 	bl	800028c <__adddf3>
 800cece:	4604      	mov	r4, r0
 800ced0:	460d      	mov	r5, r1
 800ced2:	f7f3 fe41 	bl	8000b58 <__aeabi_d2iz>
 800ced6:	2200      	movs	r2, #0
 800ced8:	4607      	mov	r7, r0
 800ceda:	2300      	movs	r3, #0
 800cedc:	4620      	mov	r0, r4
 800cede:	4629      	mov	r1, r5
 800cee0:	f7f3 fdfc 	bl	8000adc <__aeabi_dcmplt>
 800cee4:	b140      	cbz	r0, 800cef8 <_dtoa_r+0x168>
 800cee6:	4638      	mov	r0, r7
 800cee8:	f7f3 fb1c 	bl	8000524 <__aeabi_i2d>
 800ceec:	4622      	mov	r2, r4
 800ceee:	462b      	mov	r3, r5
 800cef0:	f7f3 fdea 	bl	8000ac8 <__aeabi_dcmpeq>
 800cef4:	b900      	cbnz	r0, 800cef8 <_dtoa_r+0x168>
 800cef6:	3f01      	subs	r7, #1
 800cef8:	2f16      	cmp	r7, #22
 800cefa:	d851      	bhi.n	800cfa0 <_dtoa_r+0x210>
 800cefc:	4b5b      	ldr	r3, [pc, #364]	@ (800d06c <_dtoa_r+0x2dc>)
 800cefe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf0a:	f7f3 fde7 	bl	8000adc <__aeabi_dcmplt>
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d048      	beq.n	800cfa4 <_dtoa_r+0x214>
 800cf12:	3f01      	subs	r7, #1
 800cf14:	2300      	movs	r3, #0
 800cf16:	9312      	str	r3, [sp, #72]	@ 0x48
 800cf18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cf1a:	1b9b      	subs	r3, r3, r6
 800cf1c:	1e5a      	subs	r2, r3, #1
 800cf1e:	bf44      	itt	mi
 800cf20:	f1c3 0801 	rsbmi	r8, r3, #1
 800cf24:	2300      	movmi	r3, #0
 800cf26:	9208      	str	r2, [sp, #32]
 800cf28:	bf54      	ite	pl
 800cf2a:	f04f 0800 	movpl.w	r8, #0
 800cf2e:	9308      	strmi	r3, [sp, #32]
 800cf30:	2f00      	cmp	r7, #0
 800cf32:	db39      	blt.n	800cfa8 <_dtoa_r+0x218>
 800cf34:	9b08      	ldr	r3, [sp, #32]
 800cf36:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cf38:	443b      	add	r3, r7
 800cf3a:	9308      	str	r3, [sp, #32]
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf42:	2b09      	cmp	r3, #9
 800cf44:	d864      	bhi.n	800d010 <_dtoa_r+0x280>
 800cf46:	2b05      	cmp	r3, #5
 800cf48:	bfc4      	itt	gt
 800cf4a:	3b04      	subgt	r3, #4
 800cf4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cf4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf50:	f1a3 0302 	sub.w	r3, r3, #2
 800cf54:	bfcc      	ite	gt
 800cf56:	2400      	movgt	r4, #0
 800cf58:	2401      	movle	r4, #1
 800cf5a:	2b03      	cmp	r3, #3
 800cf5c:	d863      	bhi.n	800d026 <_dtoa_r+0x296>
 800cf5e:	e8df f003 	tbb	[pc, r3]
 800cf62:	372a      	.short	0x372a
 800cf64:	5535      	.short	0x5535
 800cf66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cf6a:	441e      	add	r6, r3
 800cf6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cf70:	2b20      	cmp	r3, #32
 800cf72:	bfc1      	itttt	gt
 800cf74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cf78:	409f      	lslgt	r7, r3
 800cf7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cf7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cf82:	bfd6      	itet	le
 800cf84:	f1c3 0320 	rsble	r3, r3, #32
 800cf88:	ea47 0003 	orrgt.w	r0, r7, r3
 800cf8c:	fa04 f003 	lslle.w	r0, r4, r3
 800cf90:	f7f3 fab8 	bl	8000504 <__aeabi_ui2d>
 800cf94:	2201      	movs	r2, #1
 800cf96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cf9a:	3e01      	subs	r6, #1
 800cf9c:	9214      	str	r2, [sp, #80]	@ 0x50
 800cf9e:	e777      	b.n	800ce90 <_dtoa_r+0x100>
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e7b8      	b.n	800cf16 <_dtoa_r+0x186>
 800cfa4:	9012      	str	r0, [sp, #72]	@ 0x48
 800cfa6:	e7b7      	b.n	800cf18 <_dtoa_r+0x188>
 800cfa8:	427b      	negs	r3, r7
 800cfaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfac:	2300      	movs	r3, #0
 800cfae:	eba8 0807 	sub.w	r8, r8, r7
 800cfb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cfb4:	e7c4      	b.n	800cf40 <_dtoa_r+0x1b0>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cfba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	dc35      	bgt.n	800d02c <_dtoa_r+0x29c>
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	9300      	str	r3, [sp, #0]
 800cfc4:	9307      	str	r3, [sp, #28]
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	920e      	str	r2, [sp, #56]	@ 0x38
 800cfca:	e00b      	b.n	800cfe4 <_dtoa_r+0x254>
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e7f3      	b.n	800cfb8 <_dtoa_r+0x228>
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cfd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfd6:	18fb      	adds	r3, r7, r3
 800cfd8:	9300      	str	r3, [sp, #0]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	9307      	str	r3, [sp, #28]
 800cfe0:	bfb8      	it	lt
 800cfe2:	2301      	movlt	r3, #1
 800cfe4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cfe8:	2100      	movs	r1, #0
 800cfea:	2204      	movs	r2, #4
 800cfec:	f102 0514 	add.w	r5, r2, #20
 800cff0:	429d      	cmp	r5, r3
 800cff2:	d91f      	bls.n	800d034 <_dtoa_r+0x2a4>
 800cff4:	6041      	str	r1, [r0, #4]
 800cff6:	4658      	mov	r0, fp
 800cff8:	f000 fd8e 	bl	800db18 <_Balloc>
 800cffc:	4682      	mov	sl, r0
 800cffe:	2800      	cmp	r0, #0
 800d000:	d13c      	bne.n	800d07c <_dtoa_r+0x2ec>
 800d002:	4b1b      	ldr	r3, [pc, #108]	@ (800d070 <_dtoa_r+0x2e0>)
 800d004:	4602      	mov	r2, r0
 800d006:	f240 11af 	movw	r1, #431	@ 0x1af
 800d00a:	e6d8      	b.n	800cdbe <_dtoa_r+0x2e>
 800d00c:	2301      	movs	r3, #1
 800d00e:	e7e0      	b.n	800cfd2 <_dtoa_r+0x242>
 800d010:	2401      	movs	r4, #1
 800d012:	2300      	movs	r3, #0
 800d014:	9309      	str	r3, [sp, #36]	@ 0x24
 800d016:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d018:	f04f 33ff 	mov.w	r3, #4294967295
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	9307      	str	r3, [sp, #28]
 800d020:	2200      	movs	r2, #0
 800d022:	2312      	movs	r3, #18
 800d024:	e7d0      	b.n	800cfc8 <_dtoa_r+0x238>
 800d026:	2301      	movs	r3, #1
 800d028:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d02a:	e7f5      	b.n	800d018 <_dtoa_r+0x288>
 800d02c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	9307      	str	r3, [sp, #28]
 800d032:	e7d7      	b.n	800cfe4 <_dtoa_r+0x254>
 800d034:	3101      	adds	r1, #1
 800d036:	0052      	lsls	r2, r2, #1
 800d038:	e7d8      	b.n	800cfec <_dtoa_r+0x25c>
 800d03a:	bf00      	nop
 800d03c:	f3af 8000 	nop.w
 800d040:	636f4361 	.word	0x636f4361
 800d044:	3fd287a7 	.word	0x3fd287a7
 800d048:	8b60c8b3 	.word	0x8b60c8b3
 800d04c:	3fc68a28 	.word	0x3fc68a28
 800d050:	509f79fb 	.word	0x509f79fb
 800d054:	3fd34413 	.word	0x3fd34413
 800d058:	0801072a 	.word	0x0801072a
 800d05c:	08010741 	.word	0x08010741
 800d060:	7ff00000 	.word	0x7ff00000
 800d064:	080106f5 	.word	0x080106f5
 800d068:	3ff80000 	.word	0x3ff80000
 800d06c:	08010838 	.word	0x08010838
 800d070:	08010799 	.word	0x08010799
 800d074:	08010726 	.word	0x08010726
 800d078:	080106f4 	.word	0x080106f4
 800d07c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d080:	6018      	str	r0, [r3, #0]
 800d082:	9b07      	ldr	r3, [sp, #28]
 800d084:	2b0e      	cmp	r3, #14
 800d086:	f200 80a4 	bhi.w	800d1d2 <_dtoa_r+0x442>
 800d08a:	2c00      	cmp	r4, #0
 800d08c:	f000 80a1 	beq.w	800d1d2 <_dtoa_r+0x442>
 800d090:	2f00      	cmp	r7, #0
 800d092:	dd33      	ble.n	800d0fc <_dtoa_r+0x36c>
 800d094:	4bad      	ldr	r3, [pc, #692]	@ (800d34c <_dtoa_r+0x5bc>)
 800d096:	f007 020f 	and.w	r2, r7, #15
 800d09a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d09e:	ed93 7b00 	vldr	d7, [r3]
 800d0a2:	05f8      	lsls	r0, r7, #23
 800d0a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d0a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d0ac:	d516      	bpl.n	800d0dc <_dtoa_r+0x34c>
 800d0ae:	4ba8      	ldr	r3, [pc, #672]	@ (800d350 <_dtoa_r+0x5c0>)
 800d0b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d0b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d0b8:	f7f3 fbc8 	bl	800084c <__aeabi_ddiv>
 800d0bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0c0:	f004 040f 	and.w	r4, r4, #15
 800d0c4:	2603      	movs	r6, #3
 800d0c6:	4da2      	ldr	r5, [pc, #648]	@ (800d350 <_dtoa_r+0x5c0>)
 800d0c8:	b954      	cbnz	r4, 800d0e0 <_dtoa_r+0x350>
 800d0ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0d2:	f7f3 fbbb 	bl	800084c <__aeabi_ddiv>
 800d0d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0da:	e028      	b.n	800d12e <_dtoa_r+0x39e>
 800d0dc:	2602      	movs	r6, #2
 800d0de:	e7f2      	b.n	800d0c6 <_dtoa_r+0x336>
 800d0e0:	07e1      	lsls	r1, r4, #31
 800d0e2:	d508      	bpl.n	800d0f6 <_dtoa_r+0x366>
 800d0e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d0e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d0ec:	f7f3 fa84 	bl	80005f8 <__aeabi_dmul>
 800d0f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d0f4:	3601      	adds	r6, #1
 800d0f6:	1064      	asrs	r4, r4, #1
 800d0f8:	3508      	adds	r5, #8
 800d0fa:	e7e5      	b.n	800d0c8 <_dtoa_r+0x338>
 800d0fc:	f000 80d2 	beq.w	800d2a4 <_dtoa_r+0x514>
 800d100:	427c      	negs	r4, r7
 800d102:	4b92      	ldr	r3, [pc, #584]	@ (800d34c <_dtoa_r+0x5bc>)
 800d104:	4d92      	ldr	r5, [pc, #584]	@ (800d350 <_dtoa_r+0x5c0>)
 800d106:	f004 020f 	and.w	r2, r4, #15
 800d10a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d112:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d116:	f7f3 fa6f 	bl	80005f8 <__aeabi_dmul>
 800d11a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d11e:	1124      	asrs	r4, r4, #4
 800d120:	2300      	movs	r3, #0
 800d122:	2602      	movs	r6, #2
 800d124:	2c00      	cmp	r4, #0
 800d126:	f040 80b2 	bne.w	800d28e <_dtoa_r+0x4fe>
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d1d3      	bne.n	800d0d6 <_dtoa_r+0x346>
 800d12e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d130:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	f000 80b7 	beq.w	800d2a8 <_dtoa_r+0x518>
 800d13a:	4b86      	ldr	r3, [pc, #536]	@ (800d354 <_dtoa_r+0x5c4>)
 800d13c:	2200      	movs	r2, #0
 800d13e:	4620      	mov	r0, r4
 800d140:	4629      	mov	r1, r5
 800d142:	f7f3 fccb 	bl	8000adc <__aeabi_dcmplt>
 800d146:	2800      	cmp	r0, #0
 800d148:	f000 80ae 	beq.w	800d2a8 <_dtoa_r+0x518>
 800d14c:	9b07      	ldr	r3, [sp, #28]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	f000 80aa 	beq.w	800d2a8 <_dtoa_r+0x518>
 800d154:	9b00      	ldr	r3, [sp, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	dd37      	ble.n	800d1ca <_dtoa_r+0x43a>
 800d15a:	1e7b      	subs	r3, r7, #1
 800d15c:	9304      	str	r3, [sp, #16]
 800d15e:	4620      	mov	r0, r4
 800d160:	4b7d      	ldr	r3, [pc, #500]	@ (800d358 <_dtoa_r+0x5c8>)
 800d162:	2200      	movs	r2, #0
 800d164:	4629      	mov	r1, r5
 800d166:	f7f3 fa47 	bl	80005f8 <__aeabi_dmul>
 800d16a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d16e:	9c00      	ldr	r4, [sp, #0]
 800d170:	3601      	adds	r6, #1
 800d172:	4630      	mov	r0, r6
 800d174:	f7f3 f9d6 	bl	8000524 <__aeabi_i2d>
 800d178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d17c:	f7f3 fa3c 	bl	80005f8 <__aeabi_dmul>
 800d180:	4b76      	ldr	r3, [pc, #472]	@ (800d35c <_dtoa_r+0x5cc>)
 800d182:	2200      	movs	r2, #0
 800d184:	f7f3 f882 	bl	800028c <__adddf3>
 800d188:	4605      	mov	r5, r0
 800d18a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d18e:	2c00      	cmp	r4, #0
 800d190:	f040 808d 	bne.w	800d2ae <_dtoa_r+0x51e>
 800d194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d198:	4b71      	ldr	r3, [pc, #452]	@ (800d360 <_dtoa_r+0x5d0>)
 800d19a:	2200      	movs	r2, #0
 800d19c:	f7f3 f874 	bl	8000288 <__aeabi_dsub>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d1a8:	462a      	mov	r2, r5
 800d1aa:	4633      	mov	r3, r6
 800d1ac:	f7f3 fcb4 	bl	8000b18 <__aeabi_dcmpgt>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	f040 828b 	bne.w	800d6cc <_dtoa_r+0x93c>
 800d1b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1ba:	462a      	mov	r2, r5
 800d1bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d1c0:	f7f3 fc8c 	bl	8000adc <__aeabi_dcmplt>
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	f040 8128 	bne.w	800d41a <_dtoa_r+0x68a>
 800d1ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d1ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d1d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	f2c0 815a 	blt.w	800d48e <_dtoa_r+0x6fe>
 800d1da:	2f0e      	cmp	r7, #14
 800d1dc:	f300 8157 	bgt.w	800d48e <_dtoa_r+0x6fe>
 800d1e0:	4b5a      	ldr	r3, [pc, #360]	@ (800d34c <_dtoa_r+0x5bc>)
 800d1e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d1e6:	ed93 7b00 	vldr	d7, [r3]
 800d1ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	ed8d 7b00 	vstr	d7, [sp]
 800d1f2:	da03      	bge.n	800d1fc <_dtoa_r+0x46c>
 800d1f4:	9b07      	ldr	r3, [sp, #28]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	f340 8101 	ble.w	800d3fe <_dtoa_r+0x66e>
 800d1fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d200:	4656      	mov	r6, sl
 800d202:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d206:	4620      	mov	r0, r4
 800d208:	4629      	mov	r1, r5
 800d20a:	f7f3 fb1f 	bl	800084c <__aeabi_ddiv>
 800d20e:	f7f3 fca3 	bl	8000b58 <__aeabi_d2iz>
 800d212:	4680      	mov	r8, r0
 800d214:	f7f3 f986 	bl	8000524 <__aeabi_i2d>
 800d218:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d21c:	f7f3 f9ec 	bl	80005f8 <__aeabi_dmul>
 800d220:	4602      	mov	r2, r0
 800d222:	460b      	mov	r3, r1
 800d224:	4620      	mov	r0, r4
 800d226:	4629      	mov	r1, r5
 800d228:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d22c:	f7f3 f82c 	bl	8000288 <__aeabi_dsub>
 800d230:	f806 4b01 	strb.w	r4, [r6], #1
 800d234:	9d07      	ldr	r5, [sp, #28]
 800d236:	eba6 040a 	sub.w	r4, r6, sl
 800d23a:	42a5      	cmp	r5, r4
 800d23c:	4602      	mov	r2, r0
 800d23e:	460b      	mov	r3, r1
 800d240:	f040 8117 	bne.w	800d472 <_dtoa_r+0x6e2>
 800d244:	f7f3 f822 	bl	800028c <__adddf3>
 800d248:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d24c:	4604      	mov	r4, r0
 800d24e:	460d      	mov	r5, r1
 800d250:	f7f3 fc62 	bl	8000b18 <__aeabi_dcmpgt>
 800d254:	2800      	cmp	r0, #0
 800d256:	f040 80f9 	bne.w	800d44c <_dtoa_r+0x6bc>
 800d25a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d25e:	4620      	mov	r0, r4
 800d260:	4629      	mov	r1, r5
 800d262:	f7f3 fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 800d266:	b118      	cbz	r0, 800d270 <_dtoa_r+0x4e0>
 800d268:	f018 0f01 	tst.w	r8, #1
 800d26c:	f040 80ee 	bne.w	800d44c <_dtoa_r+0x6bc>
 800d270:	4649      	mov	r1, r9
 800d272:	4658      	mov	r0, fp
 800d274:	f000 fc90 	bl	800db98 <_Bfree>
 800d278:	2300      	movs	r3, #0
 800d27a:	7033      	strb	r3, [r6, #0]
 800d27c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d27e:	3701      	adds	r7, #1
 800d280:	601f      	str	r7, [r3, #0]
 800d282:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d284:	2b00      	cmp	r3, #0
 800d286:	f000 831d 	beq.w	800d8c4 <_dtoa_r+0xb34>
 800d28a:	601e      	str	r6, [r3, #0]
 800d28c:	e31a      	b.n	800d8c4 <_dtoa_r+0xb34>
 800d28e:	07e2      	lsls	r2, r4, #31
 800d290:	d505      	bpl.n	800d29e <_dtoa_r+0x50e>
 800d292:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d296:	f7f3 f9af 	bl	80005f8 <__aeabi_dmul>
 800d29a:	3601      	adds	r6, #1
 800d29c:	2301      	movs	r3, #1
 800d29e:	1064      	asrs	r4, r4, #1
 800d2a0:	3508      	adds	r5, #8
 800d2a2:	e73f      	b.n	800d124 <_dtoa_r+0x394>
 800d2a4:	2602      	movs	r6, #2
 800d2a6:	e742      	b.n	800d12e <_dtoa_r+0x39e>
 800d2a8:	9c07      	ldr	r4, [sp, #28]
 800d2aa:	9704      	str	r7, [sp, #16]
 800d2ac:	e761      	b.n	800d172 <_dtoa_r+0x3e2>
 800d2ae:	4b27      	ldr	r3, [pc, #156]	@ (800d34c <_dtoa_r+0x5bc>)
 800d2b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d2b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d2b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d2ba:	4454      	add	r4, sl
 800d2bc:	2900      	cmp	r1, #0
 800d2be:	d053      	beq.n	800d368 <_dtoa_r+0x5d8>
 800d2c0:	4928      	ldr	r1, [pc, #160]	@ (800d364 <_dtoa_r+0x5d4>)
 800d2c2:	2000      	movs	r0, #0
 800d2c4:	f7f3 fac2 	bl	800084c <__aeabi_ddiv>
 800d2c8:	4633      	mov	r3, r6
 800d2ca:	462a      	mov	r2, r5
 800d2cc:	f7f2 ffdc 	bl	8000288 <__aeabi_dsub>
 800d2d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d2d4:	4656      	mov	r6, sl
 800d2d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2da:	f7f3 fc3d 	bl	8000b58 <__aeabi_d2iz>
 800d2de:	4605      	mov	r5, r0
 800d2e0:	f7f3 f920 	bl	8000524 <__aeabi_i2d>
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	460b      	mov	r3, r1
 800d2e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2ec:	f7f2 ffcc 	bl	8000288 <__aeabi_dsub>
 800d2f0:	3530      	adds	r5, #48	@ 0x30
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d2fa:	f806 5b01 	strb.w	r5, [r6], #1
 800d2fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d302:	f7f3 fbeb 	bl	8000adc <__aeabi_dcmplt>
 800d306:	2800      	cmp	r0, #0
 800d308:	d171      	bne.n	800d3ee <_dtoa_r+0x65e>
 800d30a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d30e:	4911      	ldr	r1, [pc, #68]	@ (800d354 <_dtoa_r+0x5c4>)
 800d310:	2000      	movs	r0, #0
 800d312:	f7f2 ffb9 	bl	8000288 <__aeabi_dsub>
 800d316:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d31a:	f7f3 fbdf 	bl	8000adc <__aeabi_dcmplt>
 800d31e:	2800      	cmp	r0, #0
 800d320:	f040 8095 	bne.w	800d44e <_dtoa_r+0x6be>
 800d324:	42a6      	cmp	r6, r4
 800d326:	f43f af50 	beq.w	800d1ca <_dtoa_r+0x43a>
 800d32a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d32e:	4b0a      	ldr	r3, [pc, #40]	@ (800d358 <_dtoa_r+0x5c8>)
 800d330:	2200      	movs	r2, #0
 800d332:	f7f3 f961 	bl	80005f8 <__aeabi_dmul>
 800d336:	4b08      	ldr	r3, [pc, #32]	@ (800d358 <_dtoa_r+0x5c8>)
 800d338:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d33c:	2200      	movs	r2, #0
 800d33e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d342:	f7f3 f959 	bl	80005f8 <__aeabi_dmul>
 800d346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d34a:	e7c4      	b.n	800d2d6 <_dtoa_r+0x546>
 800d34c:	08010838 	.word	0x08010838
 800d350:	08010810 	.word	0x08010810
 800d354:	3ff00000 	.word	0x3ff00000
 800d358:	40240000 	.word	0x40240000
 800d35c:	401c0000 	.word	0x401c0000
 800d360:	40140000 	.word	0x40140000
 800d364:	3fe00000 	.word	0x3fe00000
 800d368:	4631      	mov	r1, r6
 800d36a:	4628      	mov	r0, r5
 800d36c:	f7f3 f944 	bl	80005f8 <__aeabi_dmul>
 800d370:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d374:	9415      	str	r4, [sp, #84]	@ 0x54
 800d376:	4656      	mov	r6, sl
 800d378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d37c:	f7f3 fbec 	bl	8000b58 <__aeabi_d2iz>
 800d380:	4605      	mov	r5, r0
 800d382:	f7f3 f8cf 	bl	8000524 <__aeabi_i2d>
 800d386:	4602      	mov	r2, r0
 800d388:	460b      	mov	r3, r1
 800d38a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d38e:	f7f2 ff7b 	bl	8000288 <__aeabi_dsub>
 800d392:	3530      	adds	r5, #48	@ 0x30
 800d394:	f806 5b01 	strb.w	r5, [r6], #1
 800d398:	4602      	mov	r2, r0
 800d39a:	460b      	mov	r3, r1
 800d39c:	42a6      	cmp	r6, r4
 800d39e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d3a2:	f04f 0200 	mov.w	r2, #0
 800d3a6:	d124      	bne.n	800d3f2 <_dtoa_r+0x662>
 800d3a8:	4bac      	ldr	r3, [pc, #688]	@ (800d65c <_dtoa_r+0x8cc>)
 800d3aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d3ae:	f7f2 ff6d 	bl	800028c <__adddf3>
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3ba:	f7f3 fbad 	bl	8000b18 <__aeabi_dcmpgt>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	d145      	bne.n	800d44e <_dtoa_r+0x6be>
 800d3c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d3c6:	49a5      	ldr	r1, [pc, #660]	@ (800d65c <_dtoa_r+0x8cc>)
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	f7f2 ff5d 	bl	8000288 <__aeabi_dsub>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3d6:	f7f3 fb81 	bl	8000adc <__aeabi_dcmplt>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	f43f aef5 	beq.w	800d1ca <_dtoa_r+0x43a>
 800d3e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d3e2:	1e73      	subs	r3, r6, #1
 800d3e4:	9315      	str	r3, [sp, #84]	@ 0x54
 800d3e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d3ea:	2b30      	cmp	r3, #48	@ 0x30
 800d3ec:	d0f8      	beq.n	800d3e0 <_dtoa_r+0x650>
 800d3ee:	9f04      	ldr	r7, [sp, #16]
 800d3f0:	e73e      	b.n	800d270 <_dtoa_r+0x4e0>
 800d3f2:	4b9b      	ldr	r3, [pc, #620]	@ (800d660 <_dtoa_r+0x8d0>)
 800d3f4:	f7f3 f900 	bl	80005f8 <__aeabi_dmul>
 800d3f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3fc:	e7bc      	b.n	800d378 <_dtoa_r+0x5e8>
 800d3fe:	d10c      	bne.n	800d41a <_dtoa_r+0x68a>
 800d400:	4b98      	ldr	r3, [pc, #608]	@ (800d664 <_dtoa_r+0x8d4>)
 800d402:	2200      	movs	r2, #0
 800d404:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d408:	f7f3 f8f6 	bl	80005f8 <__aeabi_dmul>
 800d40c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d410:	f7f3 fb78 	bl	8000b04 <__aeabi_dcmpge>
 800d414:	2800      	cmp	r0, #0
 800d416:	f000 8157 	beq.w	800d6c8 <_dtoa_r+0x938>
 800d41a:	2400      	movs	r4, #0
 800d41c:	4625      	mov	r5, r4
 800d41e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d420:	43db      	mvns	r3, r3
 800d422:	9304      	str	r3, [sp, #16]
 800d424:	4656      	mov	r6, sl
 800d426:	2700      	movs	r7, #0
 800d428:	4621      	mov	r1, r4
 800d42a:	4658      	mov	r0, fp
 800d42c:	f000 fbb4 	bl	800db98 <_Bfree>
 800d430:	2d00      	cmp	r5, #0
 800d432:	d0dc      	beq.n	800d3ee <_dtoa_r+0x65e>
 800d434:	b12f      	cbz	r7, 800d442 <_dtoa_r+0x6b2>
 800d436:	42af      	cmp	r7, r5
 800d438:	d003      	beq.n	800d442 <_dtoa_r+0x6b2>
 800d43a:	4639      	mov	r1, r7
 800d43c:	4658      	mov	r0, fp
 800d43e:	f000 fbab 	bl	800db98 <_Bfree>
 800d442:	4629      	mov	r1, r5
 800d444:	4658      	mov	r0, fp
 800d446:	f000 fba7 	bl	800db98 <_Bfree>
 800d44a:	e7d0      	b.n	800d3ee <_dtoa_r+0x65e>
 800d44c:	9704      	str	r7, [sp, #16]
 800d44e:	4633      	mov	r3, r6
 800d450:	461e      	mov	r6, r3
 800d452:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d456:	2a39      	cmp	r2, #57	@ 0x39
 800d458:	d107      	bne.n	800d46a <_dtoa_r+0x6da>
 800d45a:	459a      	cmp	sl, r3
 800d45c:	d1f8      	bne.n	800d450 <_dtoa_r+0x6c0>
 800d45e:	9a04      	ldr	r2, [sp, #16]
 800d460:	3201      	adds	r2, #1
 800d462:	9204      	str	r2, [sp, #16]
 800d464:	2230      	movs	r2, #48	@ 0x30
 800d466:	f88a 2000 	strb.w	r2, [sl]
 800d46a:	781a      	ldrb	r2, [r3, #0]
 800d46c:	3201      	adds	r2, #1
 800d46e:	701a      	strb	r2, [r3, #0]
 800d470:	e7bd      	b.n	800d3ee <_dtoa_r+0x65e>
 800d472:	4b7b      	ldr	r3, [pc, #492]	@ (800d660 <_dtoa_r+0x8d0>)
 800d474:	2200      	movs	r2, #0
 800d476:	f7f3 f8bf 	bl	80005f8 <__aeabi_dmul>
 800d47a:	2200      	movs	r2, #0
 800d47c:	2300      	movs	r3, #0
 800d47e:	4604      	mov	r4, r0
 800d480:	460d      	mov	r5, r1
 800d482:	f7f3 fb21 	bl	8000ac8 <__aeabi_dcmpeq>
 800d486:	2800      	cmp	r0, #0
 800d488:	f43f aebb 	beq.w	800d202 <_dtoa_r+0x472>
 800d48c:	e6f0      	b.n	800d270 <_dtoa_r+0x4e0>
 800d48e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d490:	2a00      	cmp	r2, #0
 800d492:	f000 80db 	beq.w	800d64c <_dtoa_r+0x8bc>
 800d496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d498:	2a01      	cmp	r2, #1
 800d49a:	f300 80bf 	bgt.w	800d61c <_dtoa_r+0x88c>
 800d49e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d4a0:	2a00      	cmp	r2, #0
 800d4a2:	f000 80b7 	beq.w	800d614 <_dtoa_r+0x884>
 800d4a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d4aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d4ac:	4646      	mov	r6, r8
 800d4ae:	9a08      	ldr	r2, [sp, #32]
 800d4b0:	2101      	movs	r1, #1
 800d4b2:	441a      	add	r2, r3
 800d4b4:	4658      	mov	r0, fp
 800d4b6:	4498      	add	r8, r3
 800d4b8:	9208      	str	r2, [sp, #32]
 800d4ba:	f000 fc6b 	bl	800dd94 <__i2b>
 800d4be:	4605      	mov	r5, r0
 800d4c0:	b15e      	cbz	r6, 800d4da <_dtoa_r+0x74a>
 800d4c2:	9b08      	ldr	r3, [sp, #32]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	dd08      	ble.n	800d4da <_dtoa_r+0x74a>
 800d4c8:	42b3      	cmp	r3, r6
 800d4ca:	9a08      	ldr	r2, [sp, #32]
 800d4cc:	bfa8      	it	ge
 800d4ce:	4633      	movge	r3, r6
 800d4d0:	eba8 0803 	sub.w	r8, r8, r3
 800d4d4:	1af6      	subs	r6, r6, r3
 800d4d6:	1ad3      	subs	r3, r2, r3
 800d4d8:	9308      	str	r3, [sp, #32]
 800d4da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4dc:	b1f3      	cbz	r3, 800d51c <_dtoa_r+0x78c>
 800d4de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f000 80b7 	beq.w	800d654 <_dtoa_r+0x8c4>
 800d4e6:	b18c      	cbz	r4, 800d50c <_dtoa_r+0x77c>
 800d4e8:	4629      	mov	r1, r5
 800d4ea:	4622      	mov	r2, r4
 800d4ec:	4658      	mov	r0, fp
 800d4ee:	f000 fd11 	bl	800df14 <__pow5mult>
 800d4f2:	464a      	mov	r2, r9
 800d4f4:	4601      	mov	r1, r0
 800d4f6:	4605      	mov	r5, r0
 800d4f8:	4658      	mov	r0, fp
 800d4fa:	f000 fc61 	bl	800ddc0 <__multiply>
 800d4fe:	4649      	mov	r1, r9
 800d500:	9004      	str	r0, [sp, #16]
 800d502:	4658      	mov	r0, fp
 800d504:	f000 fb48 	bl	800db98 <_Bfree>
 800d508:	9b04      	ldr	r3, [sp, #16]
 800d50a:	4699      	mov	r9, r3
 800d50c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d50e:	1b1a      	subs	r2, r3, r4
 800d510:	d004      	beq.n	800d51c <_dtoa_r+0x78c>
 800d512:	4649      	mov	r1, r9
 800d514:	4658      	mov	r0, fp
 800d516:	f000 fcfd 	bl	800df14 <__pow5mult>
 800d51a:	4681      	mov	r9, r0
 800d51c:	2101      	movs	r1, #1
 800d51e:	4658      	mov	r0, fp
 800d520:	f000 fc38 	bl	800dd94 <__i2b>
 800d524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d526:	4604      	mov	r4, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	f000 81cf 	beq.w	800d8cc <_dtoa_r+0xb3c>
 800d52e:	461a      	mov	r2, r3
 800d530:	4601      	mov	r1, r0
 800d532:	4658      	mov	r0, fp
 800d534:	f000 fcee 	bl	800df14 <__pow5mult>
 800d538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	4604      	mov	r4, r0
 800d53e:	f300 8095 	bgt.w	800d66c <_dtoa_r+0x8dc>
 800d542:	9b02      	ldr	r3, [sp, #8]
 800d544:	2b00      	cmp	r3, #0
 800d546:	f040 8087 	bne.w	800d658 <_dtoa_r+0x8c8>
 800d54a:	9b03      	ldr	r3, [sp, #12]
 800d54c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d550:	2b00      	cmp	r3, #0
 800d552:	f040 8089 	bne.w	800d668 <_dtoa_r+0x8d8>
 800d556:	9b03      	ldr	r3, [sp, #12]
 800d558:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d55c:	0d1b      	lsrs	r3, r3, #20
 800d55e:	051b      	lsls	r3, r3, #20
 800d560:	b12b      	cbz	r3, 800d56e <_dtoa_r+0x7de>
 800d562:	9b08      	ldr	r3, [sp, #32]
 800d564:	3301      	adds	r3, #1
 800d566:	9308      	str	r3, [sp, #32]
 800d568:	f108 0801 	add.w	r8, r8, #1
 800d56c:	2301      	movs	r3, #1
 800d56e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d570:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d572:	2b00      	cmp	r3, #0
 800d574:	f000 81b0 	beq.w	800d8d8 <_dtoa_r+0xb48>
 800d578:	6923      	ldr	r3, [r4, #16]
 800d57a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d57e:	6918      	ldr	r0, [r3, #16]
 800d580:	f000 fbbc 	bl	800dcfc <__hi0bits>
 800d584:	f1c0 0020 	rsb	r0, r0, #32
 800d588:	9b08      	ldr	r3, [sp, #32]
 800d58a:	4418      	add	r0, r3
 800d58c:	f010 001f 	ands.w	r0, r0, #31
 800d590:	d077      	beq.n	800d682 <_dtoa_r+0x8f2>
 800d592:	f1c0 0320 	rsb	r3, r0, #32
 800d596:	2b04      	cmp	r3, #4
 800d598:	dd6b      	ble.n	800d672 <_dtoa_r+0x8e2>
 800d59a:	9b08      	ldr	r3, [sp, #32]
 800d59c:	f1c0 001c 	rsb	r0, r0, #28
 800d5a0:	4403      	add	r3, r0
 800d5a2:	4480      	add	r8, r0
 800d5a4:	4406      	add	r6, r0
 800d5a6:	9308      	str	r3, [sp, #32]
 800d5a8:	f1b8 0f00 	cmp.w	r8, #0
 800d5ac:	dd05      	ble.n	800d5ba <_dtoa_r+0x82a>
 800d5ae:	4649      	mov	r1, r9
 800d5b0:	4642      	mov	r2, r8
 800d5b2:	4658      	mov	r0, fp
 800d5b4:	f000 fd08 	bl	800dfc8 <__lshift>
 800d5b8:	4681      	mov	r9, r0
 800d5ba:	9b08      	ldr	r3, [sp, #32]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	dd05      	ble.n	800d5cc <_dtoa_r+0x83c>
 800d5c0:	4621      	mov	r1, r4
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	4658      	mov	r0, fp
 800d5c6:	f000 fcff 	bl	800dfc8 <__lshift>
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d059      	beq.n	800d686 <_dtoa_r+0x8f6>
 800d5d2:	4621      	mov	r1, r4
 800d5d4:	4648      	mov	r0, r9
 800d5d6:	f000 fd63 	bl	800e0a0 <__mcmp>
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	da53      	bge.n	800d686 <_dtoa_r+0x8f6>
 800d5de:	1e7b      	subs	r3, r7, #1
 800d5e0:	9304      	str	r3, [sp, #16]
 800d5e2:	4649      	mov	r1, r9
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	220a      	movs	r2, #10
 800d5e8:	4658      	mov	r0, fp
 800d5ea:	f000 faf7 	bl	800dbdc <__multadd>
 800d5ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5f0:	4681      	mov	r9, r0
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	f000 8172 	beq.w	800d8dc <_dtoa_r+0xb4c>
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	4629      	mov	r1, r5
 800d5fc:	220a      	movs	r2, #10
 800d5fe:	4658      	mov	r0, fp
 800d600:	f000 faec 	bl	800dbdc <__multadd>
 800d604:	9b00      	ldr	r3, [sp, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	4605      	mov	r5, r0
 800d60a:	dc67      	bgt.n	800d6dc <_dtoa_r+0x94c>
 800d60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d60e:	2b02      	cmp	r3, #2
 800d610:	dc41      	bgt.n	800d696 <_dtoa_r+0x906>
 800d612:	e063      	b.n	800d6dc <_dtoa_r+0x94c>
 800d614:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d616:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d61a:	e746      	b.n	800d4aa <_dtoa_r+0x71a>
 800d61c:	9b07      	ldr	r3, [sp, #28]
 800d61e:	1e5c      	subs	r4, r3, #1
 800d620:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d622:	42a3      	cmp	r3, r4
 800d624:	bfbf      	itttt	lt
 800d626:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d628:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d62a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d62c:	1ae3      	sublt	r3, r4, r3
 800d62e:	bfb4      	ite	lt
 800d630:	18d2      	addlt	r2, r2, r3
 800d632:	1b1c      	subge	r4, r3, r4
 800d634:	9b07      	ldr	r3, [sp, #28]
 800d636:	bfbc      	itt	lt
 800d638:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d63a:	2400      	movlt	r4, #0
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	bfb5      	itete	lt
 800d640:	eba8 0603 	sublt.w	r6, r8, r3
 800d644:	9b07      	ldrge	r3, [sp, #28]
 800d646:	2300      	movlt	r3, #0
 800d648:	4646      	movge	r6, r8
 800d64a:	e730      	b.n	800d4ae <_dtoa_r+0x71e>
 800d64c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d64e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d650:	4646      	mov	r6, r8
 800d652:	e735      	b.n	800d4c0 <_dtoa_r+0x730>
 800d654:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d656:	e75c      	b.n	800d512 <_dtoa_r+0x782>
 800d658:	2300      	movs	r3, #0
 800d65a:	e788      	b.n	800d56e <_dtoa_r+0x7de>
 800d65c:	3fe00000 	.word	0x3fe00000
 800d660:	40240000 	.word	0x40240000
 800d664:	40140000 	.word	0x40140000
 800d668:	9b02      	ldr	r3, [sp, #8]
 800d66a:	e780      	b.n	800d56e <_dtoa_r+0x7de>
 800d66c:	2300      	movs	r3, #0
 800d66e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d670:	e782      	b.n	800d578 <_dtoa_r+0x7e8>
 800d672:	d099      	beq.n	800d5a8 <_dtoa_r+0x818>
 800d674:	9a08      	ldr	r2, [sp, #32]
 800d676:	331c      	adds	r3, #28
 800d678:	441a      	add	r2, r3
 800d67a:	4498      	add	r8, r3
 800d67c:	441e      	add	r6, r3
 800d67e:	9208      	str	r2, [sp, #32]
 800d680:	e792      	b.n	800d5a8 <_dtoa_r+0x818>
 800d682:	4603      	mov	r3, r0
 800d684:	e7f6      	b.n	800d674 <_dtoa_r+0x8e4>
 800d686:	9b07      	ldr	r3, [sp, #28]
 800d688:	9704      	str	r7, [sp, #16]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	dc20      	bgt.n	800d6d0 <_dtoa_r+0x940>
 800d68e:	9300      	str	r3, [sp, #0]
 800d690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d692:	2b02      	cmp	r3, #2
 800d694:	dd1e      	ble.n	800d6d4 <_dtoa_r+0x944>
 800d696:	9b00      	ldr	r3, [sp, #0]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	f47f aec0 	bne.w	800d41e <_dtoa_r+0x68e>
 800d69e:	4621      	mov	r1, r4
 800d6a0:	2205      	movs	r2, #5
 800d6a2:	4658      	mov	r0, fp
 800d6a4:	f000 fa9a 	bl	800dbdc <__multadd>
 800d6a8:	4601      	mov	r1, r0
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	4648      	mov	r0, r9
 800d6ae:	f000 fcf7 	bl	800e0a0 <__mcmp>
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	f77f aeb3 	ble.w	800d41e <_dtoa_r+0x68e>
 800d6b8:	4656      	mov	r6, sl
 800d6ba:	2331      	movs	r3, #49	@ 0x31
 800d6bc:	f806 3b01 	strb.w	r3, [r6], #1
 800d6c0:	9b04      	ldr	r3, [sp, #16]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	9304      	str	r3, [sp, #16]
 800d6c6:	e6ae      	b.n	800d426 <_dtoa_r+0x696>
 800d6c8:	9c07      	ldr	r4, [sp, #28]
 800d6ca:	9704      	str	r7, [sp, #16]
 800d6cc:	4625      	mov	r5, r4
 800d6ce:	e7f3      	b.n	800d6b8 <_dtoa_r+0x928>
 800d6d0:	9b07      	ldr	r3, [sp, #28]
 800d6d2:	9300      	str	r3, [sp, #0]
 800d6d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	f000 8104 	beq.w	800d8e4 <_dtoa_r+0xb54>
 800d6dc:	2e00      	cmp	r6, #0
 800d6de:	dd05      	ble.n	800d6ec <_dtoa_r+0x95c>
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	4632      	mov	r2, r6
 800d6e4:	4658      	mov	r0, fp
 800d6e6:	f000 fc6f 	bl	800dfc8 <__lshift>
 800d6ea:	4605      	mov	r5, r0
 800d6ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d05a      	beq.n	800d7a8 <_dtoa_r+0xa18>
 800d6f2:	6869      	ldr	r1, [r5, #4]
 800d6f4:	4658      	mov	r0, fp
 800d6f6:	f000 fa0f 	bl	800db18 <_Balloc>
 800d6fa:	4606      	mov	r6, r0
 800d6fc:	b928      	cbnz	r0, 800d70a <_dtoa_r+0x97a>
 800d6fe:	4b84      	ldr	r3, [pc, #528]	@ (800d910 <_dtoa_r+0xb80>)
 800d700:	4602      	mov	r2, r0
 800d702:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d706:	f7ff bb5a 	b.w	800cdbe <_dtoa_r+0x2e>
 800d70a:	692a      	ldr	r2, [r5, #16]
 800d70c:	3202      	adds	r2, #2
 800d70e:	0092      	lsls	r2, r2, #2
 800d710:	f105 010c 	add.w	r1, r5, #12
 800d714:	300c      	adds	r0, #12
 800d716:	f002 f93b 	bl	800f990 <memcpy>
 800d71a:	2201      	movs	r2, #1
 800d71c:	4631      	mov	r1, r6
 800d71e:	4658      	mov	r0, fp
 800d720:	f000 fc52 	bl	800dfc8 <__lshift>
 800d724:	f10a 0301 	add.w	r3, sl, #1
 800d728:	9307      	str	r3, [sp, #28]
 800d72a:	9b00      	ldr	r3, [sp, #0]
 800d72c:	4453      	add	r3, sl
 800d72e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d730:	9b02      	ldr	r3, [sp, #8]
 800d732:	f003 0301 	and.w	r3, r3, #1
 800d736:	462f      	mov	r7, r5
 800d738:	930a      	str	r3, [sp, #40]	@ 0x28
 800d73a:	4605      	mov	r5, r0
 800d73c:	9b07      	ldr	r3, [sp, #28]
 800d73e:	4621      	mov	r1, r4
 800d740:	3b01      	subs	r3, #1
 800d742:	4648      	mov	r0, r9
 800d744:	9300      	str	r3, [sp, #0]
 800d746:	f7ff fa9b 	bl	800cc80 <quorem>
 800d74a:	4639      	mov	r1, r7
 800d74c:	9002      	str	r0, [sp, #8]
 800d74e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d752:	4648      	mov	r0, r9
 800d754:	f000 fca4 	bl	800e0a0 <__mcmp>
 800d758:	462a      	mov	r2, r5
 800d75a:	9008      	str	r0, [sp, #32]
 800d75c:	4621      	mov	r1, r4
 800d75e:	4658      	mov	r0, fp
 800d760:	f000 fcba 	bl	800e0d8 <__mdiff>
 800d764:	68c2      	ldr	r2, [r0, #12]
 800d766:	4606      	mov	r6, r0
 800d768:	bb02      	cbnz	r2, 800d7ac <_dtoa_r+0xa1c>
 800d76a:	4601      	mov	r1, r0
 800d76c:	4648      	mov	r0, r9
 800d76e:	f000 fc97 	bl	800e0a0 <__mcmp>
 800d772:	4602      	mov	r2, r0
 800d774:	4631      	mov	r1, r6
 800d776:	4658      	mov	r0, fp
 800d778:	920e      	str	r2, [sp, #56]	@ 0x38
 800d77a:	f000 fa0d 	bl	800db98 <_Bfree>
 800d77e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d780:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d782:	9e07      	ldr	r6, [sp, #28]
 800d784:	ea43 0102 	orr.w	r1, r3, r2
 800d788:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d78a:	4319      	orrs	r1, r3
 800d78c:	d110      	bne.n	800d7b0 <_dtoa_r+0xa20>
 800d78e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d792:	d029      	beq.n	800d7e8 <_dtoa_r+0xa58>
 800d794:	9b08      	ldr	r3, [sp, #32]
 800d796:	2b00      	cmp	r3, #0
 800d798:	dd02      	ble.n	800d7a0 <_dtoa_r+0xa10>
 800d79a:	9b02      	ldr	r3, [sp, #8]
 800d79c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d7a0:	9b00      	ldr	r3, [sp, #0]
 800d7a2:	f883 8000 	strb.w	r8, [r3]
 800d7a6:	e63f      	b.n	800d428 <_dtoa_r+0x698>
 800d7a8:	4628      	mov	r0, r5
 800d7aa:	e7bb      	b.n	800d724 <_dtoa_r+0x994>
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	e7e1      	b.n	800d774 <_dtoa_r+0x9e4>
 800d7b0:	9b08      	ldr	r3, [sp, #32]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	db04      	blt.n	800d7c0 <_dtoa_r+0xa30>
 800d7b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d7b8:	430b      	orrs	r3, r1
 800d7ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d7bc:	430b      	orrs	r3, r1
 800d7be:	d120      	bne.n	800d802 <_dtoa_r+0xa72>
 800d7c0:	2a00      	cmp	r2, #0
 800d7c2:	dded      	ble.n	800d7a0 <_dtoa_r+0xa10>
 800d7c4:	4649      	mov	r1, r9
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	4658      	mov	r0, fp
 800d7ca:	f000 fbfd 	bl	800dfc8 <__lshift>
 800d7ce:	4621      	mov	r1, r4
 800d7d0:	4681      	mov	r9, r0
 800d7d2:	f000 fc65 	bl	800e0a0 <__mcmp>
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	dc03      	bgt.n	800d7e2 <_dtoa_r+0xa52>
 800d7da:	d1e1      	bne.n	800d7a0 <_dtoa_r+0xa10>
 800d7dc:	f018 0f01 	tst.w	r8, #1
 800d7e0:	d0de      	beq.n	800d7a0 <_dtoa_r+0xa10>
 800d7e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d7e6:	d1d8      	bne.n	800d79a <_dtoa_r+0xa0a>
 800d7e8:	9a00      	ldr	r2, [sp, #0]
 800d7ea:	2339      	movs	r3, #57	@ 0x39
 800d7ec:	7013      	strb	r3, [r2, #0]
 800d7ee:	4633      	mov	r3, r6
 800d7f0:	461e      	mov	r6, r3
 800d7f2:	3b01      	subs	r3, #1
 800d7f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d7f8:	2a39      	cmp	r2, #57	@ 0x39
 800d7fa:	d052      	beq.n	800d8a2 <_dtoa_r+0xb12>
 800d7fc:	3201      	adds	r2, #1
 800d7fe:	701a      	strb	r2, [r3, #0]
 800d800:	e612      	b.n	800d428 <_dtoa_r+0x698>
 800d802:	2a00      	cmp	r2, #0
 800d804:	dd07      	ble.n	800d816 <_dtoa_r+0xa86>
 800d806:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d80a:	d0ed      	beq.n	800d7e8 <_dtoa_r+0xa58>
 800d80c:	9a00      	ldr	r2, [sp, #0]
 800d80e:	f108 0301 	add.w	r3, r8, #1
 800d812:	7013      	strb	r3, [r2, #0]
 800d814:	e608      	b.n	800d428 <_dtoa_r+0x698>
 800d816:	9b07      	ldr	r3, [sp, #28]
 800d818:	9a07      	ldr	r2, [sp, #28]
 800d81a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d81e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d820:	4293      	cmp	r3, r2
 800d822:	d028      	beq.n	800d876 <_dtoa_r+0xae6>
 800d824:	4649      	mov	r1, r9
 800d826:	2300      	movs	r3, #0
 800d828:	220a      	movs	r2, #10
 800d82a:	4658      	mov	r0, fp
 800d82c:	f000 f9d6 	bl	800dbdc <__multadd>
 800d830:	42af      	cmp	r7, r5
 800d832:	4681      	mov	r9, r0
 800d834:	f04f 0300 	mov.w	r3, #0
 800d838:	f04f 020a 	mov.w	r2, #10
 800d83c:	4639      	mov	r1, r7
 800d83e:	4658      	mov	r0, fp
 800d840:	d107      	bne.n	800d852 <_dtoa_r+0xac2>
 800d842:	f000 f9cb 	bl	800dbdc <__multadd>
 800d846:	4607      	mov	r7, r0
 800d848:	4605      	mov	r5, r0
 800d84a:	9b07      	ldr	r3, [sp, #28]
 800d84c:	3301      	adds	r3, #1
 800d84e:	9307      	str	r3, [sp, #28]
 800d850:	e774      	b.n	800d73c <_dtoa_r+0x9ac>
 800d852:	f000 f9c3 	bl	800dbdc <__multadd>
 800d856:	4629      	mov	r1, r5
 800d858:	4607      	mov	r7, r0
 800d85a:	2300      	movs	r3, #0
 800d85c:	220a      	movs	r2, #10
 800d85e:	4658      	mov	r0, fp
 800d860:	f000 f9bc 	bl	800dbdc <__multadd>
 800d864:	4605      	mov	r5, r0
 800d866:	e7f0      	b.n	800d84a <_dtoa_r+0xaba>
 800d868:	9b00      	ldr	r3, [sp, #0]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	bfcc      	ite	gt
 800d86e:	461e      	movgt	r6, r3
 800d870:	2601      	movle	r6, #1
 800d872:	4456      	add	r6, sl
 800d874:	2700      	movs	r7, #0
 800d876:	4649      	mov	r1, r9
 800d878:	2201      	movs	r2, #1
 800d87a:	4658      	mov	r0, fp
 800d87c:	f000 fba4 	bl	800dfc8 <__lshift>
 800d880:	4621      	mov	r1, r4
 800d882:	4681      	mov	r9, r0
 800d884:	f000 fc0c 	bl	800e0a0 <__mcmp>
 800d888:	2800      	cmp	r0, #0
 800d88a:	dcb0      	bgt.n	800d7ee <_dtoa_r+0xa5e>
 800d88c:	d102      	bne.n	800d894 <_dtoa_r+0xb04>
 800d88e:	f018 0f01 	tst.w	r8, #1
 800d892:	d1ac      	bne.n	800d7ee <_dtoa_r+0xa5e>
 800d894:	4633      	mov	r3, r6
 800d896:	461e      	mov	r6, r3
 800d898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d89c:	2a30      	cmp	r2, #48	@ 0x30
 800d89e:	d0fa      	beq.n	800d896 <_dtoa_r+0xb06>
 800d8a0:	e5c2      	b.n	800d428 <_dtoa_r+0x698>
 800d8a2:	459a      	cmp	sl, r3
 800d8a4:	d1a4      	bne.n	800d7f0 <_dtoa_r+0xa60>
 800d8a6:	9b04      	ldr	r3, [sp, #16]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	9304      	str	r3, [sp, #16]
 800d8ac:	2331      	movs	r3, #49	@ 0x31
 800d8ae:	f88a 3000 	strb.w	r3, [sl]
 800d8b2:	e5b9      	b.n	800d428 <_dtoa_r+0x698>
 800d8b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d8b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d914 <_dtoa_r+0xb84>
 800d8ba:	b11b      	cbz	r3, 800d8c4 <_dtoa_r+0xb34>
 800d8bc:	f10a 0308 	add.w	r3, sl, #8
 800d8c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d8c2:	6013      	str	r3, [r2, #0]
 800d8c4:	4650      	mov	r0, sl
 800d8c6:	b019      	add	sp, #100	@ 0x64
 800d8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	f77f ae37 	ble.w	800d542 <_dtoa_r+0x7b2>
 800d8d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8d8:	2001      	movs	r0, #1
 800d8da:	e655      	b.n	800d588 <_dtoa_r+0x7f8>
 800d8dc:	9b00      	ldr	r3, [sp, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	f77f aed6 	ble.w	800d690 <_dtoa_r+0x900>
 800d8e4:	4656      	mov	r6, sl
 800d8e6:	4621      	mov	r1, r4
 800d8e8:	4648      	mov	r0, r9
 800d8ea:	f7ff f9c9 	bl	800cc80 <quorem>
 800d8ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d8f2:	f806 8b01 	strb.w	r8, [r6], #1
 800d8f6:	9b00      	ldr	r3, [sp, #0]
 800d8f8:	eba6 020a 	sub.w	r2, r6, sl
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	ddb3      	ble.n	800d868 <_dtoa_r+0xad8>
 800d900:	4649      	mov	r1, r9
 800d902:	2300      	movs	r3, #0
 800d904:	220a      	movs	r2, #10
 800d906:	4658      	mov	r0, fp
 800d908:	f000 f968 	bl	800dbdc <__multadd>
 800d90c:	4681      	mov	r9, r0
 800d90e:	e7ea      	b.n	800d8e6 <_dtoa_r+0xb56>
 800d910:	08010799 	.word	0x08010799
 800d914:	0801071d 	.word	0x0801071d

0800d918 <_free_r>:
 800d918:	b538      	push	{r3, r4, r5, lr}
 800d91a:	4605      	mov	r5, r0
 800d91c:	2900      	cmp	r1, #0
 800d91e:	d041      	beq.n	800d9a4 <_free_r+0x8c>
 800d920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d924:	1f0c      	subs	r4, r1, #4
 800d926:	2b00      	cmp	r3, #0
 800d928:	bfb8      	it	lt
 800d92a:	18e4      	addlt	r4, r4, r3
 800d92c:	f000 f8e8 	bl	800db00 <__malloc_lock>
 800d930:	4a1d      	ldr	r2, [pc, #116]	@ (800d9a8 <_free_r+0x90>)
 800d932:	6813      	ldr	r3, [r2, #0]
 800d934:	b933      	cbnz	r3, 800d944 <_free_r+0x2c>
 800d936:	6063      	str	r3, [r4, #4]
 800d938:	6014      	str	r4, [r2, #0]
 800d93a:	4628      	mov	r0, r5
 800d93c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d940:	f000 b8e4 	b.w	800db0c <__malloc_unlock>
 800d944:	42a3      	cmp	r3, r4
 800d946:	d908      	bls.n	800d95a <_free_r+0x42>
 800d948:	6820      	ldr	r0, [r4, #0]
 800d94a:	1821      	adds	r1, r4, r0
 800d94c:	428b      	cmp	r3, r1
 800d94e:	bf01      	itttt	eq
 800d950:	6819      	ldreq	r1, [r3, #0]
 800d952:	685b      	ldreq	r3, [r3, #4]
 800d954:	1809      	addeq	r1, r1, r0
 800d956:	6021      	streq	r1, [r4, #0]
 800d958:	e7ed      	b.n	800d936 <_free_r+0x1e>
 800d95a:	461a      	mov	r2, r3
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	b10b      	cbz	r3, 800d964 <_free_r+0x4c>
 800d960:	42a3      	cmp	r3, r4
 800d962:	d9fa      	bls.n	800d95a <_free_r+0x42>
 800d964:	6811      	ldr	r1, [r2, #0]
 800d966:	1850      	adds	r0, r2, r1
 800d968:	42a0      	cmp	r0, r4
 800d96a:	d10b      	bne.n	800d984 <_free_r+0x6c>
 800d96c:	6820      	ldr	r0, [r4, #0]
 800d96e:	4401      	add	r1, r0
 800d970:	1850      	adds	r0, r2, r1
 800d972:	4283      	cmp	r3, r0
 800d974:	6011      	str	r1, [r2, #0]
 800d976:	d1e0      	bne.n	800d93a <_free_r+0x22>
 800d978:	6818      	ldr	r0, [r3, #0]
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	6053      	str	r3, [r2, #4]
 800d97e:	4408      	add	r0, r1
 800d980:	6010      	str	r0, [r2, #0]
 800d982:	e7da      	b.n	800d93a <_free_r+0x22>
 800d984:	d902      	bls.n	800d98c <_free_r+0x74>
 800d986:	230c      	movs	r3, #12
 800d988:	602b      	str	r3, [r5, #0]
 800d98a:	e7d6      	b.n	800d93a <_free_r+0x22>
 800d98c:	6820      	ldr	r0, [r4, #0]
 800d98e:	1821      	adds	r1, r4, r0
 800d990:	428b      	cmp	r3, r1
 800d992:	bf04      	itt	eq
 800d994:	6819      	ldreq	r1, [r3, #0]
 800d996:	685b      	ldreq	r3, [r3, #4]
 800d998:	6063      	str	r3, [r4, #4]
 800d99a:	bf04      	itt	eq
 800d99c:	1809      	addeq	r1, r1, r0
 800d99e:	6021      	streq	r1, [r4, #0]
 800d9a0:	6054      	str	r4, [r2, #4]
 800d9a2:	e7ca      	b.n	800d93a <_free_r+0x22>
 800d9a4:	bd38      	pop	{r3, r4, r5, pc}
 800d9a6:	bf00      	nop
 800d9a8:	20000780 	.word	0x20000780

0800d9ac <malloc>:
 800d9ac:	4b02      	ldr	r3, [pc, #8]	@ (800d9b8 <malloc+0xc>)
 800d9ae:	4601      	mov	r1, r0
 800d9b0:	6818      	ldr	r0, [r3, #0]
 800d9b2:	f000 b825 	b.w	800da00 <_malloc_r>
 800d9b6:	bf00      	nop
 800d9b8:	20000018 	.word	0x20000018

0800d9bc <sbrk_aligned>:
 800d9bc:	b570      	push	{r4, r5, r6, lr}
 800d9be:	4e0f      	ldr	r6, [pc, #60]	@ (800d9fc <sbrk_aligned+0x40>)
 800d9c0:	460c      	mov	r4, r1
 800d9c2:	6831      	ldr	r1, [r6, #0]
 800d9c4:	4605      	mov	r5, r0
 800d9c6:	b911      	cbnz	r1, 800d9ce <sbrk_aligned+0x12>
 800d9c8:	f001 ffd2 	bl	800f970 <_sbrk_r>
 800d9cc:	6030      	str	r0, [r6, #0]
 800d9ce:	4621      	mov	r1, r4
 800d9d0:	4628      	mov	r0, r5
 800d9d2:	f001 ffcd 	bl	800f970 <_sbrk_r>
 800d9d6:	1c43      	adds	r3, r0, #1
 800d9d8:	d103      	bne.n	800d9e2 <sbrk_aligned+0x26>
 800d9da:	f04f 34ff 	mov.w	r4, #4294967295
 800d9de:	4620      	mov	r0, r4
 800d9e0:	bd70      	pop	{r4, r5, r6, pc}
 800d9e2:	1cc4      	adds	r4, r0, #3
 800d9e4:	f024 0403 	bic.w	r4, r4, #3
 800d9e8:	42a0      	cmp	r0, r4
 800d9ea:	d0f8      	beq.n	800d9de <sbrk_aligned+0x22>
 800d9ec:	1a21      	subs	r1, r4, r0
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	f001 ffbe 	bl	800f970 <_sbrk_r>
 800d9f4:	3001      	adds	r0, #1
 800d9f6:	d1f2      	bne.n	800d9de <sbrk_aligned+0x22>
 800d9f8:	e7ef      	b.n	800d9da <sbrk_aligned+0x1e>
 800d9fa:	bf00      	nop
 800d9fc:	2000077c 	.word	0x2000077c

0800da00 <_malloc_r>:
 800da00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da04:	1ccd      	adds	r5, r1, #3
 800da06:	f025 0503 	bic.w	r5, r5, #3
 800da0a:	3508      	adds	r5, #8
 800da0c:	2d0c      	cmp	r5, #12
 800da0e:	bf38      	it	cc
 800da10:	250c      	movcc	r5, #12
 800da12:	2d00      	cmp	r5, #0
 800da14:	4606      	mov	r6, r0
 800da16:	db01      	blt.n	800da1c <_malloc_r+0x1c>
 800da18:	42a9      	cmp	r1, r5
 800da1a:	d904      	bls.n	800da26 <_malloc_r+0x26>
 800da1c:	230c      	movs	r3, #12
 800da1e:	6033      	str	r3, [r6, #0]
 800da20:	2000      	movs	r0, #0
 800da22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dafc <_malloc_r+0xfc>
 800da2a:	f000 f869 	bl	800db00 <__malloc_lock>
 800da2e:	f8d8 3000 	ldr.w	r3, [r8]
 800da32:	461c      	mov	r4, r3
 800da34:	bb44      	cbnz	r4, 800da88 <_malloc_r+0x88>
 800da36:	4629      	mov	r1, r5
 800da38:	4630      	mov	r0, r6
 800da3a:	f7ff ffbf 	bl	800d9bc <sbrk_aligned>
 800da3e:	1c43      	adds	r3, r0, #1
 800da40:	4604      	mov	r4, r0
 800da42:	d158      	bne.n	800daf6 <_malloc_r+0xf6>
 800da44:	f8d8 4000 	ldr.w	r4, [r8]
 800da48:	4627      	mov	r7, r4
 800da4a:	2f00      	cmp	r7, #0
 800da4c:	d143      	bne.n	800dad6 <_malloc_r+0xd6>
 800da4e:	2c00      	cmp	r4, #0
 800da50:	d04b      	beq.n	800daea <_malloc_r+0xea>
 800da52:	6823      	ldr	r3, [r4, #0]
 800da54:	4639      	mov	r1, r7
 800da56:	4630      	mov	r0, r6
 800da58:	eb04 0903 	add.w	r9, r4, r3
 800da5c:	f001 ff88 	bl	800f970 <_sbrk_r>
 800da60:	4581      	cmp	r9, r0
 800da62:	d142      	bne.n	800daea <_malloc_r+0xea>
 800da64:	6821      	ldr	r1, [r4, #0]
 800da66:	1a6d      	subs	r5, r5, r1
 800da68:	4629      	mov	r1, r5
 800da6a:	4630      	mov	r0, r6
 800da6c:	f7ff ffa6 	bl	800d9bc <sbrk_aligned>
 800da70:	3001      	adds	r0, #1
 800da72:	d03a      	beq.n	800daea <_malloc_r+0xea>
 800da74:	6823      	ldr	r3, [r4, #0]
 800da76:	442b      	add	r3, r5
 800da78:	6023      	str	r3, [r4, #0]
 800da7a:	f8d8 3000 	ldr.w	r3, [r8]
 800da7e:	685a      	ldr	r2, [r3, #4]
 800da80:	bb62      	cbnz	r2, 800dadc <_malloc_r+0xdc>
 800da82:	f8c8 7000 	str.w	r7, [r8]
 800da86:	e00f      	b.n	800daa8 <_malloc_r+0xa8>
 800da88:	6822      	ldr	r2, [r4, #0]
 800da8a:	1b52      	subs	r2, r2, r5
 800da8c:	d420      	bmi.n	800dad0 <_malloc_r+0xd0>
 800da8e:	2a0b      	cmp	r2, #11
 800da90:	d917      	bls.n	800dac2 <_malloc_r+0xc2>
 800da92:	1961      	adds	r1, r4, r5
 800da94:	42a3      	cmp	r3, r4
 800da96:	6025      	str	r5, [r4, #0]
 800da98:	bf18      	it	ne
 800da9a:	6059      	strne	r1, [r3, #4]
 800da9c:	6863      	ldr	r3, [r4, #4]
 800da9e:	bf08      	it	eq
 800daa0:	f8c8 1000 	streq.w	r1, [r8]
 800daa4:	5162      	str	r2, [r4, r5]
 800daa6:	604b      	str	r3, [r1, #4]
 800daa8:	4630      	mov	r0, r6
 800daaa:	f000 f82f 	bl	800db0c <__malloc_unlock>
 800daae:	f104 000b 	add.w	r0, r4, #11
 800dab2:	1d23      	adds	r3, r4, #4
 800dab4:	f020 0007 	bic.w	r0, r0, #7
 800dab8:	1ac2      	subs	r2, r0, r3
 800daba:	bf1c      	itt	ne
 800dabc:	1a1b      	subne	r3, r3, r0
 800dabe:	50a3      	strne	r3, [r4, r2]
 800dac0:	e7af      	b.n	800da22 <_malloc_r+0x22>
 800dac2:	6862      	ldr	r2, [r4, #4]
 800dac4:	42a3      	cmp	r3, r4
 800dac6:	bf0c      	ite	eq
 800dac8:	f8c8 2000 	streq.w	r2, [r8]
 800dacc:	605a      	strne	r2, [r3, #4]
 800dace:	e7eb      	b.n	800daa8 <_malloc_r+0xa8>
 800dad0:	4623      	mov	r3, r4
 800dad2:	6864      	ldr	r4, [r4, #4]
 800dad4:	e7ae      	b.n	800da34 <_malloc_r+0x34>
 800dad6:	463c      	mov	r4, r7
 800dad8:	687f      	ldr	r7, [r7, #4]
 800dada:	e7b6      	b.n	800da4a <_malloc_r+0x4a>
 800dadc:	461a      	mov	r2, r3
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	42a3      	cmp	r3, r4
 800dae2:	d1fb      	bne.n	800dadc <_malloc_r+0xdc>
 800dae4:	2300      	movs	r3, #0
 800dae6:	6053      	str	r3, [r2, #4]
 800dae8:	e7de      	b.n	800daa8 <_malloc_r+0xa8>
 800daea:	230c      	movs	r3, #12
 800daec:	6033      	str	r3, [r6, #0]
 800daee:	4630      	mov	r0, r6
 800daf0:	f000 f80c 	bl	800db0c <__malloc_unlock>
 800daf4:	e794      	b.n	800da20 <_malloc_r+0x20>
 800daf6:	6005      	str	r5, [r0, #0]
 800daf8:	e7d6      	b.n	800daa8 <_malloc_r+0xa8>
 800dafa:	bf00      	nop
 800dafc:	20000780 	.word	0x20000780

0800db00 <__malloc_lock>:
 800db00:	4801      	ldr	r0, [pc, #4]	@ (800db08 <__malloc_lock+0x8>)
 800db02:	f7ff b8b4 	b.w	800cc6e <__retarget_lock_acquire_recursive>
 800db06:	bf00      	nop
 800db08:	20000778 	.word	0x20000778

0800db0c <__malloc_unlock>:
 800db0c:	4801      	ldr	r0, [pc, #4]	@ (800db14 <__malloc_unlock+0x8>)
 800db0e:	f7ff b8af 	b.w	800cc70 <__retarget_lock_release_recursive>
 800db12:	bf00      	nop
 800db14:	20000778 	.word	0x20000778

0800db18 <_Balloc>:
 800db18:	b570      	push	{r4, r5, r6, lr}
 800db1a:	69c6      	ldr	r6, [r0, #28]
 800db1c:	4604      	mov	r4, r0
 800db1e:	460d      	mov	r5, r1
 800db20:	b976      	cbnz	r6, 800db40 <_Balloc+0x28>
 800db22:	2010      	movs	r0, #16
 800db24:	f7ff ff42 	bl	800d9ac <malloc>
 800db28:	4602      	mov	r2, r0
 800db2a:	61e0      	str	r0, [r4, #28]
 800db2c:	b920      	cbnz	r0, 800db38 <_Balloc+0x20>
 800db2e:	4b18      	ldr	r3, [pc, #96]	@ (800db90 <_Balloc+0x78>)
 800db30:	4818      	ldr	r0, [pc, #96]	@ (800db94 <_Balloc+0x7c>)
 800db32:	216b      	movs	r1, #107	@ 0x6b
 800db34:	f001 ff44 	bl	800f9c0 <__assert_func>
 800db38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db3c:	6006      	str	r6, [r0, #0]
 800db3e:	60c6      	str	r6, [r0, #12]
 800db40:	69e6      	ldr	r6, [r4, #28]
 800db42:	68f3      	ldr	r3, [r6, #12]
 800db44:	b183      	cbz	r3, 800db68 <_Balloc+0x50>
 800db46:	69e3      	ldr	r3, [r4, #28]
 800db48:	68db      	ldr	r3, [r3, #12]
 800db4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800db4e:	b9b8      	cbnz	r0, 800db80 <_Balloc+0x68>
 800db50:	2101      	movs	r1, #1
 800db52:	fa01 f605 	lsl.w	r6, r1, r5
 800db56:	1d72      	adds	r2, r6, #5
 800db58:	0092      	lsls	r2, r2, #2
 800db5a:	4620      	mov	r0, r4
 800db5c:	f001 ff4e 	bl	800f9fc <_calloc_r>
 800db60:	b160      	cbz	r0, 800db7c <_Balloc+0x64>
 800db62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800db66:	e00e      	b.n	800db86 <_Balloc+0x6e>
 800db68:	2221      	movs	r2, #33	@ 0x21
 800db6a:	2104      	movs	r1, #4
 800db6c:	4620      	mov	r0, r4
 800db6e:	f001 ff45 	bl	800f9fc <_calloc_r>
 800db72:	69e3      	ldr	r3, [r4, #28]
 800db74:	60f0      	str	r0, [r6, #12]
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d1e4      	bne.n	800db46 <_Balloc+0x2e>
 800db7c:	2000      	movs	r0, #0
 800db7e:	bd70      	pop	{r4, r5, r6, pc}
 800db80:	6802      	ldr	r2, [r0, #0]
 800db82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800db86:	2300      	movs	r3, #0
 800db88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db8c:	e7f7      	b.n	800db7e <_Balloc+0x66>
 800db8e:	bf00      	nop
 800db90:	0801072a 	.word	0x0801072a
 800db94:	080107aa 	.word	0x080107aa

0800db98 <_Bfree>:
 800db98:	b570      	push	{r4, r5, r6, lr}
 800db9a:	69c6      	ldr	r6, [r0, #28]
 800db9c:	4605      	mov	r5, r0
 800db9e:	460c      	mov	r4, r1
 800dba0:	b976      	cbnz	r6, 800dbc0 <_Bfree+0x28>
 800dba2:	2010      	movs	r0, #16
 800dba4:	f7ff ff02 	bl	800d9ac <malloc>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	61e8      	str	r0, [r5, #28]
 800dbac:	b920      	cbnz	r0, 800dbb8 <_Bfree+0x20>
 800dbae:	4b09      	ldr	r3, [pc, #36]	@ (800dbd4 <_Bfree+0x3c>)
 800dbb0:	4809      	ldr	r0, [pc, #36]	@ (800dbd8 <_Bfree+0x40>)
 800dbb2:	218f      	movs	r1, #143	@ 0x8f
 800dbb4:	f001 ff04 	bl	800f9c0 <__assert_func>
 800dbb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dbbc:	6006      	str	r6, [r0, #0]
 800dbbe:	60c6      	str	r6, [r0, #12]
 800dbc0:	b13c      	cbz	r4, 800dbd2 <_Bfree+0x3a>
 800dbc2:	69eb      	ldr	r3, [r5, #28]
 800dbc4:	6862      	ldr	r2, [r4, #4]
 800dbc6:	68db      	ldr	r3, [r3, #12]
 800dbc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dbcc:	6021      	str	r1, [r4, #0]
 800dbce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dbd2:	bd70      	pop	{r4, r5, r6, pc}
 800dbd4:	0801072a 	.word	0x0801072a
 800dbd8:	080107aa 	.word	0x080107aa

0800dbdc <__multadd>:
 800dbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe0:	690d      	ldr	r5, [r1, #16]
 800dbe2:	4607      	mov	r7, r0
 800dbe4:	460c      	mov	r4, r1
 800dbe6:	461e      	mov	r6, r3
 800dbe8:	f101 0c14 	add.w	ip, r1, #20
 800dbec:	2000      	movs	r0, #0
 800dbee:	f8dc 3000 	ldr.w	r3, [ip]
 800dbf2:	b299      	uxth	r1, r3
 800dbf4:	fb02 6101 	mla	r1, r2, r1, r6
 800dbf8:	0c1e      	lsrs	r6, r3, #16
 800dbfa:	0c0b      	lsrs	r3, r1, #16
 800dbfc:	fb02 3306 	mla	r3, r2, r6, r3
 800dc00:	b289      	uxth	r1, r1
 800dc02:	3001      	adds	r0, #1
 800dc04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dc08:	4285      	cmp	r5, r0
 800dc0a:	f84c 1b04 	str.w	r1, [ip], #4
 800dc0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dc12:	dcec      	bgt.n	800dbee <__multadd+0x12>
 800dc14:	b30e      	cbz	r6, 800dc5a <__multadd+0x7e>
 800dc16:	68a3      	ldr	r3, [r4, #8]
 800dc18:	42ab      	cmp	r3, r5
 800dc1a:	dc19      	bgt.n	800dc50 <__multadd+0x74>
 800dc1c:	6861      	ldr	r1, [r4, #4]
 800dc1e:	4638      	mov	r0, r7
 800dc20:	3101      	adds	r1, #1
 800dc22:	f7ff ff79 	bl	800db18 <_Balloc>
 800dc26:	4680      	mov	r8, r0
 800dc28:	b928      	cbnz	r0, 800dc36 <__multadd+0x5a>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	4b0c      	ldr	r3, [pc, #48]	@ (800dc60 <__multadd+0x84>)
 800dc2e:	480d      	ldr	r0, [pc, #52]	@ (800dc64 <__multadd+0x88>)
 800dc30:	21ba      	movs	r1, #186	@ 0xba
 800dc32:	f001 fec5 	bl	800f9c0 <__assert_func>
 800dc36:	6922      	ldr	r2, [r4, #16]
 800dc38:	3202      	adds	r2, #2
 800dc3a:	f104 010c 	add.w	r1, r4, #12
 800dc3e:	0092      	lsls	r2, r2, #2
 800dc40:	300c      	adds	r0, #12
 800dc42:	f001 fea5 	bl	800f990 <memcpy>
 800dc46:	4621      	mov	r1, r4
 800dc48:	4638      	mov	r0, r7
 800dc4a:	f7ff ffa5 	bl	800db98 <_Bfree>
 800dc4e:	4644      	mov	r4, r8
 800dc50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dc54:	3501      	adds	r5, #1
 800dc56:	615e      	str	r6, [r3, #20]
 800dc58:	6125      	str	r5, [r4, #16]
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc60:	08010799 	.word	0x08010799
 800dc64:	080107aa 	.word	0x080107aa

0800dc68 <__s2b>:
 800dc68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc6c:	460c      	mov	r4, r1
 800dc6e:	4615      	mov	r5, r2
 800dc70:	461f      	mov	r7, r3
 800dc72:	2209      	movs	r2, #9
 800dc74:	3308      	adds	r3, #8
 800dc76:	4606      	mov	r6, r0
 800dc78:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc7c:	2100      	movs	r1, #0
 800dc7e:	2201      	movs	r2, #1
 800dc80:	429a      	cmp	r2, r3
 800dc82:	db09      	blt.n	800dc98 <__s2b+0x30>
 800dc84:	4630      	mov	r0, r6
 800dc86:	f7ff ff47 	bl	800db18 <_Balloc>
 800dc8a:	b940      	cbnz	r0, 800dc9e <__s2b+0x36>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	4b19      	ldr	r3, [pc, #100]	@ (800dcf4 <__s2b+0x8c>)
 800dc90:	4819      	ldr	r0, [pc, #100]	@ (800dcf8 <__s2b+0x90>)
 800dc92:	21d3      	movs	r1, #211	@ 0xd3
 800dc94:	f001 fe94 	bl	800f9c0 <__assert_func>
 800dc98:	0052      	lsls	r2, r2, #1
 800dc9a:	3101      	adds	r1, #1
 800dc9c:	e7f0      	b.n	800dc80 <__s2b+0x18>
 800dc9e:	9b08      	ldr	r3, [sp, #32]
 800dca0:	6143      	str	r3, [r0, #20]
 800dca2:	2d09      	cmp	r5, #9
 800dca4:	f04f 0301 	mov.w	r3, #1
 800dca8:	6103      	str	r3, [r0, #16]
 800dcaa:	dd16      	ble.n	800dcda <__s2b+0x72>
 800dcac:	f104 0909 	add.w	r9, r4, #9
 800dcb0:	46c8      	mov	r8, r9
 800dcb2:	442c      	add	r4, r5
 800dcb4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dcb8:	4601      	mov	r1, r0
 800dcba:	3b30      	subs	r3, #48	@ 0x30
 800dcbc:	220a      	movs	r2, #10
 800dcbe:	4630      	mov	r0, r6
 800dcc0:	f7ff ff8c 	bl	800dbdc <__multadd>
 800dcc4:	45a0      	cmp	r8, r4
 800dcc6:	d1f5      	bne.n	800dcb4 <__s2b+0x4c>
 800dcc8:	f1a5 0408 	sub.w	r4, r5, #8
 800dccc:	444c      	add	r4, r9
 800dcce:	1b2d      	subs	r5, r5, r4
 800dcd0:	1963      	adds	r3, r4, r5
 800dcd2:	42bb      	cmp	r3, r7
 800dcd4:	db04      	blt.n	800dce0 <__s2b+0x78>
 800dcd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcda:	340a      	adds	r4, #10
 800dcdc:	2509      	movs	r5, #9
 800dcde:	e7f6      	b.n	800dcce <__s2b+0x66>
 800dce0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dce4:	4601      	mov	r1, r0
 800dce6:	3b30      	subs	r3, #48	@ 0x30
 800dce8:	220a      	movs	r2, #10
 800dcea:	4630      	mov	r0, r6
 800dcec:	f7ff ff76 	bl	800dbdc <__multadd>
 800dcf0:	e7ee      	b.n	800dcd0 <__s2b+0x68>
 800dcf2:	bf00      	nop
 800dcf4:	08010799 	.word	0x08010799
 800dcf8:	080107aa 	.word	0x080107aa

0800dcfc <__hi0bits>:
 800dcfc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dd00:	4603      	mov	r3, r0
 800dd02:	bf36      	itet	cc
 800dd04:	0403      	lslcc	r3, r0, #16
 800dd06:	2000      	movcs	r0, #0
 800dd08:	2010      	movcc	r0, #16
 800dd0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dd0e:	bf3c      	itt	cc
 800dd10:	021b      	lslcc	r3, r3, #8
 800dd12:	3008      	addcc	r0, #8
 800dd14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd18:	bf3c      	itt	cc
 800dd1a:	011b      	lslcc	r3, r3, #4
 800dd1c:	3004      	addcc	r0, #4
 800dd1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd22:	bf3c      	itt	cc
 800dd24:	009b      	lslcc	r3, r3, #2
 800dd26:	3002      	addcc	r0, #2
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	db05      	blt.n	800dd38 <__hi0bits+0x3c>
 800dd2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dd30:	f100 0001 	add.w	r0, r0, #1
 800dd34:	bf08      	it	eq
 800dd36:	2020      	moveq	r0, #32
 800dd38:	4770      	bx	lr

0800dd3a <__lo0bits>:
 800dd3a:	6803      	ldr	r3, [r0, #0]
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	f013 0007 	ands.w	r0, r3, #7
 800dd42:	d00b      	beq.n	800dd5c <__lo0bits+0x22>
 800dd44:	07d9      	lsls	r1, r3, #31
 800dd46:	d421      	bmi.n	800dd8c <__lo0bits+0x52>
 800dd48:	0798      	lsls	r0, r3, #30
 800dd4a:	bf49      	itett	mi
 800dd4c:	085b      	lsrmi	r3, r3, #1
 800dd4e:	089b      	lsrpl	r3, r3, #2
 800dd50:	2001      	movmi	r0, #1
 800dd52:	6013      	strmi	r3, [r2, #0]
 800dd54:	bf5c      	itt	pl
 800dd56:	6013      	strpl	r3, [r2, #0]
 800dd58:	2002      	movpl	r0, #2
 800dd5a:	4770      	bx	lr
 800dd5c:	b299      	uxth	r1, r3
 800dd5e:	b909      	cbnz	r1, 800dd64 <__lo0bits+0x2a>
 800dd60:	0c1b      	lsrs	r3, r3, #16
 800dd62:	2010      	movs	r0, #16
 800dd64:	b2d9      	uxtb	r1, r3
 800dd66:	b909      	cbnz	r1, 800dd6c <__lo0bits+0x32>
 800dd68:	3008      	adds	r0, #8
 800dd6a:	0a1b      	lsrs	r3, r3, #8
 800dd6c:	0719      	lsls	r1, r3, #28
 800dd6e:	bf04      	itt	eq
 800dd70:	091b      	lsreq	r3, r3, #4
 800dd72:	3004      	addeq	r0, #4
 800dd74:	0799      	lsls	r1, r3, #30
 800dd76:	bf04      	itt	eq
 800dd78:	089b      	lsreq	r3, r3, #2
 800dd7a:	3002      	addeq	r0, #2
 800dd7c:	07d9      	lsls	r1, r3, #31
 800dd7e:	d403      	bmi.n	800dd88 <__lo0bits+0x4e>
 800dd80:	085b      	lsrs	r3, r3, #1
 800dd82:	f100 0001 	add.w	r0, r0, #1
 800dd86:	d003      	beq.n	800dd90 <__lo0bits+0x56>
 800dd88:	6013      	str	r3, [r2, #0]
 800dd8a:	4770      	bx	lr
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	4770      	bx	lr
 800dd90:	2020      	movs	r0, #32
 800dd92:	4770      	bx	lr

0800dd94 <__i2b>:
 800dd94:	b510      	push	{r4, lr}
 800dd96:	460c      	mov	r4, r1
 800dd98:	2101      	movs	r1, #1
 800dd9a:	f7ff febd 	bl	800db18 <_Balloc>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	b928      	cbnz	r0, 800ddae <__i2b+0x1a>
 800dda2:	4b05      	ldr	r3, [pc, #20]	@ (800ddb8 <__i2b+0x24>)
 800dda4:	4805      	ldr	r0, [pc, #20]	@ (800ddbc <__i2b+0x28>)
 800dda6:	f240 1145 	movw	r1, #325	@ 0x145
 800ddaa:	f001 fe09 	bl	800f9c0 <__assert_func>
 800ddae:	2301      	movs	r3, #1
 800ddb0:	6144      	str	r4, [r0, #20]
 800ddb2:	6103      	str	r3, [r0, #16]
 800ddb4:	bd10      	pop	{r4, pc}
 800ddb6:	bf00      	nop
 800ddb8:	08010799 	.word	0x08010799
 800ddbc:	080107aa 	.word	0x080107aa

0800ddc0 <__multiply>:
 800ddc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc4:	4614      	mov	r4, r2
 800ddc6:	690a      	ldr	r2, [r1, #16]
 800ddc8:	6923      	ldr	r3, [r4, #16]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	bfa8      	it	ge
 800ddce:	4623      	movge	r3, r4
 800ddd0:	460f      	mov	r7, r1
 800ddd2:	bfa4      	itt	ge
 800ddd4:	460c      	movge	r4, r1
 800ddd6:	461f      	movge	r7, r3
 800ddd8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dddc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dde0:	68a3      	ldr	r3, [r4, #8]
 800dde2:	6861      	ldr	r1, [r4, #4]
 800dde4:	eb0a 0609 	add.w	r6, sl, r9
 800dde8:	42b3      	cmp	r3, r6
 800ddea:	b085      	sub	sp, #20
 800ddec:	bfb8      	it	lt
 800ddee:	3101      	addlt	r1, #1
 800ddf0:	f7ff fe92 	bl	800db18 <_Balloc>
 800ddf4:	b930      	cbnz	r0, 800de04 <__multiply+0x44>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	4b44      	ldr	r3, [pc, #272]	@ (800df0c <__multiply+0x14c>)
 800ddfa:	4845      	ldr	r0, [pc, #276]	@ (800df10 <__multiply+0x150>)
 800ddfc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800de00:	f001 fdde 	bl	800f9c0 <__assert_func>
 800de04:	f100 0514 	add.w	r5, r0, #20
 800de08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800de0c:	462b      	mov	r3, r5
 800de0e:	2200      	movs	r2, #0
 800de10:	4543      	cmp	r3, r8
 800de12:	d321      	bcc.n	800de58 <__multiply+0x98>
 800de14:	f107 0114 	add.w	r1, r7, #20
 800de18:	f104 0214 	add.w	r2, r4, #20
 800de1c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800de20:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800de24:	9302      	str	r3, [sp, #8]
 800de26:	1b13      	subs	r3, r2, r4
 800de28:	3b15      	subs	r3, #21
 800de2a:	f023 0303 	bic.w	r3, r3, #3
 800de2e:	3304      	adds	r3, #4
 800de30:	f104 0715 	add.w	r7, r4, #21
 800de34:	42ba      	cmp	r2, r7
 800de36:	bf38      	it	cc
 800de38:	2304      	movcc	r3, #4
 800de3a:	9301      	str	r3, [sp, #4]
 800de3c:	9b02      	ldr	r3, [sp, #8]
 800de3e:	9103      	str	r1, [sp, #12]
 800de40:	428b      	cmp	r3, r1
 800de42:	d80c      	bhi.n	800de5e <__multiply+0x9e>
 800de44:	2e00      	cmp	r6, #0
 800de46:	dd03      	ble.n	800de50 <__multiply+0x90>
 800de48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d05b      	beq.n	800df08 <__multiply+0x148>
 800de50:	6106      	str	r6, [r0, #16]
 800de52:	b005      	add	sp, #20
 800de54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de58:	f843 2b04 	str.w	r2, [r3], #4
 800de5c:	e7d8      	b.n	800de10 <__multiply+0x50>
 800de5e:	f8b1 a000 	ldrh.w	sl, [r1]
 800de62:	f1ba 0f00 	cmp.w	sl, #0
 800de66:	d024      	beq.n	800deb2 <__multiply+0xf2>
 800de68:	f104 0e14 	add.w	lr, r4, #20
 800de6c:	46a9      	mov	r9, r5
 800de6e:	f04f 0c00 	mov.w	ip, #0
 800de72:	f85e 7b04 	ldr.w	r7, [lr], #4
 800de76:	f8d9 3000 	ldr.w	r3, [r9]
 800de7a:	fa1f fb87 	uxth.w	fp, r7
 800de7e:	b29b      	uxth	r3, r3
 800de80:	fb0a 330b 	mla	r3, sl, fp, r3
 800de84:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800de88:	f8d9 7000 	ldr.w	r7, [r9]
 800de8c:	4463      	add	r3, ip
 800de8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800de92:	fb0a c70b 	mla	r7, sl, fp, ip
 800de96:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dea0:	4572      	cmp	r2, lr
 800dea2:	f849 3b04 	str.w	r3, [r9], #4
 800dea6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800deaa:	d8e2      	bhi.n	800de72 <__multiply+0xb2>
 800deac:	9b01      	ldr	r3, [sp, #4]
 800deae:	f845 c003 	str.w	ip, [r5, r3]
 800deb2:	9b03      	ldr	r3, [sp, #12]
 800deb4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800deb8:	3104      	adds	r1, #4
 800deba:	f1b9 0f00 	cmp.w	r9, #0
 800debe:	d021      	beq.n	800df04 <__multiply+0x144>
 800dec0:	682b      	ldr	r3, [r5, #0]
 800dec2:	f104 0c14 	add.w	ip, r4, #20
 800dec6:	46ae      	mov	lr, r5
 800dec8:	f04f 0a00 	mov.w	sl, #0
 800decc:	f8bc b000 	ldrh.w	fp, [ip]
 800ded0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ded4:	fb09 770b 	mla	r7, r9, fp, r7
 800ded8:	4457      	add	r7, sl
 800deda:	b29b      	uxth	r3, r3
 800dedc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dee0:	f84e 3b04 	str.w	r3, [lr], #4
 800dee4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dee8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800deec:	f8be 3000 	ldrh.w	r3, [lr]
 800def0:	fb09 330a 	mla	r3, r9, sl, r3
 800def4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800def8:	4562      	cmp	r2, ip
 800defa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800defe:	d8e5      	bhi.n	800decc <__multiply+0x10c>
 800df00:	9f01      	ldr	r7, [sp, #4]
 800df02:	51eb      	str	r3, [r5, r7]
 800df04:	3504      	adds	r5, #4
 800df06:	e799      	b.n	800de3c <__multiply+0x7c>
 800df08:	3e01      	subs	r6, #1
 800df0a:	e79b      	b.n	800de44 <__multiply+0x84>
 800df0c:	08010799 	.word	0x08010799
 800df10:	080107aa 	.word	0x080107aa

0800df14 <__pow5mult>:
 800df14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df18:	4615      	mov	r5, r2
 800df1a:	f012 0203 	ands.w	r2, r2, #3
 800df1e:	4607      	mov	r7, r0
 800df20:	460e      	mov	r6, r1
 800df22:	d007      	beq.n	800df34 <__pow5mult+0x20>
 800df24:	4c25      	ldr	r4, [pc, #148]	@ (800dfbc <__pow5mult+0xa8>)
 800df26:	3a01      	subs	r2, #1
 800df28:	2300      	movs	r3, #0
 800df2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800df2e:	f7ff fe55 	bl	800dbdc <__multadd>
 800df32:	4606      	mov	r6, r0
 800df34:	10ad      	asrs	r5, r5, #2
 800df36:	d03d      	beq.n	800dfb4 <__pow5mult+0xa0>
 800df38:	69fc      	ldr	r4, [r7, #28]
 800df3a:	b97c      	cbnz	r4, 800df5c <__pow5mult+0x48>
 800df3c:	2010      	movs	r0, #16
 800df3e:	f7ff fd35 	bl	800d9ac <malloc>
 800df42:	4602      	mov	r2, r0
 800df44:	61f8      	str	r0, [r7, #28]
 800df46:	b928      	cbnz	r0, 800df54 <__pow5mult+0x40>
 800df48:	4b1d      	ldr	r3, [pc, #116]	@ (800dfc0 <__pow5mult+0xac>)
 800df4a:	481e      	ldr	r0, [pc, #120]	@ (800dfc4 <__pow5mult+0xb0>)
 800df4c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800df50:	f001 fd36 	bl	800f9c0 <__assert_func>
 800df54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800df58:	6004      	str	r4, [r0, #0]
 800df5a:	60c4      	str	r4, [r0, #12]
 800df5c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800df60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800df64:	b94c      	cbnz	r4, 800df7a <__pow5mult+0x66>
 800df66:	f240 2171 	movw	r1, #625	@ 0x271
 800df6a:	4638      	mov	r0, r7
 800df6c:	f7ff ff12 	bl	800dd94 <__i2b>
 800df70:	2300      	movs	r3, #0
 800df72:	f8c8 0008 	str.w	r0, [r8, #8]
 800df76:	4604      	mov	r4, r0
 800df78:	6003      	str	r3, [r0, #0]
 800df7a:	f04f 0900 	mov.w	r9, #0
 800df7e:	07eb      	lsls	r3, r5, #31
 800df80:	d50a      	bpl.n	800df98 <__pow5mult+0x84>
 800df82:	4631      	mov	r1, r6
 800df84:	4622      	mov	r2, r4
 800df86:	4638      	mov	r0, r7
 800df88:	f7ff ff1a 	bl	800ddc0 <__multiply>
 800df8c:	4631      	mov	r1, r6
 800df8e:	4680      	mov	r8, r0
 800df90:	4638      	mov	r0, r7
 800df92:	f7ff fe01 	bl	800db98 <_Bfree>
 800df96:	4646      	mov	r6, r8
 800df98:	106d      	asrs	r5, r5, #1
 800df9a:	d00b      	beq.n	800dfb4 <__pow5mult+0xa0>
 800df9c:	6820      	ldr	r0, [r4, #0]
 800df9e:	b938      	cbnz	r0, 800dfb0 <__pow5mult+0x9c>
 800dfa0:	4622      	mov	r2, r4
 800dfa2:	4621      	mov	r1, r4
 800dfa4:	4638      	mov	r0, r7
 800dfa6:	f7ff ff0b 	bl	800ddc0 <__multiply>
 800dfaa:	6020      	str	r0, [r4, #0]
 800dfac:	f8c0 9000 	str.w	r9, [r0]
 800dfb0:	4604      	mov	r4, r0
 800dfb2:	e7e4      	b.n	800df7e <__pow5mult+0x6a>
 800dfb4:	4630      	mov	r0, r6
 800dfb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfba:	bf00      	nop
 800dfbc:	08010804 	.word	0x08010804
 800dfc0:	0801072a 	.word	0x0801072a
 800dfc4:	080107aa 	.word	0x080107aa

0800dfc8 <__lshift>:
 800dfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfcc:	460c      	mov	r4, r1
 800dfce:	6849      	ldr	r1, [r1, #4]
 800dfd0:	6923      	ldr	r3, [r4, #16]
 800dfd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dfd6:	68a3      	ldr	r3, [r4, #8]
 800dfd8:	4607      	mov	r7, r0
 800dfda:	4691      	mov	r9, r2
 800dfdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dfe0:	f108 0601 	add.w	r6, r8, #1
 800dfe4:	42b3      	cmp	r3, r6
 800dfe6:	db0b      	blt.n	800e000 <__lshift+0x38>
 800dfe8:	4638      	mov	r0, r7
 800dfea:	f7ff fd95 	bl	800db18 <_Balloc>
 800dfee:	4605      	mov	r5, r0
 800dff0:	b948      	cbnz	r0, 800e006 <__lshift+0x3e>
 800dff2:	4602      	mov	r2, r0
 800dff4:	4b28      	ldr	r3, [pc, #160]	@ (800e098 <__lshift+0xd0>)
 800dff6:	4829      	ldr	r0, [pc, #164]	@ (800e09c <__lshift+0xd4>)
 800dff8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dffc:	f001 fce0 	bl	800f9c0 <__assert_func>
 800e000:	3101      	adds	r1, #1
 800e002:	005b      	lsls	r3, r3, #1
 800e004:	e7ee      	b.n	800dfe4 <__lshift+0x1c>
 800e006:	2300      	movs	r3, #0
 800e008:	f100 0114 	add.w	r1, r0, #20
 800e00c:	f100 0210 	add.w	r2, r0, #16
 800e010:	4618      	mov	r0, r3
 800e012:	4553      	cmp	r3, sl
 800e014:	db33      	blt.n	800e07e <__lshift+0xb6>
 800e016:	6920      	ldr	r0, [r4, #16]
 800e018:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e01c:	f104 0314 	add.w	r3, r4, #20
 800e020:	f019 091f 	ands.w	r9, r9, #31
 800e024:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e028:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e02c:	d02b      	beq.n	800e086 <__lshift+0xbe>
 800e02e:	f1c9 0e20 	rsb	lr, r9, #32
 800e032:	468a      	mov	sl, r1
 800e034:	2200      	movs	r2, #0
 800e036:	6818      	ldr	r0, [r3, #0]
 800e038:	fa00 f009 	lsl.w	r0, r0, r9
 800e03c:	4310      	orrs	r0, r2
 800e03e:	f84a 0b04 	str.w	r0, [sl], #4
 800e042:	f853 2b04 	ldr.w	r2, [r3], #4
 800e046:	459c      	cmp	ip, r3
 800e048:	fa22 f20e 	lsr.w	r2, r2, lr
 800e04c:	d8f3      	bhi.n	800e036 <__lshift+0x6e>
 800e04e:	ebac 0304 	sub.w	r3, ip, r4
 800e052:	3b15      	subs	r3, #21
 800e054:	f023 0303 	bic.w	r3, r3, #3
 800e058:	3304      	adds	r3, #4
 800e05a:	f104 0015 	add.w	r0, r4, #21
 800e05e:	4584      	cmp	ip, r0
 800e060:	bf38      	it	cc
 800e062:	2304      	movcc	r3, #4
 800e064:	50ca      	str	r2, [r1, r3]
 800e066:	b10a      	cbz	r2, 800e06c <__lshift+0xa4>
 800e068:	f108 0602 	add.w	r6, r8, #2
 800e06c:	3e01      	subs	r6, #1
 800e06e:	4638      	mov	r0, r7
 800e070:	612e      	str	r6, [r5, #16]
 800e072:	4621      	mov	r1, r4
 800e074:	f7ff fd90 	bl	800db98 <_Bfree>
 800e078:	4628      	mov	r0, r5
 800e07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e07e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e082:	3301      	adds	r3, #1
 800e084:	e7c5      	b.n	800e012 <__lshift+0x4a>
 800e086:	3904      	subs	r1, #4
 800e088:	f853 2b04 	ldr.w	r2, [r3], #4
 800e08c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e090:	459c      	cmp	ip, r3
 800e092:	d8f9      	bhi.n	800e088 <__lshift+0xc0>
 800e094:	e7ea      	b.n	800e06c <__lshift+0xa4>
 800e096:	bf00      	nop
 800e098:	08010799 	.word	0x08010799
 800e09c:	080107aa 	.word	0x080107aa

0800e0a0 <__mcmp>:
 800e0a0:	690a      	ldr	r2, [r1, #16]
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	6900      	ldr	r0, [r0, #16]
 800e0a6:	1a80      	subs	r0, r0, r2
 800e0a8:	b530      	push	{r4, r5, lr}
 800e0aa:	d10e      	bne.n	800e0ca <__mcmp+0x2a>
 800e0ac:	3314      	adds	r3, #20
 800e0ae:	3114      	adds	r1, #20
 800e0b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e0b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e0b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e0bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e0c0:	4295      	cmp	r5, r2
 800e0c2:	d003      	beq.n	800e0cc <__mcmp+0x2c>
 800e0c4:	d205      	bcs.n	800e0d2 <__mcmp+0x32>
 800e0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e0ca:	bd30      	pop	{r4, r5, pc}
 800e0cc:	42a3      	cmp	r3, r4
 800e0ce:	d3f3      	bcc.n	800e0b8 <__mcmp+0x18>
 800e0d0:	e7fb      	b.n	800e0ca <__mcmp+0x2a>
 800e0d2:	2001      	movs	r0, #1
 800e0d4:	e7f9      	b.n	800e0ca <__mcmp+0x2a>
	...

0800e0d8 <__mdiff>:
 800e0d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0dc:	4689      	mov	r9, r1
 800e0de:	4606      	mov	r6, r0
 800e0e0:	4611      	mov	r1, r2
 800e0e2:	4648      	mov	r0, r9
 800e0e4:	4614      	mov	r4, r2
 800e0e6:	f7ff ffdb 	bl	800e0a0 <__mcmp>
 800e0ea:	1e05      	subs	r5, r0, #0
 800e0ec:	d112      	bne.n	800e114 <__mdiff+0x3c>
 800e0ee:	4629      	mov	r1, r5
 800e0f0:	4630      	mov	r0, r6
 800e0f2:	f7ff fd11 	bl	800db18 <_Balloc>
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	b928      	cbnz	r0, 800e106 <__mdiff+0x2e>
 800e0fa:	4b3f      	ldr	r3, [pc, #252]	@ (800e1f8 <__mdiff+0x120>)
 800e0fc:	f240 2137 	movw	r1, #567	@ 0x237
 800e100:	483e      	ldr	r0, [pc, #248]	@ (800e1fc <__mdiff+0x124>)
 800e102:	f001 fc5d 	bl	800f9c0 <__assert_func>
 800e106:	2301      	movs	r3, #1
 800e108:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e10c:	4610      	mov	r0, r2
 800e10e:	b003      	add	sp, #12
 800e110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e114:	bfbc      	itt	lt
 800e116:	464b      	movlt	r3, r9
 800e118:	46a1      	movlt	r9, r4
 800e11a:	4630      	mov	r0, r6
 800e11c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e120:	bfba      	itte	lt
 800e122:	461c      	movlt	r4, r3
 800e124:	2501      	movlt	r5, #1
 800e126:	2500      	movge	r5, #0
 800e128:	f7ff fcf6 	bl	800db18 <_Balloc>
 800e12c:	4602      	mov	r2, r0
 800e12e:	b918      	cbnz	r0, 800e138 <__mdiff+0x60>
 800e130:	4b31      	ldr	r3, [pc, #196]	@ (800e1f8 <__mdiff+0x120>)
 800e132:	f240 2145 	movw	r1, #581	@ 0x245
 800e136:	e7e3      	b.n	800e100 <__mdiff+0x28>
 800e138:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e13c:	6926      	ldr	r6, [r4, #16]
 800e13e:	60c5      	str	r5, [r0, #12]
 800e140:	f109 0310 	add.w	r3, r9, #16
 800e144:	f109 0514 	add.w	r5, r9, #20
 800e148:	f104 0e14 	add.w	lr, r4, #20
 800e14c:	f100 0b14 	add.w	fp, r0, #20
 800e150:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e154:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e158:	9301      	str	r3, [sp, #4]
 800e15a:	46d9      	mov	r9, fp
 800e15c:	f04f 0c00 	mov.w	ip, #0
 800e160:	9b01      	ldr	r3, [sp, #4]
 800e162:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e166:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e16a:	9301      	str	r3, [sp, #4]
 800e16c:	fa1f f38a 	uxth.w	r3, sl
 800e170:	4619      	mov	r1, r3
 800e172:	b283      	uxth	r3, r0
 800e174:	1acb      	subs	r3, r1, r3
 800e176:	0c00      	lsrs	r0, r0, #16
 800e178:	4463      	add	r3, ip
 800e17a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e17e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e182:	b29b      	uxth	r3, r3
 800e184:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e188:	4576      	cmp	r6, lr
 800e18a:	f849 3b04 	str.w	r3, [r9], #4
 800e18e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e192:	d8e5      	bhi.n	800e160 <__mdiff+0x88>
 800e194:	1b33      	subs	r3, r6, r4
 800e196:	3b15      	subs	r3, #21
 800e198:	f023 0303 	bic.w	r3, r3, #3
 800e19c:	3415      	adds	r4, #21
 800e19e:	3304      	adds	r3, #4
 800e1a0:	42a6      	cmp	r6, r4
 800e1a2:	bf38      	it	cc
 800e1a4:	2304      	movcc	r3, #4
 800e1a6:	441d      	add	r5, r3
 800e1a8:	445b      	add	r3, fp
 800e1aa:	461e      	mov	r6, r3
 800e1ac:	462c      	mov	r4, r5
 800e1ae:	4544      	cmp	r4, r8
 800e1b0:	d30e      	bcc.n	800e1d0 <__mdiff+0xf8>
 800e1b2:	f108 0103 	add.w	r1, r8, #3
 800e1b6:	1b49      	subs	r1, r1, r5
 800e1b8:	f021 0103 	bic.w	r1, r1, #3
 800e1bc:	3d03      	subs	r5, #3
 800e1be:	45a8      	cmp	r8, r5
 800e1c0:	bf38      	it	cc
 800e1c2:	2100      	movcc	r1, #0
 800e1c4:	440b      	add	r3, r1
 800e1c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e1ca:	b191      	cbz	r1, 800e1f2 <__mdiff+0x11a>
 800e1cc:	6117      	str	r7, [r2, #16]
 800e1ce:	e79d      	b.n	800e10c <__mdiff+0x34>
 800e1d0:	f854 1b04 	ldr.w	r1, [r4], #4
 800e1d4:	46e6      	mov	lr, ip
 800e1d6:	0c08      	lsrs	r0, r1, #16
 800e1d8:	fa1c fc81 	uxtah	ip, ip, r1
 800e1dc:	4471      	add	r1, lr
 800e1de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e1e2:	b289      	uxth	r1, r1
 800e1e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e1e8:	f846 1b04 	str.w	r1, [r6], #4
 800e1ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e1f0:	e7dd      	b.n	800e1ae <__mdiff+0xd6>
 800e1f2:	3f01      	subs	r7, #1
 800e1f4:	e7e7      	b.n	800e1c6 <__mdiff+0xee>
 800e1f6:	bf00      	nop
 800e1f8:	08010799 	.word	0x08010799
 800e1fc:	080107aa 	.word	0x080107aa

0800e200 <__ulp>:
 800e200:	b082      	sub	sp, #8
 800e202:	ed8d 0b00 	vstr	d0, [sp]
 800e206:	9a01      	ldr	r2, [sp, #4]
 800e208:	4b0f      	ldr	r3, [pc, #60]	@ (800e248 <__ulp+0x48>)
 800e20a:	4013      	ands	r3, r2
 800e20c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e210:	2b00      	cmp	r3, #0
 800e212:	dc08      	bgt.n	800e226 <__ulp+0x26>
 800e214:	425b      	negs	r3, r3
 800e216:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e21a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e21e:	da04      	bge.n	800e22a <__ulp+0x2a>
 800e220:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e224:	4113      	asrs	r3, r2
 800e226:	2200      	movs	r2, #0
 800e228:	e008      	b.n	800e23c <__ulp+0x3c>
 800e22a:	f1a2 0314 	sub.w	r3, r2, #20
 800e22e:	2b1e      	cmp	r3, #30
 800e230:	bfda      	itte	le
 800e232:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e236:	40da      	lsrle	r2, r3
 800e238:	2201      	movgt	r2, #1
 800e23a:	2300      	movs	r3, #0
 800e23c:	4619      	mov	r1, r3
 800e23e:	4610      	mov	r0, r2
 800e240:	ec41 0b10 	vmov	d0, r0, r1
 800e244:	b002      	add	sp, #8
 800e246:	4770      	bx	lr
 800e248:	7ff00000 	.word	0x7ff00000

0800e24c <__b2d>:
 800e24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e250:	6906      	ldr	r6, [r0, #16]
 800e252:	f100 0814 	add.w	r8, r0, #20
 800e256:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e25a:	1f37      	subs	r7, r6, #4
 800e25c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e260:	4610      	mov	r0, r2
 800e262:	f7ff fd4b 	bl	800dcfc <__hi0bits>
 800e266:	f1c0 0320 	rsb	r3, r0, #32
 800e26a:	280a      	cmp	r0, #10
 800e26c:	600b      	str	r3, [r1, #0]
 800e26e:	491b      	ldr	r1, [pc, #108]	@ (800e2dc <__b2d+0x90>)
 800e270:	dc15      	bgt.n	800e29e <__b2d+0x52>
 800e272:	f1c0 0c0b 	rsb	ip, r0, #11
 800e276:	fa22 f30c 	lsr.w	r3, r2, ip
 800e27a:	45b8      	cmp	r8, r7
 800e27c:	ea43 0501 	orr.w	r5, r3, r1
 800e280:	bf34      	ite	cc
 800e282:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e286:	2300      	movcs	r3, #0
 800e288:	3015      	adds	r0, #21
 800e28a:	fa02 f000 	lsl.w	r0, r2, r0
 800e28e:	fa23 f30c 	lsr.w	r3, r3, ip
 800e292:	4303      	orrs	r3, r0
 800e294:	461c      	mov	r4, r3
 800e296:	ec45 4b10 	vmov	d0, r4, r5
 800e29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e29e:	45b8      	cmp	r8, r7
 800e2a0:	bf3a      	itte	cc
 800e2a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e2a6:	f1a6 0708 	subcc.w	r7, r6, #8
 800e2aa:	2300      	movcs	r3, #0
 800e2ac:	380b      	subs	r0, #11
 800e2ae:	d012      	beq.n	800e2d6 <__b2d+0x8a>
 800e2b0:	f1c0 0120 	rsb	r1, r0, #32
 800e2b4:	fa23 f401 	lsr.w	r4, r3, r1
 800e2b8:	4082      	lsls	r2, r0
 800e2ba:	4322      	orrs	r2, r4
 800e2bc:	4547      	cmp	r7, r8
 800e2be:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e2c2:	bf8c      	ite	hi
 800e2c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e2c8:	2200      	movls	r2, #0
 800e2ca:	4083      	lsls	r3, r0
 800e2cc:	40ca      	lsrs	r2, r1
 800e2ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	e7de      	b.n	800e294 <__b2d+0x48>
 800e2d6:	ea42 0501 	orr.w	r5, r2, r1
 800e2da:	e7db      	b.n	800e294 <__b2d+0x48>
 800e2dc:	3ff00000 	.word	0x3ff00000

0800e2e0 <__d2b>:
 800e2e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e2e4:	460f      	mov	r7, r1
 800e2e6:	2101      	movs	r1, #1
 800e2e8:	ec59 8b10 	vmov	r8, r9, d0
 800e2ec:	4616      	mov	r6, r2
 800e2ee:	f7ff fc13 	bl	800db18 <_Balloc>
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	b930      	cbnz	r0, 800e304 <__d2b+0x24>
 800e2f6:	4602      	mov	r2, r0
 800e2f8:	4b23      	ldr	r3, [pc, #140]	@ (800e388 <__d2b+0xa8>)
 800e2fa:	4824      	ldr	r0, [pc, #144]	@ (800e38c <__d2b+0xac>)
 800e2fc:	f240 310f 	movw	r1, #783	@ 0x30f
 800e300:	f001 fb5e 	bl	800f9c0 <__assert_func>
 800e304:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e308:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e30c:	b10d      	cbz	r5, 800e312 <__d2b+0x32>
 800e30e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e312:	9301      	str	r3, [sp, #4]
 800e314:	f1b8 0300 	subs.w	r3, r8, #0
 800e318:	d023      	beq.n	800e362 <__d2b+0x82>
 800e31a:	4668      	mov	r0, sp
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	f7ff fd0c 	bl	800dd3a <__lo0bits>
 800e322:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e326:	b1d0      	cbz	r0, 800e35e <__d2b+0x7e>
 800e328:	f1c0 0320 	rsb	r3, r0, #32
 800e32c:	fa02 f303 	lsl.w	r3, r2, r3
 800e330:	430b      	orrs	r3, r1
 800e332:	40c2      	lsrs	r2, r0
 800e334:	6163      	str	r3, [r4, #20]
 800e336:	9201      	str	r2, [sp, #4]
 800e338:	9b01      	ldr	r3, [sp, #4]
 800e33a:	61a3      	str	r3, [r4, #24]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	bf0c      	ite	eq
 800e340:	2201      	moveq	r2, #1
 800e342:	2202      	movne	r2, #2
 800e344:	6122      	str	r2, [r4, #16]
 800e346:	b1a5      	cbz	r5, 800e372 <__d2b+0x92>
 800e348:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e34c:	4405      	add	r5, r0
 800e34e:	603d      	str	r5, [r7, #0]
 800e350:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e354:	6030      	str	r0, [r6, #0]
 800e356:	4620      	mov	r0, r4
 800e358:	b003      	add	sp, #12
 800e35a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e35e:	6161      	str	r1, [r4, #20]
 800e360:	e7ea      	b.n	800e338 <__d2b+0x58>
 800e362:	a801      	add	r0, sp, #4
 800e364:	f7ff fce9 	bl	800dd3a <__lo0bits>
 800e368:	9b01      	ldr	r3, [sp, #4]
 800e36a:	6163      	str	r3, [r4, #20]
 800e36c:	3020      	adds	r0, #32
 800e36e:	2201      	movs	r2, #1
 800e370:	e7e8      	b.n	800e344 <__d2b+0x64>
 800e372:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e376:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e37a:	6038      	str	r0, [r7, #0]
 800e37c:	6918      	ldr	r0, [r3, #16]
 800e37e:	f7ff fcbd 	bl	800dcfc <__hi0bits>
 800e382:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e386:	e7e5      	b.n	800e354 <__d2b+0x74>
 800e388:	08010799 	.word	0x08010799
 800e38c:	080107aa 	.word	0x080107aa

0800e390 <__ratio>:
 800e390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e394:	b085      	sub	sp, #20
 800e396:	e9cd 1000 	strd	r1, r0, [sp]
 800e39a:	a902      	add	r1, sp, #8
 800e39c:	f7ff ff56 	bl	800e24c <__b2d>
 800e3a0:	9800      	ldr	r0, [sp, #0]
 800e3a2:	a903      	add	r1, sp, #12
 800e3a4:	ec55 4b10 	vmov	r4, r5, d0
 800e3a8:	f7ff ff50 	bl	800e24c <__b2d>
 800e3ac:	9b01      	ldr	r3, [sp, #4]
 800e3ae:	6919      	ldr	r1, [r3, #16]
 800e3b0:	9b00      	ldr	r3, [sp, #0]
 800e3b2:	691b      	ldr	r3, [r3, #16]
 800e3b4:	1ac9      	subs	r1, r1, r3
 800e3b6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e3ba:	1a9b      	subs	r3, r3, r2
 800e3bc:	ec5b ab10 	vmov	sl, fp, d0
 800e3c0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	bfce      	itee	gt
 800e3c8:	462a      	movgt	r2, r5
 800e3ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e3ce:	465a      	movle	r2, fp
 800e3d0:	462f      	mov	r7, r5
 800e3d2:	46d9      	mov	r9, fp
 800e3d4:	bfcc      	ite	gt
 800e3d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e3da:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e3de:	464b      	mov	r3, r9
 800e3e0:	4652      	mov	r2, sl
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	4639      	mov	r1, r7
 800e3e6:	f7f2 fa31 	bl	800084c <__aeabi_ddiv>
 800e3ea:	ec41 0b10 	vmov	d0, r0, r1
 800e3ee:	b005      	add	sp, #20
 800e3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e3f4 <__copybits>:
 800e3f4:	3901      	subs	r1, #1
 800e3f6:	b570      	push	{r4, r5, r6, lr}
 800e3f8:	1149      	asrs	r1, r1, #5
 800e3fa:	6914      	ldr	r4, [r2, #16]
 800e3fc:	3101      	adds	r1, #1
 800e3fe:	f102 0314 	add.w	r3, r2, #20
 800e402:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e406:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e40a:	1f05      	subs	r5, r0, #4
 800e40c:	42a3      	cmp	r3, r4
 800e40e:	d30c      	bcc.n	800e42a <__copybits+0x36>
 800e410:	1aa3      	subs	r3, r4, r2
 800e412:	3b11      	subs	r3, #17
 800e414:	f023 0303 	bic.w	r3, r3, #3
 800e418:	3211      	adds	r2, #17
 800e41a:	42a2      	cmp	r2, r4
 800e41c:	bf88      	it	hi
 800e41e:	2300      	movhi	r3, #0
 800e420:	4418      	add	r0, r3
 800e422:	2300      	movs	r3, #0
 800e424:	4288      	cmp	r0, r1
 800e426:	d305      	bcc.n	800e434 <__copybits+0x40>
 800e428:	bd70      	pop	{r4, r5, r6, pc}
 800e42a:	f853 6b04 	ldr.w	r6, [r3], #4
 800e42e:	f845 6f04 	str.w	r6, [r5, #4]!
 800e432:	e7eb      	b.n	800e40c <__copybits+0x18>
 800e434:	f840 3b04 	str.w	r3, [r0], #4
 800e438:	e7f4      	b.n	800e424 <__copybits+0x30>

0800e43a <__any_on>:
 800e43a:	f100 0214 	add.w	r2, r0, #20
 800e43e:	6900      	ldr	r0, [r0, #16]
 800e440:	114b      	asrs	r3, r1, #5
 800e442:	4298      	cmp	r0, r3
 800e444:	b510      	push	{r4, lr}
 800e446:	db11      	blt.n	800e46c <__any_on+0x32>
 800e448:	dd0a      	ble.n	800e460 <__any_on+0x26>
 800e44a:	f011 011f 	ands.w	r1, r1, #31
 800e44e:	d007      	beq.n	800e460 <__any_on+0x26>
 800e450:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e454:	fa24 f001 	lsr.w	r0, r4, r1
 800e458:	fa00 f101 	lsl.w	r1, r0, r1
 800e45c:	428c      	cmp	r4, r1
 800e45e:	d10b      	bne.n	800e478 <__any_on+0x3e>
 800e460:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e464:	4293      	cmp	r3, r2
 800e466:	d803      	bhi.n	800e470 <__any_on+0x36>
 800e468:	2000      	movs	r0, #0
 800e46a:	bd10      	pop	{r4, pc}
 800e46c:	4603      	mov	r3, r0
 800e46e:	e7f7      	b.n	800e460 <__any_on+0x26>
 800e470:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e474:	2900      	cmp	r1, #0
 800e476:	d0f5      	beq.n	800e464 <__any_on+0x2a>
 800e478:	2001      	movs	r0, #1
 800e47a:	e7f6      	b.n	800e46a <__any_on+0x30>

0800e47c <sulp>:
 800e47c:	b570      	push	{r4, r5, r6, lr}
 800e47e:	4604      	mov	r4, r0
 800e480:	460d      	mov	r5, r1
 800e482:	ec45 4b10 	vmov	d0, r4, r5
 800e486:	4616      	mov	r6, r2
 800e488:	f7ff feba 	bl	800e200 <__ulp>
 800e48c:	ec51 0b10 	vmov	r0, r1, d0
 800e490:	b17e      	cbz	r6, 800e4b2 <sulp+0x36>
 800e492:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e496:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	dd09      	ble.n	800e4b2 <sulp+0x36>
 800e49e:	051b      	lsls	r3, r3, #20
 800e4a0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e4a4:	2400      	movs	r4, #0
 800e4a6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e4aa:	4622      	mov	r2, r4
 800e4ac:	462b      	mov	r3, r5
 800e4ae:	f7f2 f8a3 	bl	80005f8 <__aeabi_dmul>
 800e4b2:	ec41 0b10 	vmov	d0, r0, r1
 800e4b6:	bd70      	pop	{r4, r5, r6, pc}

0800e4b8 <_strtod_l>:
 800e4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4bc:	b09f      	sub	sp, #124	@ 0x7c
 800e4be:	460c      	mov	r4, r1
 800e4c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	921a      	str	r2, [sp, #104]	@ 0x68
 800e4c6:	9005      	str	r0, [sp, #20]
 800e4c8:	f04f 0a00 	mov.w	sl, #0
 800e4cc:	f04f 0b00 	mov.w	fp, #0
 800e4d0:	460a      	mov	r2, r1
 800e4d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e4d4:	7811      	ldrb	r1, [r2, #0]
 800e4d6:	292b      	cmp	r1, #43	@ 0x2b
 800e4d8:	d04a      	beq.n	800e570 <_strtod_l+0xb8>
 800e4da:	d838      	bhi.n	800e54e <_strtod_l+0x96>
 800e4dc:	290d      	cmp	r1, #13
 800e4de:	d832      	bhi.n	800e546 <_strtod_l+0x8e>
 800e4e0:	2908      	cmp	r1, #8
 800e4e2:	d832      	bhi.n	800e54a <_strtod_l+0x92>
 800e4e4:	2900      	cmp	r1, #0
 800e4e6:	d03b      	beq.n	800e560 <_strtod_l+0xa8>
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e4ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e4ee:	782a      	ldrb	r2, [r5, #0]
 800e4f0:	2a30      	cmp	r2, #48	@ 0x30
 800e4f2:	f040 80b3 	bne.w	800e65c <_strtod_l+0x1a4>
 800e4f6:	786a      	ldrb	r2, [r5, #1]
 800e4f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e4fc:	2a58      	cmp	r2, #88	@ 0x58
 800e4fe:	d16e      	bne.n	800e5de <_strtod_l+0x126>
 800e500:	9302      	str	r3, [sp, #8]
 800e502:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e504:	9301      	str	r3, [sp, #4]
 800e506:	ab1a      	add	r3, sp, #104	@ 0x68
 800e508:	9300      	str	r3, [sp, #0]
 800e50a:	4a8e      	ldr	r2, [pc, #568]	@ (800e744 <_strtod_l+0x28c>)
 800e50c:	9805      	ldr	r0, [sp, #20]
 800e50e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e510:	a919      	add	r1, sp, #100	@ 0x64
 800e512:	f001 faef 	bl	800faf4 <__gethex>
 800e516:	f010 060f 	ands.w	r6, r0, #15
 800e51a:	4604      	mov	r4, r0
 800e51c:	d005      	beq.n	800e52a <_strtod_l+0x72>
 800e51e:	2e06      	cmp	r6, #6
 800e520:	d128      	bne.n	800e574 <_strtod_l+0xbc>
 800e522:	3501      	adds	r5, #1
 800e524:	2300      	movs	r3, #0
 800e526:	9519      	str	r5, [sp, #100]	@ 0x64
 800e528:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e52a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	f040 858e 	bne.w	800f04e <_strtod_l+0xb96>
 800e532:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e534:	b1cb      	cbz	r3, 800e56a <_strtod_l+0xb2>
 800e536:	4652      	mov	r2, sl
 800e538:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e53c:	ec43 2b10 	vmov	d0, r2, r3
 800e540:	b01f      	add	sp, #124	@ 0x7c
 800e542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e546:	2920      	cmp	r1, #32
 800e548:	d1ce      	bne.n	800e4e8 <_strtod_l+0x30>
 800e54a:	3201      	adds	r2, #1
 800e54c:	e7c1      	b.n	800e4d2 <_strtod_l+0x1a>
 800e54e:	292d      	cmp	r1, #45	@ 0x2d
 800e550:	d1ca      	bne.n	800e4e8 <_strtod_l+0x30>
 800e552:	2101      	movs	r1, #1
 800e554:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e556:	1c51      	adds	r1, r2, #1
 800e558:	9119      	str	r1, [sp, #100]	@ 0x64
 800e55a:	7852      	ldrb	r2, [r2, #1]
 800e55c:	2a00      	cmp	r2, #0
 800e55e:	d1c5      	bne.n	800e4ec <_strtod_l+0x34>
 800e560:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e562:	9419      	str	r4, [sp, #100]	@ 0x64
 800e564:	2b00      	cmp	r3, #0
 800e566:	f040 8570 	bne.w	800f04a <_strtod_l+0xb92>
 800e56a:	4652      	mov	r2, sl
 800e56c:	465b      	mov	r3, fp
 800e56e:	e7e5      	b.n	800e53c <_strtod_l+0x84>
 800e570:	2100      	movs	r1, #0
 800e572:	e7ef      	b.n	800e554 <_strtod_l+0x9c>
 800e574:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e576:	b13a      	cbz	r2, 800e588 <_strtod_l+0xd0>
 800e578:	2135      	movs	r1, #53	@ 0x35
 800e57a:	a81c      	add	r0, sp, #112	@ 0x70
 800e57c:	f7ff ff3a 	bl	800e3f4 <__copybits>
 800e580:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e582:	9805      	ldr	r0, [sp, #20]
 800e584:	f7ff fb08 	bl	800db98 <_Bfree>
 800e588:	3e01      	subs	r6, #1
 800e58a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e58c:	2e04      	cmp	r6, #4
 800e58e:	d806      	bhi.n	800e59e <_strtod_l+0xe6>
 800e590:	e8df f006 	tbb	[pc, r6]
 800e594:	201d0314 	.word	0x201d0314
 800e598:	14          	.byte	0x14
 800e599:	00          	.byte	0x00
 800e59a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e59e:	05e1      	lsls	r1, r4, #23
 800e5a0:	bf48      	it	mi
 800e5a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e5a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e5aa:	0d1b      	lsrs	r3, r3, #20
 800e5ac:	051b      	lsls	r3, r3, #20
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d1bb      	bne.n	800e52a <_strtod_l+0x72>
 800e5b2:	f7fe fb31 	bl	800cc18 <__errno>
 800e5b6:	2322      	movs	r3, #34	@ 0x22
 800e5b8:	6003      	str	r3, [r0, #0]
 800e5ba:	e7b6      	b.n	800e52a <_strtod_l+0x72>
 800e5bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e5c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e5c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e5c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e5cc:	e7e7      	b.n	800e59e <_strtod_l+0xe6>
 800e5ce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e74c <_strtod_l+0x294>
 800e5d2:	e7e4      	b.n	800e59e <_strtod_l+0xe6>
 800e5d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e5d8:	f04f 3aff 	mov.w	sl, #4294967295
 800e5dc:	e7df      	b.n	800e59e <_strtod_l+0xe6>
 800e5de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e5e0:	1c5a      	adds	r2, r3, #1
 800e5e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e5e4:	785b      	ldrb	r3, [r3, #1]
 800e5e6:	2b30      	cmp	r3, #48	@ 0x30
 800e5e8:	d0f9      	beq.n	800e5de <_strtod_l+0x126>
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d09d      	beq.n	800e52a <_strtod_l+0x72>
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e5f4:	930c      	str	r3, [sp, #48]	@ 0x30
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	9308      	str	r3, [sp, #32]
 800e5fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5fc:	461f      	mov	r7, r3
 800e5fe:	220a      	movs	r2, #10
 800e600:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e602:	7805      	ldrb	r5, [r0, #0]
 800e604:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e608:	b2d9      	uxtb	r1, r3
 800e60a:	2909      	cmp	r1, #9
 800e60c:	d928      	bls.n	800e660 <_strtod_l+0x1a8>
 800e60e:	494e      	ldr	r1, [pc, #312]	@ (800e748 <_strtod_l+0x290>)
 800e610:	2201      	movs	r2, #1
 800e612:	f001 f979 	bl	800f908 <strncmp>
 800e616:	2800      	cmp	r0, #0
 800e618:	d032      	beq.n	800e680 <_strtod_l+0x1c8>
 800e61a:	2000      	movs	r0, #0
 800e61c:	462a      	mov	r2, r5
 800e61e:	4681      	mov	r9, r0
 800e620:	463d      	mov	r5, r7
 800e622:	4603      	mov	r3, r0
 800e624:	2a65      	cmp	r2, #101	@ 0x65
 800e626:	d001      	beq.n	800e62c <_strtod_l+0x174>
 800e628:	2a45      	cmp	r2, #69	@ 0x45
 800e62a:	d114      	bne.n	800e656 <_strtod_l+0x19e>
 800e62c:	b91d      	cbnz	r5, 800e636 <_strtod_l+0x17e>
 800e62e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e630:	4302      	orrs	r2, r0
 800e632:	d095      	beq.n	800e560 <_strtod_l+0xa8>
 800e634:	2500      	movs	r5, #0
 800e636:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e638:	1c62      	adds	r2, r4, #1
 800e63a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e63c:	7862      	ldrb	r2, [r4, #1]
 800e63e:	2a2b      	cmp	r2, #43	@ 0x2b
 800e640:	d077      	beq.n	800e732 <_strtod_l+0x27a>
 800e642:	2a2d      	cmp	r2, #45	@ 0x2d
 800e644:	d07b      	beq.n	800e73e <_strtod_l+0x286>
 800e646:	f04f 0c00 	mov.w	ip, #0
 800e64a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e64e:	2909      	cmp	r1, #9
 800e650:	f240 8082 	bls.w	800e758 <_strtod_l+0x2a0>
 800e654:	9419      	str	r4, [sp, #100]	@ 0x64
 800e656:	f04f 0800 	mov.w	r8, #0
 800e65a:	e0a2      	b.n	800e7a2 <_strtod_l+0x2ea>
 800e65c:	2300      	movs	r3, #0
 800e65e:	e7c7      	b.n	800e5f0 <_strtod_l+0x138>
 800e660:	2f08      	cmp	r7, #8
 800e662:	bfd5      	itete	le
 800e664:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e666:	9908      	ldrgt	r1, [sp, #32]
 800e668:	fb02 3301 	mlale	r3, r2, r1, r3
 800e66c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e670:	f100 0001 	add.w	r0, r0, #1
 800e674:	bfd4      	ite	le
 800e676:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e678:	9308      	strgt	r3, [sp, #32]
 800e67a:	3701      	adds	r7, #1
 800e67c:	9019      	str	r0, [sp, #100]	@ 0x64
 800e67e:	e7bf      	b.n	800e600 <_strtod_l+0x148>
 800e680:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e682:	1c5a      	adds	r2, r3, #1
 800e684:	9219      	str	r2, [sp, #100]	@ 0x64
 800e686:	785a      	ldrb	r2, [r3, #1]
 800e688:	b37f      	cbz	r7, 800e6ea <_strtod_l+0x232>
 800e68a:	4681      	mov	r9, r0
 800e68c:	463d      	mov	r5, r7
 800e68e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e692:	2b09      	cmp	r3, #9
 800e694:	d912      	bls.n	800e6bc <_strtod_l+0x204>
 800e696:	2301      	movs	r3, #1
 800e698:	e7c4      	b.n	800e624 <_strtod_l+0x16c>
 800e69a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e69c:	1c5a      	adds	r2, r3, #1
 800e69e:	9219      	str	r2, [sp, #100]	@ 0x64
 800e6a0:	785a      	ldrb	r2, [r3, #1]
 800e6a2:	3001      	adds	r0, #1
 800e6a4:	2a30      	cmp	r2, #48	@ 0x30
 800e6a6:	d0f8      	beq.n	800e69a <_strtod_l+0x1e2>
 800e6a8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e6ac:	2b08      	cmp	r3, #8
 800e6ae:	f200 84d3 	bhi.w	800f058 <_strtod_l+0xba0>
 800e6b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e6b4:	930c      	str	r3, [sp, #48]	@ 0x30
 800e6b6:	4681      	mov	r9, r0
 800e6b8:	2000      	movs	r0, #0
 800e6ba:	4605      	mov	r5, r0
 800e6bc:	3a30      	subs	r2, #48	@ 0x30
 800e6be:	f100 0301 	add.w	r3, r0, #1
 800e6c2:	d02a      	beq.n	800e71a <_strtod_l+0x262>
 800e6c4:	4499      	add	r9, r3
 800e6c6:	eb00 0c05 	add.w	ip, r0, r5
 800e6ca:	462b      	mov	r3, r5
 800e6cc:	210a      	movs	r1, #10
 800e6ce:	4563      	cmp	r3, ip
 800e6d0:	d10d      	bne.n	800e6ee <_strtod_l+0x236>
 800e6d2:	1c69      	adds	r1, r5, #1
 800e6d4:	4401      	add	r1, r0
 800e6d6:	4428      	add	r0, r5
 800e6d8:	2808      	cmp	r0, #8
 800e6da:	dc16      	bgt.n	800e70a <_strtod_l+0x252>
 800e6dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e6de:	230a      	movs	r3, #10
 800e6e0:	fb03 2300 	mla	r3, r3, r0, r2
 800e6e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	e018      	b.n	800e71c <_strtod_l+0x264>
 800e6ea:	4638      	mov	r0, r7
 800e6ec:	e7da      	b.n	800e6a4 <_strtod_l+0x1ec>
 800e6ee:	2b08      	cmp	r3, #8
 800e6f0:	f103 0301 	add.w	r3, r3, #1
 800e6f4:	dc03      	bgt.n	800e6fe <_strtod_l+0x246>
 800e6f6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e6f8:	434e      	muls	r6, r1
 800e6fa:	960a      	str	r6, [sp, #40]	@ 0x28
 800e6fc:	e7e7      	b.n	800e6ce <_strtod_l+0x216>
 800e6fe:	2b10      	cmp	r3, #16
 800e700:	bfde      	ittt	le
 800e702:	9e08      	ldrle	r6, [sp, #32]
 800e704:	434e      	mulle	r6, r1
 800e706:	9608      	strle	r6, [sp, #32]
 800e708:	e7e1      	b.n	800e6ce <_strtod_l+0x216>
 800e70a:	280f      	cmp	r0, #15
 800e70c:	dceb      	bgt.n	800e6e6 <_strtod_l+0x22e>
 800e70e:	9808      	ldr	r0, [sp, #32]
 800e710:	230a      	movs	r3, #10
 800e712:	fb03 2300 	mla	r3, r3, r0, r2
 800e716:	9308      	str	r3, [sp, #32]
 800e718:	e7e5      	b.n	800e6e6 <_strtod_l+0x22e>
 800e71a:	4629      	mov	r1, r5
 800e71c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e71e:	1c50      	adds	r0, r2, #1
 800e720:	9019      	str	r0, [sp, #100]	@ 0x64
 800e722:	7852      	ldrb	r2, [r2, #1]
 800e724:	4618      	mov	r0, r3
 800e726:	460d      	mov	r5, r1
 800e728:	e7b1      	b.n	800e68e <_strtod_l+0x1d6>
 800e72a:	f04f 0900 	mov.w	r9, #0
 800e72e:	2301      	movs	r3, #1
 800e730:	e77d      	b.n	800e62e <_strtod_l+0x176>
 800e732:	f04f 0c00 	mov.w	ip, #0
 800e736:	1ca2      	adds	r2, r4, #2
 800e738:	9219      	str	r2, [sp, #100]	@ 0x64
 800e73a:	78a2      	ldrb	r2, [r4, #2]
 800e73c:	e785      	b.n	800e64a <_strtod_l+0x192>
 800e73e:	f04f 0c01 	mov.w	ip, #1
 800e742:	e7f8      	b.n	800e736 <_strtod_l+0x27e>
 800e744:	08010918 	.word	0x08010918
 800e748:	08010900 	.word	0x08010900
 800e74c:	7ff00000 	.word	0x7ff00000
 800e750:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e752:	1c51      	adds	r1, r2, #1
 800e754:	9119      	str	r1, [sp, #100]	@ 0x64
 800e756:	7852      	ldrb	r2, [r2, #1]
 800e758:	2a30      	cmp	r2, #48	@ 0x30
 800e75a:	d0f9      	beq.n	800e750 <_strtod_l+0x298>
 800e75c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e760:	2908      	cmp	r1, #8
 800e762:	f63f af78 	bhi.w	800e656 <_strtod_l+0x19e>
 800e766:	3a30      	subs	r2, #48	@ 0x30
 800e768:	920e      	str	r2, [sp, #56]	@ 0x38
 800e76a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e76c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e76e:	f04f 080a 	mov.w	r8, #10
 800e772:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e774:	1c56      	adds	r6, r2, #1
 800e776:	9619      	str	r6, [sp, #100]	@ 0x64
 800e778:	7852      	ldrb	r2, [r2, #1]
 800e77a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e77e:	f1be 0f09 	cmp.w	lr, #9
 800e782:	d939      	bls.n	800e7f8 <_strtod_l+0x340>
 800e784:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e786:	1a76      	subs	r6, r6, r1
 800e788:	2e08      	cmp	r6, #8
 800e78a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e78e:	dc03      	bgt.n	800e798 <_strtod_l+0x2e0>
 800e790:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e792:	4588      	cmp	r8, r1
 800e794:	bfa8      	it	ge
 800e796:	4688      	movge	r8, r1
 800e798:	f1bc 0f00 	cmp.w	ip, #0
 800e79c:	d001      	beq.n	800e7a2 <_strtod_l+0x2ea>
 800e79e:	f1c8 0800 	rsb	r8, r8, #0
 800e7a2:	2d00      	cmp	r5, #0
 800e7a4:	d14e      	bne.n	800e844 <_strtod_l+0x38c>
 800e7a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e7a8:	4308      	orrs	r0, r1
 800e7aa:	f47f aebe 	bne.w	800e52a <_strtod_l+0x72>
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	f47f aed6 	bne.w	800e560 <_strtod_l+0xa8>
 800e7b4:	2a69      	cmp	r2, #105	@ 0x69
 800e7b6:	d028      	beq.n	800e80a <_strtod_l+0x352>
 800e7b8:	dc25      	bgt.n	800e806 <_strtod_l+0x34e>
 800e7ba:	2a49      	cmp	r2, #73	@ 0x49
 800e7bc:	d025      	beq.n	800e80a <_strtod_l+0x352>
 800e7be:	2a4e      	cmp	r2, #78	@ 0x4e
 800e7c0:	f47f aece 	bne.w	800e560 <_strtod_l+0xa8>
 800e7c4:	499b      	ldr	r1, [pc, #620]	@ (800ea34 <_strtod_l+0x57c>)
 800e7c6:	a819      	add	r0, sp, #100	@ 0x64
 800e7c8:	f001 fbb6 	bl	800ff38 <__match>
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	f43f aec7 	beq.w	800e560 <_strtod_l+0xa8>
 800e7d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e7d4:	781b      	ldrb	r3, [r3, #0]
 800e7d6:	2b28      	cmp	r3, #40	@ 0x28
 800e7d8:	d12e      	bne.n	800e838 <_strtod_l+0x380>
 800e7da:	4997      	ldr	r1, [pc, #604]	@ (800ea38 <_strtod_l+0x580>)
 800e7dc:	aa1c      	add	r2, sp, #112	@ 0x70
 800e7de:	a819      	add	r0, sp, #100	@ 0x64
 800e7e0:	f001 fbbe 	bl	800ff60 <__hexnan>
 800e7e4:	2805      	cmp	r0, #5
 800e7e6:	d127      	bne.n	800e838 <_strtod_l+0x380>
 800e7e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e7ea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e7ee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e7f2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e7f6:	e698      	b.n	800e52a <_strtod_l+0x72>
 800e7f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e7fa:	fb08 2101 	mla	r1, r8, r1, r2
 800e7fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e802:	920e      	str	r2, [sp, #56]	@ 0x38
 800e804:	e7b5      	b.n	800e772 <_strtod_l+0x2ba>
 800e806:	2a6e      	cmp	r2, #110	@ 0x6e
 800e808:	e7da      	b.n	800e7c0 <_strtod_l+0x308>
 800e80a:	498c      	ldr	r1, [pc, #560]	@ (800ea3c <_strtod_l+0x584>)
 800e80c:	a819      	add	r0, sp, #100	@ 0x64
 800e80e:	f001 fb93 	bl	800ff38 <__match>
 800e812:	2800      	cmp	r0, #0
 800e814:	f43f aea4 	beq.w	800e560 <_strtod_l+0xa8>
 800e818:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e81a:	4989      	ldr	r1, [pc, #548]	@ (800ea40 <_strtod_l+0x588>)
 800e81c:	3b01      	subs	r3, #1
 800e81e:	a819      	add	r0, sp, #100	@ 0x64
 800e820:	9319      	str	r3, [sp, #100]	@ 0x64
 800e822:	f001 fb89 	bl	800ff38 <__match>
 800e826:	b910      	cbnz	r0, 800e82e <_strtod_l+0x376>
 800e828:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e82a:	3301      	adds	r3, #1
 800e82c:	9319      	str	r3, [sp, #100]	@ 0x64
 800e82e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ea50 <_strtod_l+0x598>
 800e832:	f04f 0a00 	mov.w	sl, #0
 800e836:	e678      	b.n	800e52a <_strtod_l+0x72>
 800e838:	4882      	ldr	r0, [pc, #520]	@ (800ea44 <_strtod_l+0x58c>)
 800e83a:	f001 f8b9 	bl	800f9b0 <nan>
 800e83e:	ec5b ab10 	vmov	sl, fp, d0
 800e842:	e672      	b.n	800e52a <_strtod_l+0x72>
 800e844:	eba8 0309 	sub.w	r3, r8, r9
 800e848:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e84a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e84c:	2f00      	cmp	r7, #0
 800e84e:	bf08      	it	eq
 800e850:	462f      	moveq	r7, r5
 800e852:	2d10      	cmp	r5, #16
 800e854:	462c      	mov	r4, r5
 800e856:	bfa8      	it	ge
 800e858:	2410      	movge	r4, #16
 800e85a:	f7f1 fe53 	bl	8000504 <__aeabi_ui2d>
 800e85e:	2d09      	cmp	r5, #9
 800e860:	4682      	mov	sl, r0
 800e862:	468b      	mov	fp, r1
 800e864:	dc13      	bgt.n	800e88e <_strtod_l+0x3d6>
 800e866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e868:	2b00      	cmp	r3, #0
 800e86a:	f43f ae5e 	beq.w	800e52a <_strtod_l+0x72>
 800e86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e870:	dd78      	ble.n	800e964 <_strtod_l+0x4ac>
 800e872:	2b16      	cmp	r3, #22
 800e874:	dc5f      	bgt.n	800e936 <_strtod_l+0x47e>
 800e876:	4974      	ldr	r1, [pc, #464]	@ (800ea48 <_strtod_l+0x590>)
 800e878:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e87c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e880:	4652      	mov	r2, sl
 800e882:	465b      	mov	r3, fp
 800e884:	f7f1 feb8 	bl	80005f8 <__aeabi_dmul>
 800e888:	4682      	mov	sl, r0
 800e88a:	468b      	mov	fp, r1
 800e88c:	e64d      	b.n	800e52a <_strtod_l+0x72>
 800e88e:	4b6e      	ldr	r3, [pc, #440]	@ (800ea48 <_strtod_l+0x590>)
 800e890:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e894:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e898:	f7f1 feae 	bl	80005f8 <__aeabi_dmul>
 800e89c:	4682      	mov	sl, r0
 800e89e:	9808      	ldr	r0, [sp, #32]
 800e8a0:	468b      	mov	fp, r1
 800e8a2:	f7f1 fe2f 	bl	8000504 <__aeabi_ui2d>
 800e8a6:	4602      	mov	r2, r0
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	4650      	mov	r0, sl
 800e8ac:	4659      	mov	r1, fp
 800e8ae:	f7f1 fced 	bl	800028c <__adddf3>
 800e8b2:	2d0f      	cmp	r5, #15
 800e8b4:	4682      	mov	sl, r0
 800e8b6:	468b      	mov	fp, r1
 800e8b8:	ddd5      	ble.n	800e866 <_strtod_l+0x3ae>
 800e8ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8bc:	1b2c      	subs	r4, r5, r4
 800e8be:	441c      	add	r4, r3
 800e8c0:	2c00      	cmp	r4, #0
 800e8c2:	f340 8096 	ble.w	800e9f2 <_strtod_l+0x53a>
 800e8c6:	f014 030f 	ands.w	r3, r4, #15
 800e8ca:	d00a      	beq.n	800e8e2 <_strtod_l+0x42a>
 800e8cc:	495e      	ldr	r1, [pc, #376]	@ (800ea48 <_strtod_l+0x590>)
 800e8ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e8d2:	4652      	mov	r2, sl
 800e8d4:	465b      	mov	r3, fp
 800e8d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8da:	f7f1 fe8d 	bl	80005f8 <__aeabi_dmul>
 800e8de:	4682      	mov	sl, r0
 800e8e0:	468b      	mov	fp, r1
 800e8e2:	f034 040f 	bics.w	r4, r4, #15
 800e8e6:	d073      	beq.n	800e9d0 <_strtod_l+0x518>
 800e8e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e8ec:	dd48      	ble.n	800e980 <_strtod_l+0x4c8>
 800e8ee:	2400      	movs	r4, #0
 800e8f0:	46a0      	mov	r8, r4
 800e8f2:	940a      	str	r4, [sp, #40]	@ 0x28
 800e8f4:	46a1      	mov	r9, r4
 800e8f6:	9a05      	ldr	r2, [sp, #20]
 800e8f8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ea50 <_strtod_l+0x598>
 800e8fc:	2322      	movs	r3, #34	@ 0x22
 800e8fe:	6013      	str	r3, [r2, #0]
 800e900:	f04f 0a00 	mov.w	sl, #0
 800e904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e906:	2b00      	cmp	r3, #0
 800e908:	f43f ae0f 	beq.w	800e52a <_strtod_l+0x72>
 800e90c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e90e:	9805      	ldr	r0, [sp, #20]
 800e910:	f7ff f942 	bl	800db98 <_Bfree>
 800e914:	9805      	ldr	r0, [sp, #20]
 800e916:	4649      	mov	r1, r9
 800e918:	f7ff f93e 	bl	800db98 <_Bfree>
 800e91c:	9805      	ldr	r0, [sp, #20]
 800e91e:	4641      	mov	r1, r8
 800e920:	f7ff f93a 	bl	800db98 <_Bfree>
 800e924:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e926:	9805      	ldr	r0, [sp, #20]
 800e928:	f7ff f936 	bl	800db98 <_Bfree>
 800e92c:	9805      	ldr	r0, [sp, #20]
 800e92e:	4621      	mov	r1, r4
 800e930:	f7ff f932 	bl	800db98 <_Bfree>
 800e934:	e5f9      	b.n	800e52a <_strtod_l+0x72>
 800e936:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e938:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e93c:	4293      	cmp	r3, r2
 800e93e:	dbbc      	blt.n	800e8ba <_strtod_l+0x402>
 800e940:	4c41      	ldr	r4, [pc, #260]	@ (800ea48 <_strtod_l+0x590>)
 800e942:	f1c5 050f 	rsb	r5, r5, #15
 800e946:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e94a:	4652      	mov	r2, sl
 800e94c:	465b      	mov	r3, fp
 800e94e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e952:	f7f1 fe51 	bl	80005f8 <__aeabi_dmul>
 800e956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e958:	1b5d      	subs	r5, r3, r5
 800e95a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e95e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e962:	e78f      	b.n	800e884 <_strtod_l+0x3cc>
 800e964:	3316      	adds	r3, #22
 800e966:	dba8      	blt.n	800e8ba <_strtod_l+0x402>
 800e968:	4b37      	ldr	r3, [pc, #220]	@ (800ea48 <_strtod_l+0x590>)
 800e96a:	eba9 0808 	sub.w	r8, r9, r8
 800e96e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e972:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e976:	4650      	mov	r0, sl
 800e978:	4659      	mov	r1, fp
 800e97a:	f7f1 ff67 	bl	800084c <__aeabi_ddiv>
 800e97e:	e783      	b.n	800e888 <_strtod_l+0x3d0>
 800e980:	4b32      	ldr	r3, [pc, #200]	@ (800ea4c <_strtod_l+0x594>)
 800e982:	9308      	str	r3, [sp, #32]
 800e984:	2300      	movs	r3, #0
 800e986:	1124      	asrs	r4, r4, #4
 800e988:	4650      	mov	r0, sl
 800e98a:	4659      	mov	r1, fp
 800e98c:	461e      	mov	r6, r3
 800e98e:	2c01      	cmp	r4, #1
 800e990:	dc21      	bgt.n	800e9d6 <_strtod_l+0x51e>
 800e992:	b10b      	cbz	r3, 800e998 <_strtod_l+0x4e0>
 800e994:	4682      	mov	sl, r0
 800e996:	468b      	mov	fp, r1
 800e998:	492c      	ldr	r1, [pc, #176]	@ (800ea4c <_strtod_l+0x594>)
 800e99a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e99e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e9a2:	4652      	mov	r2, sl
 800e9a4:	465b      	mov	r3, fp
 800e9a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9aa:	f7f1 fe25 	bl	80005f8 <__aeabi_dmul>
 800e9ae:	4b28      	ldr	r3, [pc, #160]	@ (800ea50 <_strtod_l+0x598>)
 800e9b0:	460a      	mov	r2, r1
 800e9b2:	400b      	ands	r3, r1
 800e9b4:	4927      	ldr	r1, [pc, #156]	@ (800ea54 <_strtod_l+0x59c>)
 800e9b6:	428b      	cmp	r3, r1
 800e9b8:	4682      	mov	sl, r0
 800e9ba:	d898      	bhi.n	800e8ee <_strtod_l+0x436>
 800e9bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e9c0:	428b      	cmp	r3, r1
 800e9c2:	bf86      	itte	hi
 800e9c4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ea58 <_strtod_l+0x5a0>
 800e9c8:	f04f 3aff 	movhi.w	sl, #4294967295
 800e9cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	9308      	str	r3, [sp, #32]
 800e9d4:	e07a      	b.n	800eacc <_strtod_l+0x614>
 800e9d6:	07e2      	lsls	r2, r4, #31
 800e9d8:	d505      	bpl.n	800e9e6 <_strtod_l+0x52e>
 800e9da:	9b08      	ldr	r3, [sp, #32]
 800e9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e0:	f7f1 fe0a 	bl	80005f8 <__aeabi_dmul>
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	9a08      	ldr	r2, [sp, #32]
 800e9e8:	3208      	adds	r2, #8
 800e9ea:	3601      	adds	r6, #1
 800e9ec:	1064      	asrs	r4, r4, #1
 800e9ee:	9208      	str	r2, [sp, #32]
 800e9f0:	e7cd      	b.n	800e98e <_strtod_l+0x4d6>
 800e9f2:	d0ed      	beq.n	800e9d0 <_strtod_l+0x518>
 800e9f4:	4264      	negs	r4, r4
 800e9f6:	f014 020f 	ands.w	r2, r4, #15
 800e9fa:	d00a      	beq.n	800ea12 <_strtod_l+0x55a>
 800e9fc:	4b12      	ldr	r3, [pc, #72]	@ (800ea48 <_strtod_l+0x590>)
 800e9fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea02:	4650      	mov	r0, sl
 800ea04:	4659      	mov	r1, fp
 800ea06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0a:	f7f1 ff1f 	bl	800084c <__aeabi_ddiv>
 800ea0e:	4682      	mov	sl, r0
 800ea10:	468b      	mov	fp, r1
 800ea12:	1124      	asrs	r4, r4, #4
 800ea14:	d0dc      	beq.n	800e9d0 <_strtod_l+0x518>
 800ea16:	2c1f      	cmp	r4, #31
 800ea18:	dd20      	ble.n	800ea5c <_strtod_l+0x5a4>
 800ea1a:	2400      	movs	r4, #0
 800ea1c:	46a0      	mov	r8, r4
 800ea1e:	940a      	str	r4, [sp, #40]	@ 0x28
 800ea20:	46a1      	mov	r9, r4
 800ea22:	9a05      	ldr	r2, [sp, #20]
 800ea24:	2322      	movs	r3, #34	@ 0x22
 800ea26:	f04f 0a00 	mov.w	sl, #0
 800ea2a:	f04f 0b00 	mov.w	fp, #0
 800ea2e:	6013      	str	r3, [r2, #0]
 800ea30:	e768      	b.n	800e904 <_strtod_l+0x44c>
 800ea32:	bf00      	nop
 800ea34:	080106f1 	.word	0x080106f1
 800ea38:	08010904 	.word	0x08010904
 800ea3c:	080106e9 	.word	0x080106e9
 800ea40:	08010720 	.word	0x08010720
 800ea44:	08010aad 	.word	0x08010aad
 800ea48:	08010838 	.word	0x08010838
 800ea4c:	08010810 	.word	0x08010810
 800ea50:	7ff00000 	.word	0x7ff00000
 800ea54:	7ca00000 	.word	0x7ca00000
 800ea58:	7fefffff 	.word	0x7fefffff
 800ea5c:	f014 0310 	ands.w	r3, r4, #16
 800ea60:	bf18      	it	ne
 800ea62:	236a      	movne	r3, #106	@ 0x6a
 800ea64:	4ea9      	ldr	r6, [pc, #676]	@ (800ed0c <_strtod_l+0x854>)
 800ea66:	9308      	str	r3, [sp, #32]
 800ea68:	4650      	mov	r0, sl
 800ea6a:	4659      	mov	r1, fp
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	07e2      	lsls	r2, r4, #31
 800ea70:	d504      	bpl.n	800ea7c <_strtod_l+0x5c4>
 800ea72:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ea76:	f7f1 fdbf 	bl	80005f8 <__aeabi_dmul>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	1064      	asrs	r4, r4, #1
 800ea7e:	f106 0608 	add.w	r6, r6, #8
 800ea82:	d1f4      	bne.n	800ea6e <_strtod_l+0x5b6>
 800ea84:	b10b      	cbz	r3, 800ea8a <_strtod_l+0x5d2>
 800ea86:	4682      	mov	sl, r0
 800ea88:	468b      	mov	fp, r1
 800ea8a:	9b08      	ldr	r3, [sp, #32]
 800ea8c:	b1b3      	cbz	r3, 800eabc <_strtod_l+0x604>
 800ea8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ea92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	4659      	mov	r1, fp
 800ea9a:	dd0f      	ble.n	800eabc <_strtod_l+0x604>
 800ea9c:	2b1f      	cmp	r3, #31
 800ea9e:	dd55      	ble.n	800eb4c <_strtod_l+0x694>
 800eaa0:	2b34      	cmp	r3, #52	@ 0x34
 800eaa2:	bfde      	ittt	le
 800eaa4:	f04f 33ff 	movle.w	r3, #4294967295
 800eaa8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800eaac:	4093      	lslle	r3, r2
 800eaae:	f04f 0a00 	mov.w	sl, #0
 800eab2:	bfcc      	ite	gt
 800eab4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800eab8:	ea03 0b01 	andle.w	fp, r3, r1
 800eabc:	2200      	movs	r2, #0
 800eabe:	2300      	movs	r3, #0
 800eac0:	4650      	mov	r0, sl
 800eac2:	4659      	mov	r1, fp
 800eac4:	f7f2 f800 	bl	8000ac8 <__aeabi_dcmpeq>
 800eac8:	2800      	cmp	r0, #0
 800eaca:	d1a6      	bne.n	800ea1a <_strtod_l+0x562>
 800eacc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eace:	9300      	str	r3, [sp, #0]
 800ead0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ead2:	9805      	ldr	r0, [sp, #20]
 800ead4:	462b      	mov	r3, r5
 800ead6:	463a      	mov	r2, r7
 800ead8:	f7ff f8c6 	bl	800dc68 <__s2b>
 800eadc:	900a      	str	r0, [sp, #40]	@ 0x28
 800eade:	2800      	cmp	r0, #0
 800eae0:	f43f af05 	beq.w	800e8ee <_strtod_l+0x436>
 800eae4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eae6:	2a00      	cmp	r2, #0
 800eae8:	eba9 0308 	sub.w	r3, r9, r8
 800eaec:	bfa8      	it	ge
 800eaee:	2300      	movge	r3, #0
 800eaf0:	9312      	str	r3, [sp, #72]	@ 0x48
 800eaf2:	2400      	movs	r4, #0
 800eaf4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800eaf8:	9316      	str	r3, [sp, #88]	@ 0x58
 800eafa:	46a0      	mov	r8, r4
 800eafc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eafe:	9805      	ldr	r0, [sp, #20]
 800eb00:	6859      	ldr	r1, [r3, #4]
 800eb02:	f7ff f809 	bl	800db18 <_Balloc>
 800eb06:	4681      	mov	r9, r0
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	f43f aef4 	beq.w	800e8f6 <_strtod_l+0x43e>
 800eb0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb10:	691a      	ldr	r2, [r3, #16]
 800eb12:	3202      	adds	r2, #2
 800eb14:	f103 010c 	add.w	r1, r3, #12
 800eb18:	0092      	lsls	r2, r2, #2
 800eb1a:	300c      	adds	r0, #12
 800eb1c:	f000 ff38 	bl	800f990 <memcpy>
 800eb20:	ec4b ab10 	vmov	d0, sl, fp
 800eb24:	9805      	ldr	r0, [sp, #20]
 800eb26:	aa1c      	add	r2, sp, #112	@ 0x70
 800eb28:	a91b      	add	r1, sp, #108	@ 0x6c
 800eb2a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800eb2e:	f7ff fbd7 	bl	800e2e0 <__d2b>
 800eb32:	901a      	str	r0, [sp, #104]	@ 0x68
 800eb34:	2800      	cmp	r0, #0
 800eb36:	f43f aede 	beq.w	800e8f6 <_strtod_l+0x43e>
 800eb3a:	9805      	ldr	r0, [sp, #20]
 800eb3c:	2101      	movs	r1, #1
 800eb3e:	f7ff f929 	bl	800dd94 <__i2b>
 800eb42:	4680      	mov	r8, r0
 800eb44:	b948      	cbnz	r0, 800eb5a <_strtod_l+0x6a2>
 800eb46:	f04f 0800 	mov.w	r8, #0
 800eb4a:	e6d4      	b.n	800e8f6 <_strtod_l+0x43e>
 800eb4c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb50:	fa02 f303 	lsl.w	r3, r2, r3
 800eb54:	ea03 0a0a 	and.w	sl, r3, sl
 800eb58:	e7b0      	b.n	800eabc <_strtod_l+0x604>
 800eb5a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800eb5c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800eb5e:	2d00      	cmp	r5, #0
 800eb60:	bfab      	itete	ge
 800eb62:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800eb64:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800eb66:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800eb68:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800eb6a:	bfac      	ite	ge
 800eb6c:	18ef      	addge	r7, r5, r3
 800eb6e:	1b5e      	sublt	r6, r3, r5
 800eb70:	9b08      	ldr	r3, [sp, #32]
 800eb72:	1aed      	subs	r5, r5, r3
 800eb74:	4415      	add	r5, r2
 800eb76:	4b66      	ldr	r3, [pc, #408]	@ (800ed10 <_strtod_l+0x858>)
 800eb78:	3d01      	subs	r5, #1
 800eb7a:	429d      	cmp	r5, r3
 800eb7c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800eb80:	da50      	bge.n	800ec24 <_strtod_l+0x76c>
 800eb82:	1b5b      	subs	r3, r3, r5
 800eb84:	2b1f      	cmp	r3, #31
 800eb86:	eba2 0203 	sub.w	r2, r2, r3
 800eb8a:	f04f 0101 	mov.w	r1, #1
 800eb8e:	dc3d      	bgt.n	800ec0c <_strtod_l+0x754>
 800eb90:	fa01 f303 	lsl.w	r3, r1, r3
 800eb94:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eb96:	2300      	movs	r3, #0
 800eb98:	9310      	str	r3, [sp, #64]	@ 0x40
 800eb9a:	18bd      	adds	r5, r7, r2
 800eb9c:	9b08      	ldr	r3, [sp, #32]
 800eb9e:	42af      	cmp	r7, r5
 800eba0:	4416      	add	r6, r2
 800eba2:	441e      	add	r6, r3
 800eba4:	463b      	mov	r3, r7
 800eba6:	bfa8      	it	ge
 800eba8:	462b      	movge	r3, r5
 800ebaa:	42b3      	cmp	r3, r6
 800ebac:	bfa8      	it	ge
 800ebae:	4633      	movge	r3, r6
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	bfc2      	ittt	gt
 800ebb4:	1aed      	subgt	r5, r5, r3
 800ebb6:	1af6      	subgt	r6, r6, r3
 800ebb8:	1aff      	subgt	r7, r7, r3
 800ebba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	dd16      	ble.n	800ebee <_strtod_l+0x736>
 800ebc0:	4641      	mov	r1, r8
 800ebc2:	9805      	ldr	r0, [sp, #20]
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	f7ff f9a5 	bl	800df14 <__pow5mult>
 800ebca:	4680      	mov	r8, r0
 800ebcc:	2800      	cmp	r0, #0
 800ebce:	d0ba      	beq.n	800eb46 <_strtod_l+0x68e>
 800ebd0:	4601      	mov	r1, r0
 800ebd2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ebd4:	9805      	ldr	r0, [sp, #20]
 800ebd6:	f7ff f8f3 	bl	800ddc0 <__multiply>
 800ebda:	900e      	str	r0, [sp, #56]	@ 0x38
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	f43f ae8a 	beq.w	800e8f6 <_strtod_l+0x43e>
 800ebe2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ebe4:	9805      	ldr	r0, [sp, #20]
 800ebe6:	f7fe ffd7 	bl	800db98 <_Bfree>
 800ebea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebec:	931a      	str	r3, [sp, #104]	@ 0x68
 800ebee:	2d00      	cmp	r5, #0
 800ebf0:	dc1d      	bgt.n	800ec2e <_strtod_l+0x776>
 800ebf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	dd23      	ble.n	800ec40 <_strtod_l+0x788>
 800ebf8:	4649      	mov	r1, r9
 800ebfa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ebfc:	9805      	ldr	r0, [sp, #20]
 800ebfe:	f7ff f989 	bl	800df14 <__pow5mult>
 800ec02:	4681      	mov	r9, r0
 800ec04:	b9e0      	cbnz	r0, 800ec40 <_strtod_l+0x788>
 800ec06:	f04f 0900 	mov.w	r9, #0
 800ec0a:	e674      	b.n	800e8f6 <_strtod_l+0x43e>
 800ec0c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ec10:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ec14:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ec18:	35e2      	adds	r5, #226	@ 0xe2
 800ec1a:	fa01 f305 	lsl.w	r3, r1, r5
 800ec1e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ec20:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ec22:	e7ba      	b.n	800eb9a <_strtod_l+0x6e2>
 800ec24:	2300      	movs	r3, #0
 800ec26:	9310      	str	r3, [sp, #64]	@ 0x40
 800ec28:	2301      	movs	r3, #1
 800ec2a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ec2c:	e7b5      	b.n	800eb9a <_strtod_l+0x6e2>
 800ec2e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ec30:	9805      	ldr	r0, [sp, #20]
 800ec32:	462a      	mov	r2, r5
 800ec34:	f7ff f9c8 	bl	800dfc8 <__lshift>
 800ec38:	901a      	str	r0, [sp, #104]	@ 0x68
 800ec3a:	2800      	cmp	r0, #0
 800ec3c:	d1d9      	bne.n	800ebf2 <_strtod_l+0x73a>
 800ec3e:	e65a      	b.n	800e8f6 <_strtod_l+0x43e>
 800ec40:	2e00      	cmp	r6, #0
 800ec42:	dd07      	ble.n	800ec54 <_strtod_l+0x79c>
 800ec44:	4649      	mov	r1, r9
 800ec46:	9805      	ldr	r0, [sp, #20]
 800ec48:	4632      	mov	r2, r6
 800ec4a:	f7ff f9bd 	bl	800dfc8 <__lshift>
 800ec4e:	4681      	mov	r9, r0
 800ec50:	2800      	cmp	r0, #0
 800ec52:	d0d8      	beq.n	800ec06 <_strtod_l+0x74e>
 800ec54:	2f00      	cmp	r7, #0
 800ec56:	dd08      	ble.n	800ec6a <_strtod_l+0x7b2>
 800ec58:	4641      	mov	r1, r8
 800ec5a:	9805      	ldr	r0, [sp, #20]
 800ec5c:	463a      	mov	r2, r7
 800ec5e:	f7ff f9b3 	bl	800dfc8 <__lshift>
 800ec62:	4680      	mov	r8, r0
 800ec64:	2800      	cmp	r0, #0
 800ec66:	f43f ae46 	beq.w	800e8f6 <_strtod_l+0x43e>
 800ec6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ec6c:	9805      	ldr	r0, [sp, #20]
 800ec6e:	464a      	mov	r2, r9
 800ec70:	f7ff fa32 	bl	800e0d8 <__mdiff>
 800ec74:	4604      	mov	r4, r0
 800ec76:	2800      	cmp	r0, #0
 800ec78:	f43f ae3d 	beq.w	800e8f6 <_strtod_l+0x43e>
 800ec7c:	68c3      	ldr	r3, [r0, #12]
 800ec7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ec80:	2300      	movs	r3, #0
 800ec82:	60c3      	str	r3, [r0, #12]
 800ec84:	4641      	mov	r1, r8
 800ec86:	f7ff fa0b 	bl	800e0a0 <__mcmp>
 800ec8a:	2800      	cmp	r0, #0
 800ec8c:	da46      	bge.n	800ed1c <_strtod_l+0x864>
 800ec8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec90:	ea53 030a 	orrs.w	r3, r3, sl
 800ec94:	d16c      	bne.n	800ed70 <_strtod_l+0x8b8>
 800ec96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d168      	bne.n	800ed70 <_strtod_l+0x8b8>
 800ec9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eca2:	0d1b      	lsrs	r3, r3, #20
 800eca4:	051b      	lsls	r3, r3, #20
 800eca6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ecaa:	d961      	bls.n	800ed70 <_strtod_l+0x8b8>
 800ecac:	6963      	ldr	r3, [r4, #20]
 800ecae:	b913      	cbnz	r3, 800ecb6 <_strtod_l+0x7fe>
 800ecb0:	6923      	ldr	r3, [r4, #16]
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	dd5c      	ble.n	800ed70 <_strtod_l+0x8b8>
 800ecb6:	4621      	mov	r1, r4
 800ecb8:	2201      	movs	r2, #1
 800ecba:	9805      	ldr	r0, [sp, #20]
 800ecbc:	f7ff f984 	bl	800dfc8 <__lshift>
 800ecc0:	4641      	mov	r1, r8
 800ecc2:	4604      	mov	r4, r0
 800ecc4:	f7ff f9ec 	bl	800e0a0 <__mcmp>
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	dd51      	ble.n	800ed70 <_strtod_l+0x8b8>
 800eccc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ecd0:	9a08      	ldr	r2, [sp, #32]
 800ecd2:	0d1b      	lsrs	r3, r3, #20
 800ecd4:	051b      	lsls	r3, r3, #20
 800ecd6:	2a00      	cmp	r2, #0
 800ecd8:	d06b      	beq.n	800edb2 <_strtod_l+0x8fa>
 800ecda:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ecde:	d868      	bhi.n	800edb2 <_strtod_l+0x8fa>
 800ece0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ece4:	f67f ae9d 	bls.w	800ea22 <_strtod_l+0x56a>
 800ece8:	4b0a      	ldr	r3, [pc, #40]	@ (800ed14 <_strtod_l+0x85c>)
 800ecea:	4650      	mov	r0, sl
 800ecec:	4659      	mov	r1, fp
 800ecee:	2200      	movs	r2, #0
 800ecf0:	f7f1 fc82 	bl	80005f8 <__aeabi_dmul>
 800ecf4:	4b08      	ldr	r3, [pc, #32]	@ (800ed18 <_strtod_l+0x860>)
 800ecf6:	400b      	ands	r3, r1
 800ecf8:	4682      	mov	sl, r0
 800ecfa:	468b      	mov	fp, r1
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	f47f ae05 	bne.w	800e90c <_strtod_l+0x454>
 800ed02:	9a05      	ldr	r2, [sp, #20]
 800ed04:	2322      	movs	r3, #34	@ 0x22
 800ed06:	6013      	str	r3, [r2, #0]
 800ed08:	e600      	b.n	800e90c <_strtod_l+0x454>
 800ed0a:	bf00      	nop
 800ed0c:	08010930 	.word	0x08010930
 800ed10:	fffffc02 	.word	0xfffffc02
 800ed14:	39500000 	.word	0x39500000
 800ed18:	7ff00000 	.word	0x7ff00000
 800ed1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ed20:	d165      	bne.n	800edee <_strtod_l+0x936>
 800ed22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ed24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed28:	b35a      	cbz	r2, 800ed82 <_strtod_l+0x8ca>
 800ed2a:	4a9f      	ldr	r2, [pc, #636]	@ (800efa8 <_strtod_l+0xaf0>)
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d12b      	bne.n	800ed88 <_strtod_l+0x8d0>
 800ed30:	9b08      	ldr	r3, [sp, #32]
 800ed32:	4651      	mov	r1, sl
 800ed34:	b303      	cbz	r3, 800ed78 <_strtod_l+0x8c0>
 800ed36:	4b9d      	ldr	r3, [pc, #628]	@ (800efac <_strtod_l+0xaf4>)
 800ed38:	465a      	mov	r2, fp
 800ed3a:	4013      	ands	r3, r2
 800ed3c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ed40:	f04f 32ff 	mov.w	r2, #4294967295
 800ed44:	d81b      	bhi.n	800ed7e <_strtod_l+0x8c6>
 800ed46:	0d1b      	lsrs	r3, r3, #20
 800ed48:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ed4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ed50:	4299      	cmp	r1, r3
 800ed52:	d119      	bne.n	800ed88 <_strtod_l+0x8d0>
 800ed54:	4b96      	ldr	r3, [pc, #600]	@ (800efb0 <_strtod_l+0xaf8>)
 800ed56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d102      	bne.n	800ed62 <_strtod_l+0x8aa>
 800ed5c:	3101      	adds	r1, #1
 800ed5e:	f43f adca 	beq.w	800e8f6 <_strtod_l+0x43e>
 800ed62:	4b92      	ldr	r3, [pc, #584]	@ (800efac <_strtod_l+0xaf4>)
 800ed64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed66:	401a      	ands	r2, r3
 800ed68:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ed6c:	f04f 0a00 	mov.w	sl, #0
 800ed70:	9b08      	ldr	r3, [sp, #32]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d1b8      	bne.n	800ece8 <_strtod_l+0x830>
 800ed76:	e5c9      	b.n	800e90c <_strtod_l+0x454>
 800ed78:	f04f 33ff 	mov.w	r3, #4294967295
 800ed7c:	e7e8      	b.n	800ed50 <_strtod_l+0x898>
 800ed7e:	4613      	mov	r3, r2
 800ed80:	e7e6      	b.n	800ed50 <_strtod_l+0x898>
 800ed82:	ea53 030a 	orrs.w	r3, r3, sl
 800ed86:	d0a1      	beq.n	800eccc <_strtod_l+0x814>
 800ed88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed8a:	b1db      	cbz	r3, 800edc4 <_strtod_l+0x90c>
 800ed8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed8e:	4213      	tst	r3, r2
 800ed90:	d0ee      	beq.n	800ed70 <_strtod_l+0x8b8>
 800ed92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed94:	9a08      	ldr	r2, [sp, #32]
 800ed96:	4650      	mov	r0, sl
 800ed98:	4659      	mov	r1, fp
 800ed9a:	b1bb      	cbz	r3, 800edcc <_strtod_l+0x914>
 800ed9c:	f7ff fb6e 	bl	800e47c <sulp>
 800eda0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eda4:	ec53 2b10 	vmov	r2, r3, d0
 800eda8:	f7f1 fa70 	bl	800028c <__adddf3>
 800edac:	4682      	mov	sl, r0
 800edae:	468b      	mov	fp, r1
 800edb0:	e7de      	b.n	800ed70 <_strtod_l+0x8b8>
 800edb2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800edb6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800edba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800edbe:	f04f 3aff 	mov.w	sl, #4294967295
 800edc2:	e7d5      	b.n	800ed70 <_strtod_l+0x8b8>
 800edc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800edc6:	ea13 0f0a 	tst.w	r3, sl
 800edca:	e7e1      	b.n	800ed90 <_strtod_l+0x8d8>
 800edcc:	f7ff fb56 	bl	800e47c <sulp>
 800edd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800edd4:	ec53 2b10 	vmov	r2, r3, d0
 800edd8:	f7f1 fa56 	bl	8000288 <__aeabi_dsub>
 800eddc:	2200      	movs	r2, #0
 800edde:	2300      	movs	r3, #0
 800ede0:	4682      	mov	sl, r0
 800ede2:	468b      	mov	fp, r1
 800ede4:	f7f1 fe70 	bl	8000ac8 <__aeabi_dcmpeq>
 800ede8:	2800      	cmp	r0, #0
 800edea:	d0c1      	beq.n	800ed70 <_strtod_l+0x8b8>
 800edec:	e619      	b.n	800ea22 <_strtod_l+0x56a>
 800edee:	4641      	mov	r1, r8
 800edf0:	4620      	mov	r0, r4
 800edf2:	f7ff facd 	bl	800e390 <__ratio>
 800edf6:	ec57 6b10 	vmov	r6, r7, d0
 800edfa:	2200      	movs	r2, #0
 800edfc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ee00:	4630      	mov	r0, r6
 800ee02:	4639      	mov	r1, r7
 800ee04:	f7f1 fe74 	bl	8000af0 <__aeabi_dcmple>
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	d06f      	beq.n	800eeec <_strtod_l+0xa34>
 800ee0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d17a      	bne.n	800ef08 <_strtod_l+0xa50>
 800ee12:	f1ba 0f00 	cmp.w	sl, #0
 800ee16:	d158      	bne.n	800eeca <_strtod_l+0xa12>
 800ee18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d15a      	bne.n	800eed8 <_strtod_l+0xa20>
 800ee22:	4b64      	ldr	r3, [pc, #400]	@ (800efb4 <_strtod_l+0xafc>)
 800ee24:	2200      	movs	r2, #0
 800ee26:	4630      	mov	r0, r6
 800ee28:	4639      	mov	r1, r7
 800ee2a:	f7f1 fe57 	bl	8000adc <__aeabi_dcmplt>
 800ee2e:	2800      	cmp	r0, #0
 800ee30:	d159      	bne.n	800eee6 <_strtod_l+0xa2e>
 800ee32:	4630      	mov	r0, r6
 800ee34:	4639      	mov	r1, r7
 800ee36:	4b60      	ldr	r3, [pc, #384]	@ (800efb8 <_strtod_l+0xb00>)
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f7f1 fbdd 	bl	80005f8 <__aeabi_dmul>
 800ee3e:	4606      	mov	r6, r0
 800ee40:	460f      	mov	r7, r1
 800ee42:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ee46:	9606      	str	r6, [sp, #24]
 800ee48:	9307      	str	r3, [sp, #28]
 800ee4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ee4e:	4d57      	ldr	r5, [pc, #348]	@ (800efac <_strtod_l+0xaf4>)
 800ee50:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ee54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee56:	401d      	ands	r5, r3
 800ee58:	4b58      	ldr	r3, [pc, #352]	@ (800efbc <_strtod_l+0xb04>)
 800ee5a:	429d      	cmp	r5, r3
 800ee5c:	f040 80b2 	bne.w	800efc4 <_strtod_l+0xb0c>
 800ee60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee62:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ee66:	ec4b ab10 	vmov	d0, sl, fp
 800ee6a:	f7ff f9c9 	bl	800e200 <__ulp>
 800ee6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ee72:	ec51 0b10 	vmov	r0, r1, d0
 800ee76:	f7f1 fbbf 	bl	80005f8 <__aeabi_dmul>
 800ee7a:	4652      	mov	r2, sl
 800ee7c:	465b      	mov	r3, fp
 800ee7e:	f7f1 fa05 	bl	800028c <__adddf3>
 800ee82:	460b      	mov	r3, r1
 800ee84:	4949      	ldr	r1, [pc, #292]	@ (800efac <_strtod_l+0xaf4>)
 800ee86:	4a4e      	ldr	r2, [pc, #312]	@ (800efc0 <_strtod_l+0xb08>)
 800ee88:	4019      	ands	r1, r3
 800ee8a:	4291      	cmp	r1, r2
 800ee8c:	4682      	mov	sl, r0
 800ee8e:	d942      	bls.n	800ef16 <_strtod_l+0xa5e>
 800ee90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ee92:	4b47      	ldr	r3, [pc, #284]	@ (800efb0 <_strtod_l+0xaf8>)
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d103      	bne.n	800eea0 <_strtod_l+0x9e8>
 800ee98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee9a:	3301      	adds	r3, #1
 800ee9c:	f43f ad2b 	beq.w	800e8f6 <_strtod_l+0x43e>
 800eea0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800efb0 <_strtod_l+0xaf8>
 800eea4:	f04f 3aff 	mov.w	sl, #4294967295
 800eea8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eeaa:	9805      	ldr	r0, [sp, #20]
 800eeac:	f7fe fe74 	bl	800db98 <_Bfree>
 800eeb0:	9805      	ldr	r0, [sp, #20]
 800eeb2:	4649      	mov	r1, r9
 800eeb4:	f7fe fe70 	bl	800db98 <_Bfree>
 800eeb8:	9805      	ldr	r0, [sp, #20]
 800eeba:	4641      	mov	r1, r8
 800eebc:	f7fe fe6c 	bl	800db98 <_Bfree>
 800eec0:	9805      	ldr	r0, [sp, #20]
 800eec2:	4621      	mov	r1, r4
 800eec4:	f7fe fe68 	bl	800db98 <_Bfree>
 800eec8:	e618      	b.n	800eafc <_strtod_l+0x644>
 800eeca:	f1ba 0f01 	cmp.w	sl, #1
 800eece:	d103      	bne.n	800eed8 <_strtod_l+0xa20>
 800eed0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	f43f ada5 	beq.w	800ea22 <_strtod_l+0x56a>
 800eed8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ef88 <_strtod_l+0xad0>
 800eedc:	4f35      	ldr	r7, [pc, #212]	@ (800efb4 <_strtod_l+0xafc>)
 800eede:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eee2:	2600      	movs	r6, #0
 800eee4:	e7b1      	b.n	800ee4a <_strtod_l+0x992>
 800eee6:	4f34      	ldr	r7, [pc, #208]	@ (800efb8 <_strtod_l+0xb00>)
 800eee8:	2600      	movs	r6, #0
 800eeea:	e7aa      	b.n	800ee42 <_strtod_l+0x98a>
 800eeec:	4b32      	ldr	r3, [pc, #200]	@ (800efb8 <_strtod_l+0xb00>)
 800eeee:	4630      	mov	r0, r6
 800eef0:	4639      	mov	r1, r7
 800eef2:	2200      	movs	r2, #0
 800eef4:	f7f1 fb80 	bl	80005f8 <__aeabi_dmul>
 800eef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eefa:	4606      	mov	r6, r0
 800eefc:	460f      	mov	r7, r1
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d09f      	beq.n	800ee42 <_strtod_l+0x98a>
 800ef02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ef06:	e7a0      	b.n	800ee4a <_strtod_l+0x992>
 800ef08:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ef90 <_strtod_l+0xad8>
 800ef0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ef10:	ec57 6b17 	vmov	r6, r7, d7
 800ef14:	e799      	b.n	800ee4a <_strtod_l+0x992>
 800ef16:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ef1a:	9b08      	ldr	r3, [sp, #32]
 800ef1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d1c1      	bne.n	800eea8 <_strtod_l+0x9f0>
 800ef24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ef28:	0d1b      	lsrs	r3, r3, #20
 800ef2a:	051b      	lsls	r3, r3, #20
 800ef2c:	429d      	cmp	r5, r3
 800ef2e:	d1bb      	bne.n	800eea8 <_strtod_l+0x9f0>
 800ef30:	4630      	mov	r0, r6
 800ef32:	4639      	mov	r1, r7
 800ef34:	f7f1 ff10 	bl	8000d58 <__aeabi_d2lz>
 800ef38:	f7f1 fb30 	bl	800059c <__aeabi_l2d>
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	460b      	mov	r3, r1
 800ef40:	4630      	mov	r0, r6
 800ef42:	4639      	mov	r1, r7
 800ef44:	f7f1 f9a0 	bl	8000288 <__aeabi_dsub>
 800ef48:	460b      	mov	r3, r1
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ef50:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ef54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef56:	ea46 060a 	orr.w	r6, r6, sl
 800ef5a:	431e      	orrs	r6, r3
 800ef5c:	d06f      	beq.n	800f03e <_strtod_l+0xb86>
 800ef5e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ef98 <_strtod_l+0xae0>)
 800ef60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef64:	f7f1 fdba 	bl	8000adc <__aeabi_dcmplt>
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	f47f accf 	bne.w	800e90c <_strtod_l+0x454>
 800ef6e:	a30c      	add	r3, pc, #48	@ (adr r3, 800efa0 <_strtod_l+0xae8>)
 800ef70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ef78:	f7f1 fdce 	bl	8000b18 <__aeabi_dcmpgt>
 800ef7c:	2800      	cmp	r0, #0
 800ef7e:	d093      	beq.n	800eea8 <_strtod_l+0x9f0>
 800ef80:	e4c4      	b.n	800e90c <_strtod_l+0x454>
 800ef82:	bf00      	nop
 800ef84:	f3af 8000 	nop.w
 800ef88:	00000000 	.word	0x00000000
 800ef8c:	bff00000 	.word	0xbff00000
 800ef90:	00000000 	.word	0x00000000
 800ef94:	3ff00000 	.word	0x3ff00000
 800ef98:	94a03595 	.word	0x94a03595
 800ef9c:	3fdfffff 	.word	0x3fdfffff
 800efa0:	35afe535 	.word	0x35afe535
 800efa4:	3fe00000 	.word	0x3fe00000
 800efa8:	000fffff 	.word	0x000fffff
 800efac:	7ff00000 	.word	0x7ff00000
 800efb0:	7fefffff 	.word	0x7fefffff
 800efb4:	3ff00000 	.word	0x3ff00000
 800efb8:	3fe00000 	.word	0x3fe00000
 800efbc:	7fe00000 	.word	0x7fe00000
 800efc0:	7c9fffff 	.word	0x7c9fffff
 800efc4:	9b08      	ldr	r3, [sp, #32]
 800efc6:	b323      	cbz	r3, 800f012 <_strtod_l+0xb5a>
 800efc8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800efcc:	d821      	bhi.n	800f012 <_strtod_l+0xb5a>
 800efce:	a328      	add	r3, pc, #160	@ (adr r3, 800f070 <_strtod_l+0xbb8>)
 800efd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd4:	4630      	mov	r0, r6
 800efd6:	4639      	mov	r1, r7
 800efd8:	f7f1 fd8a 	bl	8000af0 <__aeabi_dcmple>
 800efdc:	b1a0      	cbz	r0, 800f008 <_strtod_l+0xb50>
 800efde:	4639      	mov	r1, r7
 800efe0:	4630      	mov	r0, r6
 800efe2:	f7f1 fde1 	bl	8000ba8 <__aeabi_d2uiz>
 800efe6:	2801      	cmp	r0, #1
 800efe8:	bf38      	it	cc
 800efea:	2001      	movcc	r0, #1
 800efec:	f7f1 fa8a 	bl	8000504 <__aeabi_ui2d>
 800eff0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eff2:	4606      	mov	r6, r0
 800eff4:	460f      	mov	r7, r1
 800eff6:	b9fb      	cbnz	r3, 800f038 <_strtod_l+0xb80>
 800eff8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800effc:	9014      	str	r0, [sp, #80]	@ 0x50
 800effe:	9315      	str	r3, [sp, #84]	@ 0x54
 800f000:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f004:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f008:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f00a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f00e:	1b5b      	subs	r3, r3, r5
 800f010:	9311      	str	r3, [sp, #68]	@ 0x44
 800f012:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f016:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f01a:	f7ff f8f1 	bl	800e200 <__ulp>
 800f01e:	4650      	mov	r0, sl
 800f020:	ec53 2b10 	vmov	r2, r3, d0
 800f024:	4659      	mov	r1, fp
 800f026:	f7f1 fae7 	bl	80005f8 <__aeabi_dmul>
 800f02a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f02e:	f7f1 f92d 	bl	800028c <__adddf3>
 800f032:	4682      	mov	sl, r0
 800f034:	468b      	mov	fp, r1
 800f036:	e770      	b.n	800ef1a <_strtod_l+0xa62>
 800f038:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f03c:	e7e0      	b.n	800f000 <_strtod_l+0xb48>
 800f03e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f078 <_strtod_l+0xbc0>)
 800f040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f044:	f7f1 fd4a 	bl	8000adc <__aeabi_dcmplt>
 800f048:	e798      	b.n	800ef7c <_strtod_l+0xac4>
 800f04a:	2300      	movs	r3, #0
 800f04c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f04e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f050:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f052:	6013      	str	r3, [r2, #0]
 800f054:	f7ff ba6d 	b.w	800e532 <_strtod_l+0x7a>
 800f058:	2a65      	cmp	r2, #101	@ 0x65
 800f05a:	f43f ab66 	beq.w	800e72a <_strtod_l+0x272>
 800f05e:	2a45      	cmp	r2, #69	@ 0x45
 800f060:	f43f ab63 	beq.w	800e72a <_strtod_l+0x272>
 800f064:	2301      	movs	r3, #1
 800f066:	f7ff bb9e 	b.w	800e7a6 <_strtod_l+0x2ee>
 800f06a:	bf00      	nop
 800f06c:	f3af 8000 	nop.w
 800f070:	ffc00000 	.word	0xffc00000
 800f074:	41dfffff 	.word	0x41dfffff
 800f078:	94a03595 	.word	0x94a03595
 800f07c:	3fcfffff 	.word	0x3fcfffff

0800f080 <_strtod_r>:
 800f080:	4b01      	ldr	r3, [pc, #4]	@ (800f088 <_strtod_r+0x8>)
 800f082:	f7ff ba19 	b.w	800e4b8 <_strtod_l>
 800f086:	bf00      	nop
 800f088:	20000068 	.word	0x20000068

0800f08c <_strtol_l.constprop.0>:
 800f08c:	2b24      	cmp	r3, #36	@ 0x24
 800f08e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f092:	4686      	mov	lr, r0
 800f094:	4690      	mov	r8, r2
 800f096:	d801      	bhi.n	800f09c <_strtol_l.constprop.0+0x10>
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d106      	bne.n	800f0aa <_strtol_l.constprop.0+0x1e>
 800f09c:	f7fd fdbc 	bl	800cc18 <__errno>
 800f0a0:	2316      	movs	r3, #22
 800f0a2:	6003      	str	r3, [r0, #0]
 800f0a4:	2000      	movs	r0, #0
 800f0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0aa:	4834      	ldr	r0, [pc, #208]	@ (800f17c <_strtol_l.constprop.0+0xf0>)
 800f0ac:	460d      	mov	r5, r1
 800f0ae:	462a      	mov	r2, r5
 800f0b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0b4:	5d06      	ldrb	r6, [r0, r4]
 800f0b6:	f016 0608 	ands.w	r6, r6, #8
 800f0ba:	d1f8      	bne.n	800f0ae <_strtol_l.constprop.0+0x22>
 800f0bc:	2c2d      	cmp	r4, #45	@ 0x2d
 800f0be:	d12d      	bne.n	800f11c <_strtol_l.constprop.0+0x90>
 800f0c0:	782c      	ldrb	r4, [r5, #0]
 800f0c2:	2601      	movs	r6, #1
 800f0c4:	1c95      	adds	r5, r2, #2
 800f0c6:	f033 0210 	bics.w	r2, r3, #16
 800f0ca:	d109      	bne.n	800f0e0 <_strtol_l.constprop.0+0x54>
 800f0cc:	2c30      	cmp	r4, #48	@ 0x30
 800f0ce:	d12a      	bne.n	800f126 <_strtol_l.constprop.0+0x9a>
 800f0d0:	782a      	ldrb	r2, [r5, #0]
 800f0d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f0d6:	2a58      	cmp	r2, #88	@ 0x58
 800f0d8:	d125      	bne.n	800f126 <_strtol_l.constprop.0+0x9a>
 800f0da:	786c      	ldrb	r4, [r5, #1]
 800f0dc:	2310      	movs	r3, #16
 800f0de:	3502      	adds	r5, #2
 800f0e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f0e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	fbbc f9f3 	udiv	r9, ip, r3
 800f0ee:	4610      	mov	r0, r2
 800f0f0:	fb03 ca19 	mls	sl, r3, r9, ip
 800f0f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f0f8:	2f09      	cmp	r7, #9
 800f0fa:	d81b      	bhi.n	800f134 <_strtol_l.constprop.0+0xa8>
 800f0fc:	463c      	mov	r4, r7
 800f0fe:	42a3      	cmp	r3, r4
 800f100:	dd27      	ble.n	800f152 <_strtol_l.constprop.0+0xc6>
 800f102:	1c57      	adds	r7, r2, #1
 800f104:	d007      	beq.n	800f116 <_strtol_l.constprop.0+0x8a>
 800f106:	4581      	cmp	r9, r0
 800f108:	d320      	bcc.n	800f14c <_strtol_l.constprop.0+0xc0>
 800f10a:	d101      	bne.n	800f110 <_strtol_l.constprop.0+0x84>
 800f10c:	45a2      	cmp	sl, r4
 800f10e:	db1d      	blt.n	800f14c <_strtol_l.constprop.0+0xc0>
 800f110:	fb00 4003 	mla	r0, r0, r3, r4
 800f114:	2201      	movs	r2, #1
 800f116:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f11a:	e7eb      	b.n	800f0f4 <_strtol_l.constprop.0+0x68>
 800f11c:	2c2b      	cmp	r4, #43	@ 0x2b
 800f11e:	bf04      	itt	eq
 800f120:	782c      	ldrbeq	r4, [r5, #0]
 800f122:	1c95      	addeq	r5, r2, #2
 800f124:	e7cf      	b.n	800f0c6 <_strtol_l.constprop.0+0x3a>
 800f126:	2b00      	cmp	r3, #0
 800f128:	d1da      	bne.n	800f0e0 <_strtol_l.constprop.0+0x54>
 800f12a:	2c30      	cmp	r4, #48	@ 0x30
 800f12c:	bf0c      	ite	eq
 800f12e:	2308      	moveq	r3, #8
 800f130:	230a      	movne	r3, #10
 800f132:	e7d5      	b.n	800f0e0 <_strtol_l.constprop.0+0x54>
 800f134:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f138:	2f19      	cmp	r7, #25
 800f13a:	d801      	bhi.n	800f140 <_strtol_l.constprop.0+0xb4>
 800f13c:	3c37      	subs	r4, #55	@ 0x37
 800f13e:	e7de      	b.n	800f0fe <_strtol_l.constprop.0+0x72>
 800f140:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f144:	2f19      	cmp	r7, #25
 800f146:	d804      	bhi.n	800f152 <_strtol_l.constprop.0+0xc6>
 800f148:	3c57      	subs	r4, #87	@ 0x57
 800f14a:	e7d8      	b.n	800f0fe <_strtol_l.constprop.0+0x72>
 800f14c:	f04f 32ff 	mov.w	r2, #4294967295
 800f150:	e7e1      	b.n	800f116 <_strtol_l.constprop.0+0x8a>
 800f152:	1c53      	adds	r3, r2, #1
 800f154:	d108      	bne.n	800f168 <_strtol_l.constprop.0+0xdc>
 800f156:	2322      	movs	r3, #34	@ 0x22
 800f158:	f8ce 3000 	str.w	r3, [lr]
 800f15c:	4660      	mov	r0, ip
 800f15e:	f1b8 0f00 	cmp.w	r8, #0
 800f162:	d0a0      	beq.n	800f0a6 <_strtol_l.constprop.0+0x1a>
 800f164:	1e69      	subs	r1, r5, #1
 800f166:	e006      	b.n	800f176 <_strtol_l.constprop.0+0xea>
 800f168:	b106      	cbz	r6, 800f16c <_strtol_l.constprop.0+0xe0>
 800f16a:	4240      	negs	r0, r0
 800f16c:	f1b8 0f00 	cmp.w	r8, #0
 800f170:	d099      	beq.n	800f0a6 <_strtol_l.constprop.0+0x1a>
 800f172:	2a00      	cmp	r2, #0
 800f174:	d1f6      	bne.n	800f164 <_strtol_l.constprop.0+0xd8>
 800f176:	f8c8 1000 	str.w	r1, [r8]
 800f17a:	e794      	b.n	800f0a6 <_strtol_l.constprop.0+0x1a>
 800f17c:	08010959 	.word	0x08010959

0800f180 <_strtol_r>:
 800f180:	f7ff bf84 	b.w	800f08c <_strtol_l.constprop.0>

0800f184 <__ssputs_r>:
 800f184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f188:	688e      	ldr	r6, [r1, #8]
 800f18a:	461f      	mov	r7, r3
 800f18c:	42be      	cmp	r6, r7
 800f18e:	680b      	ldr	r3, [r1, #0]
 800f190:	4682      	mov	sl, r0
 800f192:	460c      	mov	r4, r1
 800f194:	4690      	mov	r8, r2
 800f196:	d82d      	bhi.n	800f1f4 <__ssputs_r+0x70>
 800f198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f19c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f1a0:	d026      	beq.n	800f1f0 <__ssputs_r+0x6c>
 800f1a2:	6965      	ldr	r5, [r4, #20]
 800f1a4:	6909      	ldr	r1, [r1, #16]
 800f1a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f1aa:	eba3 0901 	sub.w	r9, r3, r1
 800f1ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f1b2:	1c7b      	adds	r3, r7, #1
 800f1b4:	444b      	add	r3, r9
 800f1b6:	106d      	asrs	r5, r5, #1
 800f1b8:	429d      	cmp	r5, r3
 800f1ba:	bf38      	it	cc
 800f1bc:	461d      	movcc	r5, r3
 800f1be:	0553      	lsls	r3, r2, #21
 800f1c0:	d527      	bpl.n	800f212 <__ssputs_r+0x8e>
 800f1c2:	4629      	mov	r1, r5
 800f1c4:	f7fe fc1c 	bl	800da00 <_malloc_r>
 800f1c8:	4606      	mov	r6, r0
 800f1ca:	b360      	cbz	r0, 800f226 <__ssputs_r+0xa2>
 800f1cc:	6921      	ldr	r1, [r4, #16]
 800f1ce:	464a      	mov	r2, r9
 800f1d0:	f000 fbde 	bl	800f990 <memcpy>
 800f1d4:	89a3      	ldrh	r3, [r4, #12]
 800f1d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f1da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1de:	81a3      	strh	r3, [r4, #12]
 800f1e0:	6126      	str	r6, [r4, #16]
 800f1e2:	6165      	str	r5, [r4, #20]
 800f1e4:	444e      	add	r6, r9
 800f1e6:	eba5 0509 	sub.w	r5, r5, r9
 800f1ea:	6026      	str	r6, [r4, #0]
 800f1ec:	60a5      	str	r5, [r4, #8]
 800f1ee:	463e      	mov	r6, r7
 800f1f0:	42be      	cmp	r6, r7
 800f1f2:	d900      	bls.n	800f1f6 <__ssputs_r+0x72>
 800f1f4:	463e      	mov	r6, r7
 800f1f6:	6820      	ldr	r0, [r4, #0]
 800f1f8:	4632      	mov	r2, r6
 800f1fa:	4641      	mov	r1, r8
 800f1fc:	f000 fb6a 	bl	800f8d4 <memmove>
 800f200:	68a3      	ldr	r3, [r4, #8]
 800f202:	1b9b      	subs	r3, r3, r6
 800f204:	60a3      	str	r3, [r4, #8]
 800f206:	6823      	ldr	r3, [r4, #0]
 800f208:	4433      	add	r3, r6
 800f20a:	6023      	str	r3, [r4, #0]
 800f20c:	2000      	movs	r0, #0
 800f20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f212:	462a      	mov	r2, r5
 800f214:	f000 ff51 	bl	80100ba <_realloc_r>
 800f218:	4606      	mov	r6, r0
 800f21a:	2800      	cmp	r0, #0
 800f21c:	d1e0      	bne.n	800f1e0 <__ssputs_r+0x5c>
 800f21e:	6921      	ldr	r1, [r4, #16]
 800f220:	4650      	mov	r0, sl
 800f222:	f7fe fb79 	bl	800d918 <_free_r>
 800f226:	230c      	movs	r3, #12
 800f228:	f8ca 3000 	str.w	r3, [sl]
 800f22c:	89a3      	ldrh	r3, [r4, #12]
 800f22e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f232:	81a3      	strh	r3, [r4, #12]
 800f234:	f04f 30ff 	mov.w	r0, #4294967295
 800f238:	e7e9      	b.n	800f20e <__ssputs_r+0x8a>
	...

0800f23c <_svfiprintf_r>:
 800f23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f240:	4698      	mov	r8, r3
 800f242:	898b      	ldrh	r3, [r1, #12]
 800f244:	061b      	lsls	r3, r3, #24
 800f246:	b09d      	sub	sp, #116	@ 0x74
 800f248:	4607      	mov	r7, r0
 800f24a:	460d      	mov	r5, r1
 800f24c:	4614      	mov	r4, r2
 800f24e:	d510      	bpl.n	800f272 <_svfiprintf_r+0x36>
 800f250:	690b      	ldr	r3, [r1, #16]
 800f252:	b973      	cbnz	r3, 800f272 <_svfiprintf_r+0x36>
 800f254:	2140      	movs	r1, #64	@ 0x40
 800f256:	f7fe fbd3 	bl	800da00 <_malloc_r>
 800f25a:	6028      	str	r0, [r5, #0]
 800f25c:	6128      	str	r0, [r5, #16]
 800f25e:	b930      	cbnz	r0, 800f26e <_svfiprintf_r+0x32>
 800f260:	230c      	movs	r3, #12
 800f262:	603b      	str	r3, [r7, #0]
 800f264:	f04f 30ff 	mov.w	r0, #4294967295
 800f268:	b01d      	add	sp, #116	@ 0x74
 800f26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f26e:	2340      	movs	r3, #64	@ 0x40
 800f270:	616b      	str	r3, [r5, #20]
 800f272:	2300      	movs	r3, #0
 800f274:	9309      	str	r3, [sp, #36]	@ 0x24
 800f276:	2320      	movs	r3, #32
 800f278:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f27c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f280:	2330      	movs	r3, #48	@ 0x30
 800f282:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f420 <_svfiprintf_r+0x1e4>
 800f286:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f28a:	f04f 0901 	mov.w	r9, #1
 800f28e:	4623      	mov	r3, r4
 800f290:	469a      	mov	sl, r3
 800f292:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f296:	b10a      	cbz	r2, 800f29c <_svfiprintf_r+0x60>
 800f298:	2a25      	cmp	r2, #37	@ 0x25
 800f29a:	d1f9      	bne.n	800f290 <_svfiprintf_r+0x54>
 800f29c:	ebba 0b04 	subs.w	fp, sl, r4
 800f2a0:	d00b      	beq.n	800f2ba <_svfiprintf_r+0x7e>
 800f2a2:	465b      	mov	r3, fp
 800f2a4:	4622      	mov	r2, r4
 800f2a6:	4629      	mov	r1, r5
 800f2a8:	4638      	mov	r0, r7
 800f2aa:	f7ff ff6b 	bl	800f184 <__ssputs_r>
 800f2ae:	3001      	adds	r0, #1
 800f2b0:	f000 80a7 	beq.w	800f402 <_svfiprintf_r+0x1c6>
 800f2b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2b6:	445a      	add	r2, fp
 800f2b8:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2ba:	f89a 3000 	ldrb.w	r3, [sl]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	f000 809f 	beq.w	800f402 <_svfiprintf_r+0x1c6>
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2ce:	f10a 0a01 	add.w	sl, sl, #1
 800f2d2:	9304      	str	r3, [sp, #16]
 800f2d4:	9307      	str	r3, [sp, #28]
 800f2d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f2da:	931a      	str	r3, [sp, #104]	@ 0x68
 800f2dc:	4654      	mov	r4, sl
 800f2de:	2205      	movs	r2, #5
 800f2e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2e4:	484e      	ldr	r0, [pc, #312]	@ (800f420 <_svfiprintf_r+0x1e4>)
 800f2e6:	f7f0 ff73 	bl	80001d0 <memchr>
 800f2ea:	9a04      	ldr	r2, [sp, #16]
 800f2ec:	b9d8      	cbnz	r0, 800f326 <_svfiprintf_r+0xea>
 800f2ee:	06d0      	lsls	r0, r2, #27
 800f2f0:	bf44      	itt	mi
 800f2f2:	2320      	movmi	r3, #32
 800f2f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2f8:	0711      	lsls	r1, r2, #28
 800f2fa:	bf44      	itt	mi
 800f2fc:	232b      	movmi	r3, #43	@ 0x2b
 800f2fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f302:	f89a 3000 	ldrb.w	r3, [sl]
 800f306:	2b2a      	cmp	r3, #42	@ 0x2a
 800f308:	d015      	beq.n	800f336 <_svfiprintf_r+0xfa>
 800f30a:	9a07      	ldr	r2, [sp, #28]
 800f30c:	4654      	mov	r4, sl
 800f30e:	2000      	movs	r0, #0
 800f310:	f04f 0c0a 	mov.w	ip, #10
 800f314:	4621      	mov	r1, r4
 800f316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f31a:	3b30      	subs	r3, #48	@ 0x30
 800f31c:	2b09      	cmp	r3, #9
 800f31e:	d94b      	bls.n	800f3b8 <_svfiprintf_r+0x17c>
 800f320:	b1b0      	cbz	r0, 800f350 <_svfiprintf_r+0x114>
 800f322:	9207      	str	r2, [sp, #28]
 800f324:	e014      	b.n	800f350 <_svfiprintf_r+0x114>
 800f326:	eba0 0308 	sub.w	r3, r0, r8
 800f32a:	fa09 f303 	lsl.w	r3, r9, r3
 800f32e:	4313      	orrs	r3, r2
 800f330:	9304      	str	r3, [sp, #16]
 800f332:	46a2      	mov	sl, r4
 800f334:	e7d2      	b.n	800f2dc <_svfiprintf_r+0xa0>
 800f336:	9b03      	ldr	r3, [sp, #12]
 800f338:	1d19      	adds	r1, r3, #4
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	9103      	str	r1, [sp, #12]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	bfbb      	ittet	lt
 800f342:	425b      	neglt	r3, r3
 800f344:	f042 0202 	orrlt.w	r2, r2, #2
 800f348:	9307      	strge	r3, [sp, #28]
 800f34a:	9307      	strlt	r3, [sp, #28]
 800f34c:	bfb8      	it	lt
 800f34e:	9204      	strlt	r2, [sp, #16]
 800f350:	7823      	ldrb	r3, [r4, #0]
 800f352:	2b2e      	cmp	r3, #46	@ 0x2e
 800f354:	d10a      	bne.n	800f36c <_svfiprintf_r+0x130>
 800f356:	7863      	ldrb	r3, [r4, #1]
 800f358:	2b2a      	cmp	r3, #42	@ 0x2a
 800f35a:	d132      	bne.n	800f3c2 <_svfiprintf_r+0x186>
 800f35c:	9b03      	ldr	r3, [sp, #12]
 800f35e:	1d1a      	adds	r2, r3, #4
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	9203      	str	r2, [sp, #12]
 800f364:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f368:	3402      	adds	r4, #2
 800f36a:	9305      	str	r3, [sp, #20]
 800f36c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f430 <_svfiprintf_r+0x1f4>
 800f370:	7821      	ldrb	r1, [r4, #0]
 800f372:	2203      	movs	r2, #3
 800f374:	4650      	mov	r0, sl
 800f376:	f7f0 ff2b 	bl	80001d0 <memchr>
 800f37a:	b138      	cbz	r0, 800f38c <_svfiprintf_r+0x150>
 800f37c:	9b04      	ldr	r3, [sp, #16]
 800f37e:	eba0 000a 	sub.w	r0, r0, sl
 800f382:	2240      	movs	r2, #64	@ 0x40
 800f384:	4082      	lsls	r2, r0
 800f386:	4313      	orrs	r3, r2
 800f388:	3401      	adds	r4, #1
 800f38a:	9304      	str	r3, [sp, #16]
 800f38c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f390:	4824      	ldr	r0, [pc, #144]	@ (800f424 <_svfiprintf_r+0x1e8>)
 800f392:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f396:	2206      	movs	r2, #6
 800f398:	f7f0 ff1a 	bl	80001d0 <memchr>
 800f39c:	2800      	cmp	r0, #0
 800f39e:	d036      	beq.n	800f40e <_svfiprintf_r+0x1d2>
 800f3a0:	4b21      	ldr	r3, [pc, #132]	@ (800f428 <_svfiprintf_r+0x1ec>)
 800f3a2:	bb1b      	cbnz	r3, 800f3ec <_svfiprintf_r+0x1b0>
 800f3a4:	9b03      	ldr	r3, [sp, #12]
 800f3a6:	3307      	adds	r3, #7
 800f3a8:	f023 0307 	bic.w	r3, r3, #7
 800f3ac:	3308      	adds	r3, #8
 800f3ae:	9303      	str	r3, [sp, #12]
 800f3b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3b2:	4433      	add	r3, r6
 800f3b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3b6:	e76a      	b.n	800f28e <_svfiprintf_r+0x52>
 800f3b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3bc:	460c      	mov	r4, r1
 800f3be:	2001      	movs	r0, #1
 800f3c0:	e7a8      	b.n	800f314 <_svfiprintf_r+0xd8>
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	3401      	adds	r4, #1
 800f3c6:	9305      	str	r3, [sp, #20]
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	f04f 0c0a 	mov.w	ip, #10
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3d4:	3a30      	subs	r2, #48	@ 0x30
 800f3d6:	2a09      	cmp	r2, #9
 800f3d8:	d903      	bls.n	800f3e2 <_svfiprintf_r+0x1a6>
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d0c6      	beq.n	800f36c <_svfiprintf_r+0x130>
 800f3de:	9105      	str	r1, [sp, #20]
 800f3e0:	e7c4      	b.n	800f36c <_svfiprintf_r+0x130>
 800f3e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3e6:	4604      	mov	r4, r0
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	e7f0      	b.n	800f3ce <_svfiprintf_r+0x192>
 800f3ec:	ab03      	add	r3, sp, #12
 800f3ee:	9300      	str	r3, [sp, #0]
 800f3f0:	462a      	mov	r2, r5
 800f3f2:	4b0e      	ldr	r3, [pc, #56]	@ (800f42c <_svfiprintf_r+0x1f0>)
 800f3f4:	a904      	add	r1, sp, #16
 800f3f6:	4638      	mov	r0, r7
 800f3f8:	f7fc fb92 	bl	800bb20 <_printf_float>
 800f3fc:	1c42      	adds	r2, r0, #1
 800f3fe:	4606      	mov	r6, r0
 800f400:	d1d6      	bne.n	800f3b0 <_svfiprintf_r+0x174>
 800f402:	89ab      	ldrh	r3, [r5, #12]
 800f404:	065b      	lsls	r3, r3, #25
 800f406:	f53f af2d 	bmi.w	800f264 <_svfiprintf_r+0x28>
 800f40a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f40c:	e72c      	b.n	800f268 <_svfiprintf_r+0x2c>
 800f40e:	ab03      	add	r3, sp, #12
 800f410:	9300      	str	r3, [sp, #0]
 800f412:	462a      	mov	r2, r5
 800f414:	4b05      	ldr	r3, [pc, #20]	@ (800f42c <_svfiprintf_r+0x1f0>)
 800f416:	a904      	add	r1, sp, #16
 800f418:	4638      	mov	r0, r7
 800f41a:	f7fc fe19 	bl	800c050 <_printf_i>
 800f41e:	e7ed      	b.n	800f3fc <_svfiprintf_r+0x1c0>
 800f420:	08010a59 	.word	0x08010a59
 800f424:	08010a63 	.word	0x08010a63
 800f428:	0800bb21 	.word	0x0800bb21
 800f42c:	0800f185 	.word	0x0800f185
 800f430:	08010a5f 	.word	0x08010a5f

0800f434 <__sfputc_r>:
 800f434:	6893      	ldr	r3, [r2, #8]
 800f436:	3b01      	subs	r3, #1
 800f438:	2b00      	cmp	r3, #0
 800f43a:	b410      	push	{r4}
 800f43c:	6093      	str	r3, [r2, #8]
 800f43e:	da08      	bge.n	800f452 <__sfputc_r+0x1e>
 800f440:	6994      	ldr	r4, [r2, #24]
 800f442:	42a3      	cmp	r3, r4
 800f444:	db01      	blt.n	800f44a <__sfputc_r+0x16>
 800f446:	290a      	cmp	r1, #10
 800f448:	d103      	bne.n	800f452 <__sfputc_r+0x1e>
 800f44a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f44e:	f7fd bafc 	b.w	800ca4a <__swbuf_r>
 800f452:	6813      	ldr	r3, [r2, #0]
 800f454:	1c58      	adds	r0, r3, #1
 800f456:	6010      	str	r0, [r2, #0]
 800f458:	7019      	strb	r1, [r3, #0]
 800f45a:	4608      	mov	r0, r1
 800f45c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f460:	4770      	bx	lr

0800f462 <__sfputs_r>:
 800f462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f464:	4606      	mov	r6, r0
 800f466:	460f      	mov	r7, r1
 800f468:	4614      	mov	r4, r2
 800f46a:	18d5      	adds	r5, r2, r3
 800f46c:	42ac      	cmp	r4, r5
 800f46e:	d101      	bne.n	800f474 <__sfputs_r+0x12>
 800f470:	2000      	movs	r0, #0
 800f472:	e007      	b.n	800f484 <__sfputs_r+0x22>
 800f474:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f478:	463a      	mov	r2, r7
 800f47a:	4630      	mov	r0, r6
 800f47c:	f7ff ffda 	bl	800f434 <__sfputc_r>
 800f480:	1c43      	adds	r3, r0, #1
 800f482:	d1f3      	bne.n	800f46c <__sfputs_r+0xa>
 800f484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f488 <_vfiprintf_r>:
 800f488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f48c:	460d      	mov	r5, r1
 800f48e:	b09d      	sub	sp, #116	@ 0x74
 800f490:	4614      	mov	r4, r2
 800f492:	4698      	mov	r8, r3
 800f494:	4606      	mov	r6, r0
 800f496:	b118      	cbz	r0, 800f4a0 <_vfiprintf_r+0x18>
 800f498:	6a03      	ldr	r3, [r0, #32]
 800f49a:	b90b      	cbnz	r3, 800f4a0 <_vfiprintf_r+0x18>
 800f49c:	f7fd f998 	bl	800c7d0 <__sinit>
 800f4a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f4a2:	07d9      	lsls	r1, r3, #31
 800f4a4:	d405      	bmi.n	800f4b2 <_vfiprintf_r+0x2a>
 800f4a6:	89ab      	ldrh	r3, [r5, #12]
 800f4a8:	059a      	lsls	r2, r3, #22
 800f4aa:	d402      	bmi.n	800f4b2 <_vfiprintf_r+0x2a>
 800f4ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f4ae:	f7fd fbde 	bl	800cc6e <__retarget_lock_acquire_recursive>
 800f4b2:	89ab      	ldrh	r3, [r5, #12]
 800f4b4:	071b      	lsls	r3, r3, #28
 800f4b6:	d501      	bpl.n	800f4bc <_vfiprintf_r+0x34>
 800f4b8:	692b      	ldr	r3, [r5, #16]
 800f4ba:	b99b      	cbnz	r3, 800f4e4 <_vfiprintf_r+0x5c>
 800f4bc:	4629      	mov	r1, r5
 800f4be:	4630      	mov	r0, r6
 800f4c0:	f7fd fb02 	bl	800cac8 <__swsetup_r>
 800f4c4:	b170      	cbz	r0, 800f4e4 <_vfiprintf_r+0x5c>
 800f4c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f4c8:	07dc      	lsls	r4, r3, #31
 800f4ca:	d504      	bpl.n	800f4d6 <_vfiprintf_r+0x4e>
 800f4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d0:	b01d      	add	sp, #116	@ 0x74
 800f4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4d6:	89ab      	ldrh	r3, [r5, #12]
 800f4d8:	0598      	lsls	r0, r3, #22
 800f4da:	d4f7      	bmi.n	800f4cc <_vfiprintf_r+0x44>
 800f4dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f4de:	f7fd fbc7 	bl	800cc70 <__retarget_lock_release_recursive>
 800f4e2:	e7f3      	b.n	800f4cc <_vfiprintf_r+0x44>
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4e8:	2320      	movs	r3, #32
 800f4ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f4ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4f2:	2330      	movs	r3, #48	@ 0x30
 800f4f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f6a4 <_vfiprintf_r+0x21c>
 800f4f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f4fc:	f04f 0901 	mov.w	r9, #1
 800f500:	4623      	mov	r3, r4
 800f502:	469a      	mov	sl, r3
 800f504:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f508:	b10a      	cbz	r2, 800f50e <_vfiprintf_r+0x86>
 800f50a:	2a25      	cmp	r2, #37	@ 0x25
 800f50c:	d1f9      	bne.n	800f502 <_vfiprintf_r+0x7a>
 800f50e:	ebba 0b04 	subs.w	fp, sl, r4
 800f512:	d00b      	beq.n	800f52c <_vfiprintf_r+0xa4>
 800f514:	465b      	mov	r3, fp
 800f516:	4622      	mov	r2, r4
 800f518:	4629      	mov	r1, r5
 800f51a:	4630      	mov	r0, r6
 800f51c:	f7ff ffa1 	bl	800f462 <__sfputs_r>
 800f520:	3001      	adds	r0, #1
 800f522:	f000 80a7 	beq.w	800f674 <_vfiprintf_r+0x1ec>
 800f526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f528:	445a      	add	r2, fp
 800f52a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f52c:	f89a 3000 	ldrb.w	r3, [sl]
 800f530:	2b00      	cmp	r3, #0
 800f532:	f000 809f 	beq.w	800f674 <_vfiprintf_r+0x1ec>
 800f536:	2300      	movs	r3, #0
 800f538:	f04f 32ff 	mov.w	r2, #4294967295
 800f53c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f540:	f10a 0a01 	add.w	sl, sl, #1
 800f544:	9304      	str	r3, [sp, #16]
 800f546:	9307      	str	r3, [sp, #28]
 800f548:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f54c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f54e:	4654      	mov	r4, sl
 800f550:	2205      	movs	r2, #5
 800f552:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f556:	4853      	ldr	r0, [pc, #332]	@ (800f6a4 <_vfiprintf_r+0x21c>)
 800f558:	f7f0 fe3a 	bl	80001d0 <memchr>
 800f55c:	9a04      	ldr	r2, [sp, #16]
 800f55e:	b9d8      	cbnz	r0, 800f598 <_vfiprintf_r+0x110>
 800f560:	06d1      	lsls	r1, r2, #27
 800f562:	bf44      	itt	mi
 800f564:	2320      	movmi	r3, #32
 800f566:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f56a:	0713      	lsls	r3, r2, #28
 800f56c:	bf44      	itt	mi
 800f56e:	232b      	movmi	r3, #43	@ 0x2b
 800f570:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f574:	f89a 3000 	ldrb.w	r3, [sl]
 800f578:	2b2a      	cmp	r3, #42	@ 0x2a
 800f57a:	d015      	beq.n	800f5a8 <_vfiprintf_r+0x120>
 800f57c:	9a07      	ldr	r2, [sp, #28]
 800f57e:	4654      	mov	r4, sl
 800f580:	2000      	movs	r0, #0
 800f582:	f04f 0c0a 	mov.w	ip, #10
 800f586:	4621      	mov	r1, r4
 800f588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f58c:	3b30      	subs	r3, #48	@ 0x30
 800f58e:	2b09      	cmp	r3, #9
 800f590:	d94b      	bls.n	800f62a <_vfiprintf_r+0x1a2>
 800f592:	b1b0      	cbz	r0, 800f5c2 <_vfiprintf_r+0x13a>
 800f594:	9207      	str	r2, [sp, #28]
 800f596:	e014      	b.n	800f5c2 <_vfiprintf_r+0x13a>
 800f598:	eba0 0308 	sub.w	r3, r0, r8
 800f59c:	fa09 f303 	lsl.w	r3, r9, r3
 800f5a0:	4313      	orrs	r3, r2
 800f5a2:	9304      	str	r3, [sp, #16]
 800f5a4:	46a2      	mov	sl, r4
 800f5a6:	e7d2      	b.n	800f54e <_vfiprintf_r+0xc6>
 800f5a8:	9b03      	ldr	r3, [sp, #12]
 800f5aa:	1d19      	adds	r1, r3, #4
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	9103      	str	r1, [sp, #12]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	bfbb      	ittet	lt
 800f5b4:	425b      	neglt	r3, r3
 800f5b6:	f042 0202 	orrlt.w	r2, r2, #2
 800f5ba:	9307      	strge	r3, [sp, #28]
 800f5bc:	9307      	strlt	r3, [sp, #28]
 800f5be:	bfb8      	it	lt
 800f5c0:	9204      	strlt	r2, [sp, #16]
 800f5c2:	7823      	ldrb	r3, [r4, #0]
 800f5c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f5c6:	d10a      	bne.n	800f5de <_vfiprintf_r+0x156>
 800f5c8:	7863      	ldrb	r3, [r4, #1]
 800f5ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5cc:	d132      	bne.n	800f634 <_vfiprintf_r+0x1ac>
 800f5ce:	9b03      	ldr	r3, [sp, #12]
 800f5d0:	1d1a      	adds	r2, r3, #4
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	9203      	str	r2, [sp, #12]
 800f5d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f5da:	3402      	adds	r4, #2
 800f5dc:	9305      	str	r3, [sp, #20]
 800f5de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f6b4 <_vfiprintf_r+0x22c>
 800f5e2:	7821      	ldrb	r1, [r4, #0]
 800f5e4:	2203      	movs	r2, #3
 800f5e6:	4650      	mov	r0, sl
 800f5e8:	f7f0 fdf2 	bl	80001d0 <memchr>
 800f5ec:	b138      	cbz	r0, 800f5fe <_vfiprintf_r+0x176>
 800f5ee:	9b04      	ldr	r3, [sp, #16]
 800f5f0:	eba0 000a 	sub.w	r0, r0, sl
 800f5f4:	2240      	movs	r2, #64	@ 0x40
 800f5f6:	4082      	lsls	r2, r0
 800f5f8:	4313      	orrs	r3, r2
 800f5fa:	3401      	adds	r4, #1
 800f5fc:	9304      	str	r3, [sp, #16]
 800f5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f602:	4829      	ldr	r0, [pc, #164]	@ (800f6a8 <_vfiprintf_r+0x220>)
 800f604:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f608:	2206      	movs	r2, #6
 800f60a:	f7f0 fde1 	bl	80001d0 <memchr>
 800f60e:	2800      	cmp	r0, #0
 800f610:	d03f      	beq.n	800f692 <_vfiprintf_r+0x20a>
 800f612:	4b26      	ldr	r3, [pc, #152]	@ (800f6ac <_vfiprintf_r+0x224>)
 800f614:	bb1b      	cbnz	r3, 800f65e <_vfiprintf_r+0x1d6>
 800f616:	9b03      	ldr	r3, [sp, #12]
 800f618:	3307      	adds	r3, #7
 800f61a:	f023 0307 	bic.w	r3, r3, #7
 800f61e:	3308      	adds	r3, #8
 800f620:	9303      	str	r3, [sp, #12]
 800f622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f624:	443b      	add	r3, r7
 800f626:	9309      	str	r3, [sp, #36]	@ 0x24
 800f628:	e76a      	b.n	800f500 <_vfiprintf_r+0x78>
 800f62a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f62e:	460c      	mov	r4, r1
 800f630:	2001      	movs	r0, #1
 800f632:	e7a8      	b.n	800f586 <_vfiprintf_r+0xfe>
 800f634:	2300      	movs	r3, #0
 800f636:	3401      	adds	r4, #1
 800f638:	9305      	str	r3, [sp, #20]
 800f63a:	4619      	mov	r1, r3
 800f63c:	f04f 0c0a 	mov.w	ip, #10
 800f640:	4620      	mov	r0, r4
 800f642:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f646:	3a30      	subs	r2, #48	@ 0x30
 800f648:	2a09      	cmp	r2, #9
 800f64a:	d903      	bls.n	800f654 <_vfiprintf_r+0x1cc>
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d0c6      	beq.n	800f5de <_vfiprintf_r+0x156>
 800f650:	9105      	str	r1, [sp, #20]
 800f652:	e7c4      	b.n	800f5de <_vfiprintf_r+0x156>
 800f654:	fb0c 2101 	mla	r1, ip, r1, r2
 800f658:	4604      	mov	r4, r0
 800f65a:	2301      	movs	r3, #1
 800f65c:	e7f0      	b.n	800f640 <_vfiprintf_r+0x1b8>
 800f65e:	ab03      	add	r3, sp, #12
 800f660:	9300      	str	r3, [sp, #0]
 800f662:	462a      	mov	r2, r5
 800f664:	4b12      	ldr	r3, [pc, #72]	@ (800f6b0 <_vfiprintf_r+0x228>)
 800f666:	a904      	add	r1, sp, #16
 800f668:	4630      	mov	r0, r6
 800f66a:	f7fc fa59 	bl	800bb20 <_printf_float>
 800f66e:	4607      	mov	r7, r0
 800f670:	1c78      	adds	r0, r7, #1
 800f672:	d1d6      	bne.n	800f622 <_vfiprintf_r+0x19a>
 800f674:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f676:	07d9      	lsls	r1, r3, #31
 800f678:	d405      	bmi.n	800f686 <_vfiprintf_r+0x1fe>
 800f67a:	89ab      	ldrh	r3, [r5, #12]
 800f67c:	059a      	lsls	r2, r3, #22
 800f67e:	d402      	bmi.n	800f686 <_vfiprintf_r+0x1fe>
 800f680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f682:	f7fd faf5 	bl	800cc70 <__retarget_lock_release_recursive>
 800f686:	89ab      	ldrh	r3, [r5, #12]
 800f688:	065b      	lsls	r3, r3, #25
 800f68a:	f53f af1f 	bmi.w	800f4cc <_vfiprintf_r+0x44>
 800f68e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f690:	e71e      	b.n	800f4d0 <_vfiprintf_r+0x48>
 800f692:	ab03      	add	r3, sp, #12
 800f694:	9300      	str	r3, [sp, #0]
 800f696:	462a      	mov	r2, r5
 800f698:	4b05      	ldr	r3, [pc, #20]	@ (800f6b0 <_vfiprintf_r+0x228>)
 800f69a:	a904      	add	r1, sp, #16
 800f69c:	4630      	mov	r0, r6
 800f69e:	f7fc fcd7 	bl	800c050 <_printf_i>
 800f6a2:	e7e4      	b.n	800f66e <_vfiprintf_r+0x1e6>
 800f6a4:	08010a59 	.word	0x08010a59
 800f6a8:	08010a63 	.word	0x08010a63
 800f6ac:	0800bb21 	.word	0x0800bb21
 800f6b0:	0800f463 	.word	0x0800f463
 800f6b4:	08010a5f 	.word	0x08010a5f

0800f6b8 <__sflush_r>:
 800f6b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c0:	0716      	lsls	r6, r2, #28
 800f6c2:	4605      	mov	r5, r0
 800f6c4:	460c      	mov	r4, r1
 800f6c6:	d454      	bmi.n	800f772 <__sflush_r+0xba>
 800f6c8:	684b      	ldr	r3, [r1, #4]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	dc02      	bgt.n	800f6d4 <__sflush_r+0x1c>
 800f6ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	dd48      	ble.n	800f766 <__sflush_r+0xae>
 800f6d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f6d6:	2e00      	cmp	r6, #0
 800f6d8:	d045      	beq.n	800f766 <__sflush_r+0xae>
 800f6da:	2300      	movs	r3, #0
 800f6dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f6e0:	682f      	ldr	r7, [r5, #0]
 800f6e2:	6a21      	ldr	r1, [r4, #32]
 800f6e4:	602b      	str	r3, [r5, #0]
 800f6e6:	d030      	beq.n	800f74a <__sflush_r+0x92>
 800f6e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f6ea:	89a3      	ldrh	r3, [r4, #12]
 800f6ec:	0759      	lsls	r1, r3, #29
 800f6ee:	d505      	bpl.n	800f6fc <__sflush_r+0x44>
 800f6f0:	6863      	ldr	r3, [r4, #4]
 800f6f2:	1ad2      	subs	r2, r2, r3
 800f6f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f6f6:	b10b      	cbz	r3, 800f6fc <__sflush_r+0x44>
 800f6f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f6fa:	1ad2      	subs	r2, r2, r3
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f700:	6a21      	ldr	r1, [r4, #32]
 800f702:	4628      	mov	r0, r5
 800f704:	47b0      	blx	r6
 800f706:	1c43      	adds	r3, r0, #1
 800f708:	89a3      	ldrh	r3, [r4, #12]
 800f70a:	d106      	bne.n	800f71a <__sflush_r+0x62>
 800f70c:	6829      	ldr	r1, [r5, #0]
 800f70e:	291d      	cmp	r1, #29
 800f710:	d82b      	bhi.n	800f76a <__sflush_r+0xb2>
 800f712:	4a2a      	ldr	r2, [pc, #168]	@ (800f7bc <__sflush_r+0x104>)
 800f714:	410a      	asrs	r2, r1
 800f716:	07d6      	lsls	r6, r2, #31
 800f718:	d427      	bmi.n	800f76a <__sflush_r+0xb2>
 800f71a:	2200      	movs	r2, #0
 800f71c:	6062      	str	r2, [r4, #4]
 800f71e:	04d9      	lsls	r1, r3, #19
 800f720:	6922      	ldr	r2, [r4, #16]
 800f722:	6022      	str	r2, [r4, #0]
 800f724:	d504      	bpl.n	800f730 <__sflush_r+0x78>
 800f726:	1c42      	adds	r2, r0, #1
 800f728:	d101      	bne.n	800f72e <__sflush_r+0x76>
 800f72a:	682b      	ldr	r3, [r5, #0]
 800f72c:	b903      	cbnz	r3, 800f730 <__sflush_r+0x78>
 800f72e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f730:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f732:	602f      	str	r7, [r5, #0]
 800f734:	b1b9      	cbz	r1, 800f766 <__sflush_r+0xae>
 800f736:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f73a:	4299      	cmp	r1, r3
 800f73c:	d002      	beq.n	800f744 <__sflush_r+0x8c>
 800f73e:	4628      	mov	r0, r5
 800f740:	f7fe f8ea 	bl	800d918 <_free_r>
 800f744:	2300      	movs	r3, #0
 800f746:	6363      	str	r3, [r4, #52]	@ 0x34
 800f748:	e00d      	b.n	800f766 <__sflush_r+0xae>
 800f74a:	2301      	movs	r3, #1
 800f74c:	4628      	mov	r0, r5
 800f74e:	47b0      	blx	r6
 800f750:	4602      	mov	r2, r0
 800f752:	1c50      	adds	r0, r2, #1
 800f754:	d1c9      	bne.n	800f6ea <__sflush_r+0x32>
 800f756:	682b      	ldr	r3, [r5, #0]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d0c6      	beq.n	800f6ea <__sflush_r+0x32>
 800f75c:	2b1d      	cmp	r3, #29
 800f75e:	d001      	beq.n	800f764 <__sflush_r+0xac>
 800f760:	2b16      	cmp	r3, #22
 800f762:	d11e      	bne.n	800f7a2 <__sflush_r+0xea>
 800f764:	602f      	str	r7, [r5, #0]
 800f766:	2000      	movs	r0, #0
 800f768:	e022      	b.n	800f7b0 <__sflush_r+0xf8>
 800f76a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f76e:	b21b      	sxth	r3, r3
 800f770:	e01b      	b.n	800f7aa <__sflush_r+0xf2>
 800f772:	690f      	ldr	r7, [r1, #16]
 800f774:	2f00      	cmp	r7, #0
 800f776:	d0f6      	beq.n	800f766 <__sflush_r+0xae>
 800f778:	0793      	lsls	r3, r2, #30
 800f77a:	680e      	ldr	r6, [r1, #0]
 800f77c:	bf08      	it	eq
 800f77e:	694b      	ldreq	r3, [r1, #20]
 800f780:	600f      	str	r7, [r1, #0]
 800f782:	bf18      	it	ne
 800f784:	2300      	movne	r3, #0
 800f786:	eba6 0807 	sub.w	r8, r6, r7
 800f78a:	608b      	str	r3, [r1, #8]
 800f78c:	f1b8 0f00 	cmp.w	r8, #0
 800f790:	dde9      	ble.n	800f766 <__sflush_r+0xae>
 800f792:	6a21      	ldr	r1, [r4, #32]
 800f794:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f796:	4643      	mov	r3, r8
 800f798:	463a      	mov	r2, r7
 800f79a:	4628      	mov	r0, r5
 800f79c:	47b0      	blx	r6
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	dc08      	bgt.n	800f7b4 <__sflush_r+0xfc>
 800f7a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7aa:	81a3      	strh	r3, [r4, #12]
 800f7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7b4:	4407      	add	r7, r0
 800f7b6:	eba8 0800 	sub.w	r8, r8, r0
 800f7ba:	e7e7      	b.n	800f78c <__sflush_r+0xd4>
 800f7bc:	dfbffffe 	.word	0xdfbffffe

0800f7c0 <_fflush_r>:
 800f7c0:	b538      	push	{r3, r4, r5, lr}
 800f7c2:	690b      	ldr	r3, [r1, #16]
 800f7c4:	4605      	mov	r5, r0
 800f7c6:	460c      	mov	r4, r1
 800f7c8:	b913      	cbnz	r3, 800f7d0 <_fflush_r+0x10>
 800f7ca:	2500      	movs	r5, #0
 800f7cc:	4628      	mov	r0, r5
 800f7ce:	bd38      	pop	{r3, r4, r5, pc}
 800f7d0:	b118      	cbz	r0, 800f7da <_fflush_r+0x1a>
 800f7d2:	6a03      	ldr	r3, [r0, #32]
 800f7d4:	b90b      	cbnz	r3, 800f7da <_fflush_r+0x1a>
 800f7d6:	f7fc fffb 	bl	800c7d0 <__sinit>
 800f7da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d0f3      	beq.n	800f7ca <_fflush_r+0xa>
 800f7e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f7e4:	07d0      	lsls	r0, r2, #31
 800f7e6:	d404      	bmi.n	800f7f2 <_fflush_r+0x32>
 800f7e8:	0599      	lsls	r1, r3, #22
 800f7ea:	d402      	bmi.n	800f7f2 <_fflush_r+0x32>
 800f7ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7ee:	f7fd fa3e 	bl	800cc6e <__retarget_lock_acquire_recursive>
 800f7f2:	4628      	mov	r0, r5
 800f7f4:	4621      	mov	r1, r4
 800f7f6:	f7ff ff5f 	bl	800f6b8 <__sflush_r>
 800f7fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f7fc:	07da      	lsls	r2, r3, #31
 800f7fe:	4605      	mov	r5, r0
 800f800:	d4e4      	bmi.n	800f7cc <_fflush_r+0xc>
 800f802:	89a3      	ldrh	r3, [r4, #12]
 800f804:	059b      	lsls	r3, r3, #22
 800f806:	d4e1      	bmi.n	800f7cc <_fflush_r+0xc>
 800f808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f80a:	f7fd fa31 	bl	800cc70 <__retarget_lock_release_recursive>
 800f80e:	e7dd      	b.n	800f7cc <_fflush_r+0xc>

0800f810 <__swhatbuf_r>:
 800f810:	b570      	push	{r4, r5, r6, lr}
 800f812:	460c      	mov	r4, r1
 800f814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f818:	2900      	cmp	r1, #0
 800f81a:	b096      	sub	sp, #88	@ 0x58
 800f81c:	4615      	mov	r5, r2
 800f81e:	461e      	mov	r6, r3
 800f820:	da0d      	bge.n	800f83e <__swhatbuf_r+0x2e>
 800f822:	89a3      	ldrh	r3, [r4, #12]
 800f824:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f828:	f04f 0100 	mov.w	r1, #0
 800f82c:	bf14      	ite	ne
 800f82e:	2340      	movne	r3, #64	@ 0x40
 800f830:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f834:	2000      	movs	r0, #0
 800f836:	6031      	str	r1, [r6, #0]
 800f838:	602b      	str	r3, [r5, #0]
 800f83a:	b016      	add	sp, #88	@ 0x58
 800f83c:	bd70      	pop	{r4, r5, r6, pc}
 800f83e:	466a      	mov	r2, sp
 800f840:	f000 f874 	bl	800f92c <_fstat_r>
 800f844:	2800      	cmp	r0, #0
 800f846:	dbec      	blt.n	800f822 <__swhatbuf_r+0x12>
 800f848:	9901      	ldr	r1, [sp, #4]
 800f84a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f84e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f852:	4259      	negs	r1, r3
 800f854:	4159      	adcs	r1, r3
 800f856:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f85a:	e7eb      	b.n	800f834 <__swhatbuf_r+0x24>

0800f85c <__smakebuf_r>:
 800f85c:	898b      	ldrh	r3, [r1, #12]
 800f85e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f860:	079d      	lsls	r5, r3, #30
 800f862:	4606      	mov	r6, r0
 800f864:	460c      	mov	r4, r1
 800f866:	d507      	bpl.n	800f878 <__smakebuf_r+0x1c>
 800f868:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f86c:	6023      	str	r3, [r4, #0]
 800f86e:	6123      	str	r3, [r4, #16]
 800f870:	2301      	movs	r3, #1
 800f872:	6163      	str	r3, [r4, #20]
 800f874:	b003      	add	sp, #12
 800f876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f878:	ab01      	add	r3, sp, #4
 800f87a:	466a      	mov	r2, sp
 800f87c:	f7ff ffc8 	bl	800f810 <__swhatbuf_r>
 800f880:	9f00      	ldr	r7, [sp, #0]
 800f882:	4605      	mov	r5, r0
 800f884:	4639      	mov	r1, r7
 800f886:	4630      	mov	r0, r6
 800f888:	f7fe f8ba 	bl	800da00 <_malloc_r>
 800f88c:	b948      	cbnz	r0, 800f8a2 <__smakebuf_r+0x46>
 800f88e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f892:	059a      	lsls	r2, r3, #22
 800f894:	d4ee      	bmi.n	800f874 <__smakebuf_r+0x18>
 800f896:	f023 0303 	bic.w	r3, r3, #3
 800f89a:	f043 0302 	orr.w	r3, r3, #2
 800f89e:	81a3      	strh	r3, [r4, #12]
 800f8a0:	e7e2      	b.n	800f868 <__smakebuf_r+0xc>
 800f8a2:	89a3      	ldrh	r3, [r4, #12]
 800f8a4:	6020      	str	r0, [r4, #0]
 800f8a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8aa:	81a3      	strh	r3, [r4, #12]
 800f8ac:	9b01      	ldr	r3, [sp, #4]
 800f8ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f8b2:	b15b      	cbz	r3, 800f8cc <__smakebuf_r+0x70>
 800f8b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8b8:	4630      	mov	r0, r6
 800f8ba:	f000 f849 	bl	800f950 <_isatty_r>
 800f8be:	b128      	cbz	r0, 800f8cc <__smakebuf_r+0x70>
 800f8c0:	89a3      	ldrh	r3, [r4, #12]
 800f8c2:	f023 0303 	bic.w	r3, r3, #3
 800f8c6:	f043 0301 	orr.w	r3, r3, #1
 800f8ca:	81a3      	strh	r3, [r4, #12]
 800f8cc:	89a3      	ldrh	r3, [r4, #12]
 800f8ce:	431d      	orrs	r5, r3
 800f8d0:	81a5      	strh	r5, [r4, #12]
 800f8d2:	e7cf      	b.n	800f874 <__smakebuf_r+0x18>

0800f8d4 <memmove>:
 800f8d4:	4288      	cmp	r0, r1
 800f8d6:	b510      	push	{r4, lr}
 800f8d8:	eb01 0402 	add.w	r4, r1, r2
 800f8dc:	d902      	bls.n	800f8e4 <memmove+0x10>
 800f8de:	4284      	cmp	r4, r0
 800f8e0:	4623      	mov	r3, r4
 800f8e2:	d807      	bhi.n	800f8f4 <memmove+0x20>
 800f8e4:	1e43      	subs	r3, r0, #1
 800f8e6:	42a1      	cmp	r1, r4
 800f8e8:	d008      	beq.n	800f8fc <memmove+0x28>
 800f8ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f8ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f8f2:	e7f8      	b.n	800f8e6 <memmove+0x12>
 800f8f4:	4402      	add	r2, r0
 800f8f6:	4601      	mov	r1, r0
 800f8f8:	428a      	cmp	r2, r1
 800f8fa:	d100      	bne.n	800f8fe <memmove+0x2a>
 800f8fc:	bd10      	pop	{r4, pc}
 800f8fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f906:	e7f7      	b.n	800f8f8 <memmove+0x24>

0800f908 <strncmp>:
 800f908:	b510      	push	{r4, lr}
 800f90a:	b16a      	cbz	r2, 800f928 <strncmp+0x20>
 800f90c:	3901      	subs	r1, #1
 800f90e:	1884      	adds	r4, r0, r2
 800f910:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f914:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f918:	429a      	cmp	r2, r3
 800f91a:	d103      	bne.n	800f924 <strncmp+0x1c>
 800f91c:	42a0      	cmp	r0, r4
 800f91e:	d001      	beq.n	800f924 <strncmp+0x1c>
 800f920:	2a00      	cmp	r2, #0
 800f922:	d1f5      	bne.n	800f910 <strncmp+0x8>
 800f924:	1ad0      	subs	r0, r2, r3
 800f926:	bd10      	pop	{r4, pc}
 800f928:	4610      	mov	r0, r2
 800f92a:	e7fc      	b.n	800f926 <strncmp+0x1e>

0800f92c <_fstat_r>:
 800f92c:	b538      	push	{r3, r4, r5, lr}
 800f92e:	4d07      	ldr	r5, [pc, #28]	@ (800f94c <_fstat_r+0x20>)
 800f930:	2300      	movs	r3, #0
 800f932:	4604      	mov	r4, r0
 800f934:	4608      	mov	r0, r1
 800f936:	4611      	mov	r1, r2
 800f938:	602b      	str	r3, [r5, #0]
 800f93a:	f7f3 f8d5 	bl	8002ae8 <_fstat>
 800f93e:	1c43      	adds	r3, r0, #1
 800f940:	d102      	bne.n	800f948 <_fstat_r+0x1c>
 800f942:	682b      	ldr	r3, [r5, #0]
 800f944:	b103      	cbz	r3, 800f948 <_fstat_r+0x1c>
 800f946:	6023      	str	r3, [r4, #0]
 800f948:	bd38      	pop	{r3, r4, r5, pc}
 800f94a:	bf00      	nop
 800f94c:	20000774 	.word	0x20000774

0800f950 <_isatty_r>:
 800f950:	b538      	push	{r3, r4, r5, lr}
 800f952:	4d06      	ldr	r5, [pc, #24]	@ (800f96c <_isatty_r+0x1c>)
 800f954:	2300      	movs	r3, #0
 800f956:	4604      	mov	r4, r0
 800f958:	4608      	mov	r0, r1
 800f95a:	602b      	str	r3, [r5, #0]
 800f95c:	f7f3 f8d4 	bl	8002b08 <_isatty>
 800f960:	1c43      	adds	r3, r0, #1
 800f962:	d102      	bne.n	800f96a <_isatty_r+0x1a>
 800f964:	682b      	ldr	r3, [r5, #0]
 800f966:	b103      	cbz	r3, 800f96a <_isatty_r+0x1a>
 800f968:	6023      	str	r3, [r4, #0]
 800f96a:	bd38      	pop	{r3, r4, r5, pc}
 800f96c:	20000774 	.word	0x20000774

0800f970 <_sbrk_r>:
 800f970:	b538      	push	{r3, r4, r5, lr}
 800f972:	4d06      	ldr	r5, [pc, #24]	@ (800f98c <_sbrk_r+0x1c>)
 800f974:	2300      	movs	r3, #0
 800f976:	4604      	mov	r4, r0
 800f978:	4608      	mov	r0, r1
 800f97a:	602b      	str	r3, [r5, #0]
 800f97c:	f7f3 f8dc 	bl	8002b38 <_sbrk>
 800f980:	1c43      	adds	r3, r0, #1
 800f982:	d102      	bne.n	800f98a <_sbrk_r+0x1a>
 800f984:	682b      	ldr	r3, [r5, #0]
 800f986:	b103      	cbz	r3, 800f98a <_sbrk_r+0x1a>
 800f988:	6023      	str	r3, [r4, #0]
 800f98a:	bd38      	pop	{r3, r4, r5, pc}
 800f98c:	20000774 	.word	0x20000774

0800f990 <memcpy>:
 800f990:	440a      	add	r2, r1
 800f992:	4291      	cmp	r1, r2
 800f994:	f100 33ff 	add.w	r3, r0, #4294967295
 800f998:	d100      	bne.n	800f99c <memcpy+0xc>
 800f99a:	4770      	bx	lr
 800f99c:	b510      	push	{r4, lr}
 800f99e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9a6:	4291      	cmp	r1, r2
 800f9a8:	d1f9      	bne.n	800f99e <memcpy+0xe>
 800f9aa:	bd10      	pop	{r4, pc}
 800f9ac:	0000      	movs	r0, r0
	...

0800f9b0 <nan>:
 800f9b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f9b8 <nan+0x8>
 800f9b4:	4770      	bx	lr
 800f9b6:	bf00      	nop
 800f9b8:	00000000 	.word	0x00000000
 800f9bc:	7ff80000 	.word	0x7ff80000

0800f9c0 <__assert_func>:
 800f9c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f9c2:	4614      	mov	r4, r2
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	4b09      	ldr	r3, [pc, #36]	@ (800f9ec <__assert_func+0x2c>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	4605      	mov	r5, r0
 800f9cc:	68d8      	ldr	r0, [r3, #12]
 800f9ce:	b954      	cbnz	r4, 800f9e6 <__assert_func+0x26>
 800f9d0:	4b07      	ldr	r3, [pc, #28]	@ (800f9f0 <__assert_func+0x30>)
 800f9d2:	461c      	mov	r4, r3
 800f9d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f9d8:	9100      	str	r1, [sp, #0]
 800f9da:	462b      	mov	r3, r5
 800f9dc:	4905      	ldr	r1, [pc, #20]	@ (800f9f4 <__assert_func+0x34>)
 800f9de:	f000 fba7 	bl	8010130 <fiprintf>
 800f9e2:	f000 fbb7 	bl	8010154 <abort>
 800f9e6:	4b04      	ldr	r3, [pc, #16]	@ (800f9f8 <__assert_func+0x38>)
 800f9e8:	e7f4      	b.n	800f9d4 <__assert_func+0x14>
 800f9ea:	bf00      	nop
 800f9ec:	20000018 	.word	0x20000018
 800f9f0:	08010aad 	.word	0x08010aad
 800f9f4:	08010a7f 	.word	0x08010a7f
 800f9f8:	08010a72 	.word	0x08010a72

0800f9fc <_calloc_r>:
 800f9fc:	b570      	push	{r4, r5, r6, lr}
 800f9fe:	fba1 5402 	umull	r5, r4, r1, r2
 800fa02:	b93c      	cbnz	r4, 800fa14 <_calloc_r+0x18>
 800fa04:	4629      	mov	r1, r5
 800fa06:	f7fd fffb 	bl	800da00 <_malloc_r>
 800fa0a:	4606      	mov	r6, r0
 800fa0c:	b928      	cbnz	r0, 800fa1a <_calloc_r+0x1e>
 800fa0e:	2600      	movs	r6, #0
 800fa10:	4630      	mov	r0, r6
 800fa12:	bd70      	pop	{r4, r5, r6, pc}
 800fa14:	220c      	movs	r2, #12
 800fa16:	6002      	str	r2, [r0, #0]
 800fa18:	e7f9      	b.n	800fa0e <_calloc_r+0x12>
 800fa1a:	462a      	mov	r2, r5
 800fa1c:	4621      	mov	r1, r4
 800fa1e:	f7fd f8a9 	bl	800cb74 <memset>
 800fa22:	e7f5      	b.n	800fa10 <_calloc_r+0x14>

0800fa24 <rshift>:
 800fa24:	6903      	ldr	r3, [r0, #16]
 800fa26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fa2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fa32:	f100 0414 	add.w	r4, r0, #20
 800fa36:	dd45      	ble.n	800fac4 <rshift+0xa0>
 800fa38:	f011 011f 	ands.w	r1, r1, #31
 800fa3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fa40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fa44:	d10c      	bne.n	800fa60 <rshift+0x3c>
 800fa46:	f100 0710 	add.w	r7, r0, #16
 800fa4a:	4629      	mov	r1, r5
 800fa4c:	42b1      	cmp	r1, r6
 800fa4e:	d334      	bcc.n	800faba <rshift+0x96>
 800fa50:	1a9b      	subs	r3, r3, r2
 800fa52:	009b      	lsls	r3, r3, #2
 800fa54:	1eea      	subs	r2, r5, #3
 800fa56:	4296      	cmp	r6, r2
 800fa58:	bf38      	it	cc
 800fa5a:	2300      	movcc	r3, #0
 800fa5c:	4423      	add	r3, r4
 800fa5e:	e015      	b.n	800fa8c <rshift+0x68>
 800fa60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fa64:	f1c1 0820 	rsb	r8, r1, #32
 800fa68:	40cf      	lsrs	r7, r1
 800fa6a:	f105 0e04 	add.w	lr, r5, #4
 800fa6e:	46a1      	mov	r9, r4
 800fa70:	4576      	cmp	r6, lr
 800fa72:	46f4      	mov	ip, lr
 800fa74:	d815      	bhi.n	800faa2 <rshift+0x7e>
 800fa76:	1a9a      	subs	r2, r3, r2
 800fa78:	0092      	lsls	r2, r2, #2
 800fa7a:	3a04      	subs	r2, #4
 800fa7c:	3501      	adds	r5, #1
 800fa7e:	42ae      	cmp	r6, r5
 800fa80:	bf38      	it	cc
 800fa82:	2200      	movcc	r2, #0
 800fa84:	18a3      	adds	r3, r4, r2
 800fa86:	50a7      	str	r7, [r4, r2]
 800fa88:	b107      	cbz	r7, 800fa8c <rshift+0x68>
 800fa8a:	3304      	adds	r3, #4
 800fa8c:	1b1a      	subs	r2, r3, r4
 800fa8e:	42a3      	cmp	r3, r4
 800fa90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fa94:	bf08      	it	eq
 800fa96:	2300      	moveq	r3, #0
 800fa98:	6102      	str	r2, [r0, #16]
 800fa9a:	bf08      	it	eq
 800fa9c:	6143      	streq	r3, [r0, #20]
 800fa9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faa2:	f8dc c000 	ldr.w	ip, [ip]
 800faa6:	fa0c fc08 	lsl.w	ip, ip, r8
 800faaa:	ea4c 0707 	orr.w	r7, ip, r7
 800faae:	f849 7b04 	str.w	r7, [r9], #4
 800fab2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fab6:	40cf      	lsrs	r7, r1
 800fab8:	e7da      	b.n	800fa70 <rshift+0x4c>
 800faba:	f851 cb04 	ldr.w	ip, [r1], #4
 800fabe:	f847 cf04 	str.w	ip, [r7, #4]!
 800fac2:	e7c3      	b.n	800fa4c <rshift+0x28>
 800fac4:	4623      	mov	r3, r4
 800fac6:	e7e1      	b.n	800fa8c <rshift+0x68>

0800fac8 <__hexdig_fun>:
 800fac8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800facc:	2b09      	cmp	r3, #9
 800face:	d802      	bhi.n	800fad6 <__hexdig_fun+0xe>
 800fad0:	3820      	subs	r0, #32
 800fad2:	b2c0      	uxtb	r0, r0
 800fad4:	4770      	bx	lr
 800fad6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fada:	2b05      	cmp	r3, #5
 800fadc:	d801      	bhi.n	800fae2 <__hexdig_fun+0x1a>
 800fade:	3847      	subs	r0, #71	@ 0x47
 800fae0:	e7f7      	b.n	800fad2 <__hexdig_fun+0xa>
 800fae2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fae6:	2b05      	cmp	r3, #5
 800fae8:	d801      	bhi.n	800faee <__hexdig_fun+0x26>
 800faea:	3827      	subs	r0, #39	@ 0x27
 800faec:	e7f1      	b.n	800fad2 <__hexdig_fun+0xa>
 800faee:	2000      	movs	r0, #0
 800faf0:	4770      	bx	lr
	...

0800faf4 <__gethex>:
 800faf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faf8:	b085      	sub	sp, #20
 800fafa:	468a      	mov	sl, r1
 800fafc:	9302      	str	r3, [sp, #8]
 800fafe:	680b      	ldr	r3, [r1, #0]
 800fb00:	9001      	str	r0, [sp, #4]
 800fb02:	4690      	mov	r8, r2
 800fb04:	1c9c      	adds	r4, r3, #2
 800fb06:	46a1      	mov	r9, r4
 800fb08:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fb0c:	2830      	cmp	r0, #48	@ 0x30
 800fb0e:	d0fa      	beq.n	800fb06 <__gethex+0x12>
 800fb10:	eba9 0303 	sub.w	r3, r9, r3
 800fb14:	f1a3 0b02 	sub.w	fp, r3, #2
 800fb18:	f7ff ffd6 	bl	800fac8 <__hexdig_fun>
 800fb1c:	4605      	mov	r5, r0
 800fb1e:	2800      	cmp	r0, #0
 800fb20:	d168      	bne.n	800fbf4 <__gethex+0x100>
 800fb22:	49a0      	ldr	r1, [pc, #640]	@ (800fda4 <__gethex+0x2b0>)
 800fb24:	2201      	movs	r2, #1
 800fb26:	4648      	mov	r0, r9
 800fb28:	f7ff feee 	bl	800f908 <strncmp>
 800fb2c:	4607      	mov	r7, r0
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	d167      	bne.n	800fc02 <__gethex+0x10e>
 800fb32:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fb36:	4626      	mov	r6, r4
 800fb38:	f7ff ffc6 	bl	800fac8 <__hexdig_fun>
 800fb3c:	2800      	cmp	r0, #0
 800fb3e:	d062      	beq.n	800fc06 <__gethex+0x112>
 800fb40:	4623      	mov	r3, r4
 800fb42:	7818      	ldrb	r0, [r3, #0]
 800fb44:	2830      	cmp	r0, #48	@ 0x30
 800fb46:	4699      	mov	r9, r3
 800fb48:	f103 0301 	add.w	r3, r3, #1
 800fb4c:	d0f9      	beq.n	800fb42 <__gethex+0x4e>
 800fb4e:	f7ff ffbb 	bl	800fac8 <__hexdig_fun>
 800fb52:	fab0 f580 	clz	r5, r0
 800fb56:	096d      	lsrs	r5, r5, #5
 800fb58:	f04f 0b01 	mov.w	fp, #1
 800fb5c:	464a      	mov	r2, r9
 800fb5e:	4616      	mov	r6, r2
 800fb60:	3201      	adds	r2, #1
 800fb62:	7830      	ldrb	r0, [r6, #0]
 800fb64:	f7ff ffb0 	bl	800fac8 <__hexdig_fun>
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	d1f8      	bne.n	800fb5e <__gethex+0x6a>
 800fb6c:	498d      	ldr	r1, [pc, #564]	@ (800fda4 <__gethex+0x2b0>)
 800fb6e:	2201      	movs	r2, #1
 800fb70:	4630      	mov	r0, r6
 800fb72:	f7ff fec9 	bl	800f908 <strncmp>
 800fb76:	2800      	cmp	r0, #0
 800fb78:	d13f      	bne.n	800fbfa <__gethex+0x106>
 800fb7a:	b944      	cbnz	r4, 800fb8e <__gethex+0x9a>
 800fb7c:	1c74      	adds	r4, r6, #1
 800fb7e:	4622      	mov	r2, r4
 800fb80:	4616      	mov	r6, r2
 800fb82:	3201      	adds	r2, #1
 800fb84:	7830      	ldrb	r0, [r6, #0]
 800fb86:	f7ff ff9f 	bl	800fac8 <__hexdig_fun>
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d1f8      	bne.n	800fb80 <__gethex+0x8c>
 800fb8e:	1ba4      	subs	r4, r4, r6
 800fb90:	00a7      	lsls	r7, r4, #2
 800fb92:	7833      	ldrb	r3, [r6, #0]
 800fb94:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fb98:	2b50      	cmp	r3, #80	@ 0x50
 800fb9a:	d13e      	bne.n	800fc1a <__gethex+0x126>
 800fb9c:	7873      	ldrb	r3, [r6, #1]
 800fb9e:	2b2b      	cmp	r3, #43	@ 0x2b
 800fba0:	d033      	beq.n	800fc0a <__gethex+0x116>
 800fba2:	2b2d      	cmp	r3, #45	@ 0x2d
 800fba4:	d034      	beq.n	800fc10 <__gethex+0x11c>
 800fba6:	1c71      	adds	r1, r6, #1
 800fba8:	2400      	movs	r4, #0
 800fbaa:	7808      	ldrb	r0, [r1, #0]
 800fbac:	f7ff ff8c 	bl	800fac8 <__hexdig_fun>
 800fbb0:	1e43      	subs	r3, r0, #1
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	2b18      	cmp	r3, #24
 800fbb6:	d830      	bhi.n	800fc1a <__gethex+0x126>
 800fbb8:	f1a0 0210 	sub.w	r2, r0, #16
 800fbbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fbc0:	f7ff ff82 	bl	800fac8 <__hexdig_fun>
 800fbc4:	f100 3cff 	add.w	ip, r0, #4294967295
 800fbc8:	fa5f fc8c 	uxtb.w	ip, ip
 800fbcc:	f1bc 0f18 	cmp.w	ip, #24
 800fbd0:	f04f 030a 	mov.w	r3, #10
 800fbd4:	d91e      	bls.n	800fc14 <__gethex+0x120>
 800fbd6:	b104      	cbz	r4, 800fbda <__gethex+0xe6>
 800fbd8:	4252      	negs	r2, r2
 800fbda:	4417      	add	r7, r2
 800fbdc:	f8ca 1000 	str.w	r1, [sl]
 800fbe0:	b1ed      	cbz	r5, 800fc1e <__gethex+0x12a>
 800fbe2:	f1bb 0f00 	cmp.w	fp, #0
 800fbe6:	bf0c      	ite	eq
 800fbe8:	2506      	moveq	r5, #6
 800fbea:	2500      	movne	r5, #0
 800fbec:	4628      	mov	r0, r5
 800fbee:	b005      	add	sp, #20
 800fbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbf4:	2500      	movs	r5, #0
 800fbf6:	462c      	mov	r4, r5
 800fbf8:	e7b0      	b.n	800fb5c <__gethex+0x68>
 800fbfa:	2c00      	cmp	r4, #0
 800fbfc:	d1c7      	bne.n	800fb8e <__gethex+0x9a>
 800fbfe:	4627      	mov	r7, r4
 800fc00:	e7c7      	b.n	800fb92 <__gethex+0x9e>
 800fc02:	464e      	mov	r6, r9
 800fc04:	462f      	mov	r7, r5
 800fc06:	2501      	movs	r5, #1
 800fc08:	e7c3      	b.n	800fb92 <__gethex+0x9e>
 800fc0a:	2400      	movs	r4, #0
 800fc0c:	1cb1      	adds	r1, r6, #2
 800fc0e:	e7cc      	b.n	800fbaa <__gethex+0xb6>
 800fc10:	2401      	movs	r4, #1
 800fc12:	e7fb      	b.n	800fc0c <__gethex+0x118>
 800fc14:	fb03 0002 	mla	r0, r3, r2, r0
 800fc18:	e7ce      	b.n	800fbb8 <__gethex+0xc4>
 800fc1a:	4631      	mov	r1, r6
 800fc1c:	e7de      	b.n	800fbdc <__gethex+0xe8>
 800fc1e:	eba6 0309 	sub.w	r3, r6, r9
 800fc22:	3b01      	subs	r3, #1
 800fc24:	4629      	mov	r1, r5
 800fc26:	2b07      	cmp	r3, #7
 800fc28:	dc0a      	bgt.n	800fc40 <__gethex+0x14c>
 800fc2a:	9801      	ldr	r0, [sp, #4]
 800fc2c:	f7fd ff74 	bl	800db18 <_Balloc>
 800fc30:	4604      	mov	r4, r0
 800fc32:	b940      	cbnz	r0, 800fc46 <__gethex+0x152>
 800fc34:	4b5c      	ldr	r3, [pc, #368]	@ (800fda8 <__gethex+0x2b4>)
 800fc36:	4602      	mov	r2, r0
 800fc38:	21e4      	movs	r1, #228	@ 0xe4
 800fc3a:	485c      	ldr	r0, [pc, #368]	@ (800fdac <__gethex+0x2b8>)
 800fc3c:	f7ff fec0 	bl	800f9c0 <__assert_func>
 800fc40:	3101      	adds	r1, #1
 800fc42:	105b      	asrs	r3, r3, #1
 800fc44:	e7ef      	b.n	800fc26 <__gethex+0x132>
 800fc46:	f100 0a14 	add.w	sl, r0, #20
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	4655      	mov	r5, sl
 800fc4e:	469b      	mov	fp, r3
 800fc50:	45b1      	cmp	r9, r6
 800fc52:	d337      	bcc.n	800fcc4 <__gethex+0x1d0>
 800fc54:	f845 bb04 	str.w	fp, [r5], #4
 800fc58:	eba5 050a 	sub.w	r5, r5, sl
 800fc5c:	10ad      	asrs	r5, r5, #2
 800fc5e:	6125      	str	r5, [r4, #16]
 800fc60:	4658      	mov	r0, fp
 800fc62:	f7fe f84b 	bl	800dcfc <__hi0bits>
 800fc66:	016d      	lsls	r5, r5, #5
 800fc68:	f8d8 6000 	ldr.w	r6, [r8]
 800fc6c:	1a2d      	subs	r5, r5, r0
 800fc6e:	42b5      	cmp	r5, r6
 800fc70:	dd54      	ble.n	800fd1c <__gethex+0x228>
 800fc72:	1bad      	subs	r5, r5, r6
 800fc74:	4629      	mov	r1, r5
 800fc76:	4620      	mov	r0, r4
 800fc78:	f7fe fbdf 	bl	800e43a <__any_on>
 800fc7c:	4681      	mov	r9, r0
 800fc7e:	b178      	cbz	r0, 800fca0 <__gethex+0x1ac>
 800fc80:	1e6b      	subs	r3, r5, #1
 800fc82:	1159      	asrs	r1, r3, #5
 800fc84:	f003 021f 	and.w	r2, r3, #31
 800fc88:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fc8c:	f04f 0901 	mov.w	r9, #1
 800fc90:	fa09 f202 	lsl.w	r2, r9, r2
 800fc94:	420a      	tst	r2, r1
 800fc96:	d003      	beq.n	800fca0 <__gethex+0x1ac>
 800fc98:	454b      	cmp	r3, r9
 800fc9a:	dc36      	bgt.n	800fd0a <__gethex+0x216>
 800fc9c:	f04f 0902 	mov.w	r9, #2
 800fca0:	4629      	mov	r1, r5
 800fca2:	4620      	mov	r0, r4
 800fca4:	f7ff febe 	bl	800fa24 <rshift>
 800fca8:	442f      	add	r7, r5
 800fcaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fcae:	42bb      	cmp	r3, r7
 800fcb0:	da42      	bge.n	800fd38 <__gethex+0x244>
 800fcb2:	9801      	ldr	r0, [sp, #4]
 800fcb4:	4621      	mov	r1, r4
 800fcb6:	f7fd ff6f 	bl	800db98 <_Bfree>
 800fcba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	6013      	str	r3, [r2, #0]
 800fcc0:	25a3      	movs	r5, #163	@ 0xa3
 800fcc2:	e793      	b.n	800fbec <__gethex+0xf8>
 800fcc4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fcc8:	2a2e      	cmp	r2, #46	@ 0x2e
 800fcca:	d012      	beq.n	800fcf2 <__gethex+0x1fe>
 800fccc:	2b20      	cmp	r3, #32
 800fcce:	d104      	bne.n	800fcda <__gethex+0x1e6>
 800fcd0:	f845 bb04 	str.w	fp, [r5], #4
 800fcd4:	f04f 0b00 	mov.w	fp, #0
 800fcd8:	465b      	mov	r3, fp
 800fcda:	7830      	ldrb	r0, [r6, #0]
 800fcdc:	9303      	str	r3, [sp, #12]
 800fcde:	f7ff fef3 	bl	800fac8 <__hexdig_fun>
 800fce2:	9b03      	ldr	r3, [sp, #12]
 800fce4:	f000 000f 	and.w	r0, r0, #15
 800fce8:	4098      	lsls	r0, r3
 800fcea:	ea4b 0b00 	orr.w	fp, fp, r0
 800fcee:	3304      	adds	r3, #4
 800fcf0:	e7ae      	b.n	800fc50 <__gethex+0x15c>
 800fcf2:	45b1      	cmp	r9, r6
 800fcf4:	d8ea      	bhi.n	800fccc <__gethex+0x1d8>
 800fcf6:	492b      	ldr	r1, [pc, #172]	@ (800fda4 <__gethex+0x2b0>)
 800fcf8:	9303      	str	r3, [sp, #12]
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	4630      	mov	r0, r6
 800fcfe:	f7ff fe03 	bl	800f908 <strncmp>
 800fd02:	9b03      	ldr	r3, [sp, #12]
 800fd04:	2800      	cmp	r0, #0
 800fd06:	d1e1      	bne.n	800fccc <__gethex+0x1d8>
 800fd08:	e7a2      	b.n	800fc50 <__gethex+0x15c>
 800fd0a:	1ea9      	subs	r1, r5, #2
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	f7fe fb94 	bl	800e43a <__any_on>
 800fd12:	2800      	cmp	r0, #0
 800fd14:	d0c2      	beq.n	800fc9c <__gethex+0x1a8>
 800fd16:	f04f 0903 	mov.w	r9, #3
 800fd1a:	e7c1      	b.n	800fca0 <__gethex+0x1ac>
 800fd1c:	da09      	bge.n	800fd32 <__gethex+0x23e>
 800fd1e:	1b75      	subs	r5, r6, r5
 800fd20:	4621      	mov	r1, r4
 800fd22:	9801      	ldr	r0, [sp, #4]
 800fd24:	462a      	mov	r2, r5
 800fd26:	f7fe f94f 	bl	800dfc8 <__lshift>
 800fd2a:	1b7f      	subs	r7, r7, r5
 800fd2c:	4604      	mov	r4, r0
 800fd2e:	f100 0a14 	add.w	sl, r0, #20
 800fd32:	f04f 0900 	mov.w	r9, #0
 800fd36:	e7b8      	b.n	800fcaa <__gethex+0x1b6>
 800fd38:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fd3c:	42bd      	cmp	r5, r7
 800fd3e:	dd6f      	ble.n	800fe20 <__gethex+0x32c>
 800fd40:	1bed      	subs	r5, r5, r7
 800fd42:	42ae      	cmp	r6, r5
 800fd44:	dc34      	bgt.n	800fdb0 <__gethex+0x2bc>
 800fd46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fd4a:	2b02      	cmp	r3, #2
 800fd4c:	d022      	beq.n	800fd94 <__gethex+0x2a0>
 800fd4e:	2b03      	cmp	r3, #3
 800fd50:	d024      	beq.n	800fd9c <__gethex+0x2a8>
 800fd52:	2b01      	cmp	r3, #1
 800fd54:	d115      	bne.n	800fd82 <__gethex+0x28e>
 800fd56:	42ae      	cmp	r6, r5
 800fd58:	d113      	bne.n	800fd82 <__gethex+0x28e>
 800fd5a:	2e01      	cmp	r6, #1
 800fd5c:	d10b      	bne.n	800fd76 <__gethex+0x282>
 800fd5e:	9a02      	ldr	r2, [sp, #8]
 800fd60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fd64:	6013      	str	r3, [r2, #0]
 800fd66:	2301      	movs	r3, #1
 800fd68:	6123      	str	r3, [r4, #16]
 800fd6a:	f8ca 3000 	str.w	r3, [sl]
 800fd6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd70:	2562      	movs	r5, #98	@ 0x62
 800fd72:	601c      	str	r4, [r3, #0]
 800fd74:	e73a      	b.n	800fbec <__gethex+0xf8>
 800fd76:	1e71      	subs	r1, r6, #1
 800fd78:	4620      	mov	r0, r4
 800fd7a:	f7fe fb5e 	bl	800e43a <__any_on>
 800fd7e:	2800      	cmp	r0, #0
 800fd80:	d1ed      	bne.n	800fd5e <__gethex+0x26a>
 800fd82:	9801      	ldr	r0, [sp, #4]
 800fd84:	4621      	mov	r1, r4
 800fd86:	f7fd ff07 	bl	800db98 <_Bfree>
 800fd8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	6013      	str	r3, [r2, #0]
 800fd90:	2550      	movs	r5, #80	@ 0x50
 800fd92:	e72b      	b.n	800fbec <__gethex+0xf8>
 800fd94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d1f3      	bne.n	800fd82 <__gethex+0x28e>
 800fd9a:	e7e0      	b.n	800fd5e <__gethex+0x26a>
 800fd9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d1dd      	bne.n	800fd5e <__gethex+0x26a>
 800fda2:	e7ee      	b.n	800fd82 <__gethex+0x28e>
 800fda4:	08010900 	.word	0x08010900
 800fda8:	08010799 	.word	0x08010799
 800fdac:	08010aae 	.word	0x08010aae
 800fdb0:	1e6f      	subs	r7, r5, #1
 800fdb2:	f1b9 0f00 	cmp.w	r9, #0
 800fdb6:	d130      	bne.n	800fe1a <__gethex+0x326>
 800fdb8:	b127      	cbz	r7, 800fdc4 <__gethex+0x2d0>
 800fdba:	4639      	mov	r1, r7
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	f7fe fb3c 	bl	800e43a <__any_on>
 800fdc2:	4681      	mov	r9, r0
 800fdc4:	117a      	asrs	r2, r7, #5
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fdcc:	f007 071f 	and.w	r7, r7, #31
 800fdd0:	40bb      	lsls	r3, r7
 800fdd2:	4213      	tst	r3, r2
 800fdd4:	4629      	mov	r1, r5
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	bf18      	it	ne
 800fdda:	f049 0902 	orrne.w	r9, r9, #2
 800fdde:	f7ff fe21 	bl	800fa24 <rshift>
 800fde2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fde6:	1b76      	subs	r6, r6, r5
 800fde8:	2502      	movs	r5, #2
 800fdea:	f1b9 0f00 	cmp.w	r9, #0
 800fdee:	d047      	beq.n	800fe80 <__gethex+0x38c>
 800fdf0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fdf4:	2b02      	cmp	r3, #2
 800fdf6:	d015      	beq.n	800fe24 <__gethex+0x330>
 800fdf8:	2b03      	cmp	r3, #3
 800fdfa:	d017      	beq.n	800fe2c <__gethex+0x338>
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d109      	bne.n	800fe14 <__gethex+0x320>
 800fe00:	f019 0f02 	tst.w	r9, #2
 800fe04:	d006      	beq.n	800fe14 <__gethex+0x320>
 800fe06:	f8da 3000 	ldr.w	r3, [sl]
 800fe0a:	ea49 0903 	orr.w	r9, r9, r3
 800fe0e:	f019 0f01 	tst.w	r9, #1
 800fe12:	d10e      	bne.n	800fe32 <__gethex+0x33e>
 800fe14:	f045 0510 	orr.w	r5, r5, #16
 800fe18:	e032      	b.n	800fe80 <__gethex+0x38c>
 800fe1a:	f04f 0901 	mov.w	r9, #1
 800fe1e:	e7d1      	b.n	800fdc4 <__gethex+0x2d0>
 800fe20:	2501      	movs	r5, #1
 800fe22:	e7e2      	b.n	800fdea <__gethex+0x2f6>
 800fe24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe26:	f1c3 0301 	rsb	r3, r3, #1
 800fe2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fe2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d0f0      	beq.n	800fe14 <__gethex+0x320>
 800fe32:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fe36:	f104 0314 	add.w	r3, r4, #20
 800fe3a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fe3e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fe42:	f04f 0c00 	mov.w	ip, #0
 800fe46:	4618      	mov	r0, r3
 800fe48:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe4c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fe50:	d01b      	beq.n	800fe8a <__gethex+0x396>
 800fe52:	3201      	adds	r2, #1
 800fe54:	6002      	str	r2, [r0, #0]
 800fe56:	2d02      	cmp	r5, #2
 800fe58:	f104 0314 	add.w	r3, r4, #20
 800fe5c:	d13c      	bne.n	800fed8 <__gethex+0x3e4>
 800fe5e:	f8d8 2000 	ldr.w	r2, [r8]
 800fe62:	3a01      	subs	r2, #1
 800fe64:	42b2      	cmp	r2, r6
 800fe66:	d109      	bne.n	800fe7c <__gethex+0x388>
 800fe68:	1171      	asrs	r1, r6, #5
 800fe6a:	2201      	movs	r2, #1
 800fe6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fe70:	f006 061f 	and.w	r6, r6, #31
 800fe74:	fa02 f606 	lsl.w	r6, r2, r6
 800fe78:	421e      	tst	r6, r3
 800fe7a:	d13a      	bne.n	800fef2 <__gethex+0x3fe>
 800fe7c:	f045 0520 	orr.w	r5, r5, #32
 800fe80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe82:	601c      	str	r4, [r3, #0]
 800fe84:	9b02      	ldr	r3, [sp, #8]
 800fe86:	601f      	str	r7, [r3, #0]
 800fe88:	e6b0      	b.n	800fbec <__gethex+0xf8>
 800fe8a:	4299      	cmp	r1, r3
 800fe8c:	f843 cc04 	str.w	ip, [r3, #-4]
 800fe90:	d8d9      	bhi.n	800fe46 <__gethex+0x352>
 800fe92:	68a3      	ldr	r3, [r4, #8]
 800fe94:	459b      	cmp	fp, r3
 800fe96:	db17      	blt.n	800fec8 <__gethex+0x3d4>
 800fe98:	6861      	ldr	r1, [r4, #4]
 800fe9a:	9801      	ldr	r0, [sp, #4]
 800fe9c:	3101      	adds	r1, #1
 800fe9e:	f7fd fe3b 	bl	800db18 <_Balloc>
 800fea2:	4681      	mov	r9, r0
 800fea4:	b918      	cbnz	r0, 800feae <__gethex+0x3ba>
 800fea6:	4b1a      	ldr	r3, [pc, #104]	@ (800ff10 <__gethex+0x41c>)
 800fea8:	4602      	mov	r2, r0
 800feaa:	2184      	movs	r1, #132	@ 0x84
 800feac:	e6c5      	b.n	800fc3a <__gethex+0x146>
 800feae:	6922      	ldr	r2, [r4, #16]
 800feb0:	3202      	adds	r2, #2
 800feb2:	f104 010c 	add.w	r1, r4, #12
 800feb6:	0092      	lsls	r2, r2, #2
 800feb8:	300c      	adds	r0, #12
 800feba:	f7ff fd69 	bl	800f990 <memcpy>
 800febe:	4621      	mov	r1, r4
 800fec0:	9801      	ldr	r0, [sp, #4]
 800fec2:	f7fd fe69 	bl	800db98 <_Bfree>
 800fec6:	464c      	mov	r4, r9
 800fec8:	6923      	ldr	r3, [r4, #16]
 800feca:	1c5a      	adds	r2, r3, #1
 800fecc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fed0:	6122      	str	r2, [r4, #16]
 800fed2:	2201      	movs	r2, #1
 800fed4:	615a      	str	r2, [r3, #20]
 800fed6:	e7be      	b.n	800fe56 <__gethex+0x362>
 800fed8:	6922      	ldr	r2, [r4, #16]
 800feda:	455a      	cmp	r2, fp
 800fedc:	dd0b      	ble.n	800fef6 <__gethex+0x402>
 800fede:	2101      	movs	r1, #1
 800fee0:	4620      	mov	r0, r4
 800fee2:	f7ff fd9f 	bl	800fa24 <rshift>
 800fee6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800feea:	3701      	adds	r7, #1
 800feec:	42bb      	cmp	r3, r7
 800feee:	f6ff aee0 	blt.w	800fcb2 <__gethex+0x1be>
 800fef2:	2501      	movs	r5, #1
 800fef4:	e7c2      	b.n	800fe7c <__gethex+0x388>
 800fef6:	f016 061f 	ands.w	r6, r6, #31
 800fefa:	d0fa      	beq.n	800fef2 <__gethex+0x3fe>
 800fefc:	4453      	add	r3, sl
 800fefe:	f1c6 0620 	rsb	r6, r6, #32
 800ff02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ff06:	f7fd fef9 	bl	800dcfc <__hi0bits>
 800ff0a:	42b0      	cmp	r0, r6
 800ff0c:	dbe7      	blt.n	800fede <__gethex+0x3ea>
 800ff0e:	e7f0      	b.n	800fef2 <__gethex+0x3fe>
 800ff10:	08010799 	.word	0x08010799

0800ff14 <L_shift>:
 800ff14:	f1c2 0208 	rsb	r2, r2, #8
 800ff18:	0092      	lsls	r2, r2, #2
 800ff1a:	b570      	push	{r4, r5, r6, lr}
 800ff1c:	f1c2 0620 	rsb	r6, r2, #32
 800ff20:	6843      	ldr	r3, [r0, #4]
 800ff22:	6804      	ldr	r4, [r0, #0]
 800ff24:	fa03 f506 	lsl.w	r5, r3, r6
 800ff28:	432c      	orrs	r4, r5
 800ff2a:	40d3      	lsrs	r3, r2
 800ff2c:	6004      	str	r4, [r0, #0]
 800ff2e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ff32:	4288      	cmp	r0, r1
 800ff34:	d3f4      	bcc.n	800ff20 <L_shift+0xc>
 800ff36:	bd70      	pop	{r4, r5, r6, pc}

0800ff38 <__match>:
 800ff38:	b530      	push	{r4, r5, lr}
 800ff3a:	6803      	ldr	r3, [r0, #0]
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff42:	b914      	cbnz	r4, 800ff4a <__match+0x12>
 800ff44:	6003      	str	r3, [r0, #0]
 800ff46:	2001      	movs	r0, #1
 800ff48:	bd30      	pop	{r4, r5, pc}
 800ff4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff4e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ff52:	2d19      	cmp	r5, #25
 800ff54:	bf98      	it	ls
 800ff56:	3220      	addls	r2, #32
 800ff58:	42a2      	cmp	r2, r4
 800ff5a:	d0f0      	beq.n	800ff3e <__match+0x6>
 800ff5c:	2000      	movs	r0, #0
 800ff5e:	e7f3      	b.n	800ff48 <__match+0x10>

0800ff60 <__hexnan>:
 800ff60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff64:	680b      	ldr	r3, [r1, #0]
 800ff66:	6801      	ldr	r1, [r0, #0]
 800ff68:	115e      	asrs	r6, r3, #5
 800ff6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ff6e:	f013 031f 	ands.w	r3, r3, #31
 800ff72:	b087      	sub	sp, #28
 800ff74:	bf18      	it	ne
 800ff76:	3604      	addne	r6, #4
 800ff78:	2500      	movs	r5, #0
 800ff7a:	1f37      	subs	r7, r6, #4
 800ff7c:	4682      	mov	sl, r0
 800ff7e:	4690      	mov	r8, r2
 800ff80:	9301      	str	r3, [sp, #4]
 800ff82:	f846 5c04 	str.w	r5, [r6, #-4]
 800ff86:	46b9      	mov	r9, r7
 800ff88:	463c      	mov	r4, r7
 800ff8a:	9502      	str	r5, [sp, #8]
 800ff8c:	46ab      	mov	fp, r5
 800ff8e:	784a      	ldrb	r2, [r1, #1]
 800ff90:	1c4b      	adds	r3, r1, #1
 800ff92:	9303      	str	r3, [sp, #12]
 800ff94:	b342      	cbz	r2, 800ffe8 <__hexnan+0x88>
 800ff96:	4610      	mov	r0, r2
 800ff98:	9105      	str	r1, [sp, #20]
 800ff9a:	9204      	str	r2, [sp, #16]
 800ff9c:	f7ff fd94 	bl	800fac8 <__hexdig_fun>
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	d151      	bne.n	8010048 <__hexnan+0xe8>
 800ffa4:	9a04      	ldr	r2, [sp, #16]
 800ffa6:	9905      	ldr	r1, [sp, #20]
 800ffa8:	2a20      	cmp	r2, #32
 800ffaa:	d818      	bhi.n	800ffde <__hexnan+0x7e>
 800ffac:	9b02      	ldr	r3, [sp, #8]
 800ffae:	459b      	cmp	fp, r3
 800ffb0:	dd13      	ble.n	800ffda <__hexnan+0x7a>
 800ffb2:	454c      	cmp	r4, r9
 800ffb4:	d206      	bcs.n	800ffc4 <__hexnan+0x64>
 800ffb6:	2d07      	cmp	r5, #7
 800ffb8:	dc04      	bgt.n	800ffc4 <__hexnan+0x64>
 800ffba:	462a      	mov	r2, r5
 800ffbc:	4649      	mov	r1, r9
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	f7ff ffa8 	bl	800ff14 <L_shift>
 800ffc4:	4544      	cmp	r4, r8
 800ffc6:	d952      	bls.n	801006e <__hexnan+0x10e>
 800ffc8:	2300      	movs	r3, #0
 800ffca:	f1a4 0904 	sub.w	r9, r4, #4
 800ffce:	f844 3c04 	str.w	r3, [r4, #-4]
 800ffd2:	f8cd b008 	str.w	fp, [sp, #8]
 800ffd6:	464c      	mov	r4, r9
 800ffd8:	461d      	mov	r5, r3
 800ffda:	9903      	ldr	r1, [sp, #12]
 800ffdc:	e7d7      	b.n	800ff8e <__hexnan+0x2e>
 800ffde:	2a29      	cmp	r2, #41	@ 0x29
 800ffe0:	d157      	bne.n	8010092 <__hexnan+0x132>
 800ffe2:	3102      	adds	r1, #2
 800ffe4:	f8ca 1000 	str.w	r1, [sl]
 800ffe8:	f1bb 0f00 	cmp.w	fp, #0
 800ffec:	d051      	beq.n	8010092 <__hexnan+0x132>
 800ffee:	454c      	cmp	r4, r9
 800fff0:	d206      	bcs.n	8010000 <__hexnan+0xa0>
 800fff2:	2d07      	cmp	r5, #7
 800fff4:	dc04      	bgt.n	8010000 <__hexnan+0xa0>
 800fff6:	462a      	mov	r2, r5
 800fff8:	4649      	mov	r1, r9
 800fffa:	4620      	mov	r0, r4
 800fffc:	f7ff ff8a 	bl	800ff14 <L_shift>
 8010000:	4544      	cmp	r4, r8
 8010002:	d936      	bls.n	8010072 <__hexnan+0x112>
 8010004:	f1a8 0204 	sub.w	r2, r8, #4
 8010008:	4623      	mov	r3, r4
 801000a:	f853 1b04 	ldr.w	r1, [r3], #4
 801000e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010012:	429f      	cmp	r7, r3
 8010014:	d2f9      	bcs.n	801000a <__hexnan+0xaa>
 8010016:	1b3b      	subs	r3, r7, r4
 8010018:	f023 0303 	bic.w	r3, r3, #3
 801001c:	3304      	adds	r3, #4
 801001e:	3401      	adds	r4, #1
 8010020:	3e03      	subs	r6, #3
 8010022:	42b4      	cmp	r4, r6
 8010024:	bf88      	it	hi
 8010026:	2304      	movhi	r3, #4
 8010028:	4443      	add	r3, r8
 801002a:	2200      	movs	r2, #0
 801002c:	f843 2b04 	str.w	r2, [r3], #4
 8010030:	429f      	cmp	r7, r3
 8010032:	d2fb      	bcs.n	801002c <__hexnan+0xcc>
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	b91b      	cbnz	r3, 8010040 <__hexnan+0xe0>
 8010038:	4547      	cmp	r7, r8
 801003a:	d128      	bne.n	801008e <__hexnan+0x12e>
 801003c:	2301      	movs	r3, #1
 801003e:	603b      	str	r3, [r7, #0]
 8010040:	2005      	movs	r0, #5
 8010042:	b007      	add	sp, #28
 8010044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010048:	3501      	adds	r5, #1
 801004a:	2d08      	cmp	r5, #8
 801004c:	f10b 0b01 	add.w	fp, fp, #1
 8010050:	dd06      	ble.n	8010060 <__hexnan+0x100>
 8010052:	4544      	cmp	r4, r8
 8010054:	d9c1      	bls.n	800ffda <__hexnan+0x7a>
 8010056:	2300      	movs	r3, #0
 8010058:	f844 3c04 	str.w	r3, [r4, #-4]
 801005c:	2501      	movs	r5, #1
 801005e:	3c04      	subs	r4, #4
 8010060:	6822      	ldr	r2, [r4, #0]
 8010062:	f000 000f 	and.w	r0, r0, #15
 8010066:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801006a:	6020      	str	r0, [r4, #0]
 801006c:	e7b5      	b.n	800ffda <__hexnan+0x7a>
 801006e:	2508      	movs	r5, #8
 8010070:	e7b3      	b.n	800ffda <__hexnan+0x7a>
 8010072:	9b01      	ldr	r3, [sp, #4]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d0dd      	beq.n	8010034 <__hexnan+0xd4>
 8010078:	f1c3 0320 	rsb	r3, r3, #32
 801007c:	f04f 32ff 	mov.w	r2, #4294967295
 8010080:	40da      	lsrs	r2, r3
 8010082:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010086:	4013      	ands	r3, r2
 8010088:	f846 3c04 	str.w	r3, [r6, #-4]
 801008c:	e7d2      	b.n	8010034 <__hexnan+0xd4>
 801008e:	3f04      	subs	r7, #4
 8010090:	e7d0      	b.n	8010034 <__hexnan+0xd4>
 8010092:	2004      	movs	r0, #4
 8010094:	e7d5      	b.n	8010042 <__hexnan+0xe2>

08010096 <__ascii_mbtowc>:
 8010096:	b082      	sub	sp, #8
 8010098:	b901      	cbnz	r1, 801009c <__ascii_mbtowc+0x6>
 801009a:	a901      	add	r1, sp, #4
 801009c:	b142      	cbz	r2, 80100b0 <__ascii_mbtowc+0x1a>
 801009e:	b14b      	cbz	r3, 80100b4 <__ascii_mbtowc+0x1e>
 80100a0:	7813      	ldrb	r3, [r2, #0]
 80100a2:	600b      	str	r3, [r1, #0]
 80100a4:	7812      	ldrb	r2, [r2, #0]
 80100a6:	1e10      	subs	r0, r2, #0
 80100a8:	bf18      	it	ne
 80100aa:	2001      	movne	r0, #1
 80100ac:	b002      	add	sp, #8
 80100ae:	4770      	bx	lr
 80100b0:	4610      	mov	r0, r2
 80100b2:	e7fb      	b.n	80100ac <__ascii_mbtowc+0x16>
 80100b4:	f06f 0001 	mvn.w	r0, #1
 80100b8:	e7f8      	b.n	80100ac <__ascii_mbtowc+0x16>

080100ba <_realloc_r>:
 80100ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100be:	4680      	mov	r8, r0
 80100c0:	4615      	mov	r5, r2
 80100c2:	460c      	mov	r4, r1
 80100c4:	b921      	cbnz	r1, 80100d0 <_realloc_r+0x16>
 80100c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100ca:	4611      	mov	r1, r2
 80100cc:	f7fd bc98 	b.w	800da00 <_malloc_r>
 80100d0:	b92a      	cbnz	r2, 80100de <_realloc_r+0x24>
 80100d2:	f7fd fc21 	bl	800d918 <_free_r>
 80100d6:	2400      	movs	r4, #0
 80100d8:	4620      	mov	r0, r4
 80100da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100de:	f000 f840 	bl	8010162 <_malloc_usable_size_r>
 80100e2:	4285      	cmp	r5, r0
 80100e4:	4606      	mov	r6, r0
 80100e6:	d802      	bhi.n	80100ee <_realloc_r+0x34>
 80100e8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80100ec:	d8f4      	bhi.n	80100d8 <_realloc_r+0x1e>
 80100ee:	4629      	mov	r1, r5
 80100f0:	4640      	mov	r0, r8
 80100f2:	f7fd fc85 	bl	800da00 <_malloc_r>
 80100f6:	4607      	mov	r7, r0
 80100f8:	2800      	cmp	r0, #0
 80100fa:	d0ec      	beq.n	80100d6 <_realloc_r+0x1c>
 80100fc:	42b5      	cmp	r5, r6
 80100fe:	462a      	mov	r2, r5
 8010100:	4621      	mov	r1, r4
 8010102:	bf28      	it	cs
 8010104:	4632      	movcs	r2, r6
 8010106:	f7ff fc43 	bl	800f990 <memcpy>
 801010a:	4621      	mov	r1, r4
 801010c:	4640      	mov	r0, r8
 801010e:	f7fd fc03 	bl	800d918 <_free_r>
 8010112:	463c      	mov	r4, r7
 8010114:	e7e0      	b.n	80100d8 <_realloc_r+0x1e>

08010116 <__ascii_wctomb>:
 8010116:	4603      	mov	r3, r0
 8010118:	4608      	mov	r0, r1
 801011a:	b141      	cbz	r1, 801012e <__ascii_wctomb+0x18>
 801011c:	2aff      	cmp	r2, #255	@ 0xff
 801011e:	d904      	bls.n	801012a <__ascii_wctomb+0x14>
 8010120:	228a      	movs	r2, #138	@ 0x8a
 8010122:	601a      	str	r2, [r3, #0]
 8010124:	f04f 30ff 	mov.w	r0, #4294967295
 8010128:	4770      	bx	lr
 801012a:	700a      	strb	r2, [r1, #0]
 801012c:	2001      	movs	r0, #1
 801012e:	4770      	bx	lr

08010130 <fiprintf>:
 8010130:	b40e      	push	{r1, r2, r3}
 8010132:	b503      	push	{r0, r1, lr}
 8010134:	4601      	mov	r1, r0
 8010136:	ab03      	add	r3, sp, #12
 8010138:	4805      	ldr	r0, [pc, #20]	@ (8010150 <fiprintf+0x20>)
 801013a:	f853 2b04 	ldr.w	r2, [r3], #4
 801013e:	6800      	ldr	r0, [r0, #0]
 8010140:	9301      	str	r3, [sp, #4]
 8010142:	f7ff f9a1 	bl	800f488 <_vfiprintf_r>
 8010146:	b002      	add	sp, #8
 8010148:	f85d eb04 	ldr.w	lr, [sp], #4
 801014c:	b003      	add	sp, #12
 801014e:	4770      	bx	lr
 8010150:	20000018 	.word	0x20000018

08010154 <abort>:
 8010154:	b508      	push	{r3, lr}
 8010156:	2006      	movs	r0, #6
 8010158:	f000 f834 	bl	80101c4 <raise>
 801015c:	2001      	movs	r0, #1
 801015e:	f7f2 fc73 	bl	8002a48 <_exit>

08010162 <_malloc_usable_size_r>:
 8010162:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010166:	1f18      	subs	r0, r3, #4
 8010168:	2b00      	cmp	r3, #0
 801016a:	bfbc      	itt	lt
 801016c:	580b      	ldrlt	r3, [r1, r0]
 801016e:	18c0      	addlt	r0, r0, r3
 8010170:	4770      	bx	lr

08010172 <_raise_r>:
 8010172:	291f      	cmp	r1, #31
 8010174:	b538      	push	{r3, r4, r5, lr}
 8010176:	4605      	mov	r5, r0
 8010178:	460c      	mov	r4, r1
 801017a:	d904      	bls.n	8010186 <_raise_r+0x14>
 801017c:	2316      	movs	r3, #22
 801017e:	6003      	str	r3, [r0, #0]
 8010180:	f04f 30ff 	mov.w	r0, #4294967295
 8010184:	bd38      	pop	{r3, r4, r5, pc}
 8010186:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010188:	b112      	cbz	r2, 8010190 <_raise_r+0x1e>
 801018a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801018e:	b94b      	cbnz	r3, 80101a4 <_raise_r+0x32>
 8010190:	4628      	mov	r0, r5
 8010192:	f000 f831 	bl	80101f8 <_getpid_r>
 8010196:	4622      	mov	r2, r4
 8010198:	4601      	mov	r1, r0
 801019a:	4628      	mov	r0, r5
 801019c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101a0:	f000 b818 	b.w	80101d4 <_kill_r>
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	d00a      	beq.n	80101be <_raise_r+0x4c>
 80101a8:	1c59      	adds	r1, r3, #1
 80101aa:	d103      	bne.n	80101b4 <_raise_r+0x42>
 80101ac:	2316      	movs	r3, #22
 80101ae:	6003      	str	r3, [r0, #0]
 80101b0:	2001      	movs	r0, #1
 80101b2:	e7e7      	b.n	8010184 <_raise_r+0x12>
 80101b4:	2100      	movs	r1, #0
 80101b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80101ba:	4620      	mov	r0, r4
 80101bc:	4798      	blx	r3
 80101be:	2000      	movs	r0, #0
 80101c0:	e7e0      	b.n	8010184 <_raise_r+0x12>
	...

080101c4 <raise>:
 80101c4:	4b02      	ldr	r3, [pc, #8]	@ (80101d0 <raise+0xc>)
 80101c6:	4601      	mov	r1, r0
 80101c8:	6818      	ldr	r0, [r3, #0]
 80101ca:	f7ff bfd2 	b.w	8010172 <_raise_r>
 80101ce:	bf00      	nop
 80101d0:	20000018 	.word	0x20000018

080101d4 <_kill_r>:
 80101d4:	b538      	push	{r3, r4, r5, lr}
 80101d6:	4d07      	ldr	r5, [pc, #28]	@ (80101f4 <_kill_r+0x20>)
 80101d8:	2300      	movs	r3, #0
 80101da:	4604      	mov	r4, r0
 80101dc:	4608      	mov	r0, r1
 80101de:	4611      	mov	r1, r2
 80101e0:	602b      	str	r3, [r5, #0]
 80101e2:	f7f2 fc21 	bl	8002a28 <_kill>
 80101e6:	1c43      	adds	r3, r0, #1
 80101e8:	d102      	bne.n	80101f0 <_kill_r+0x1c>
 80101ea:	682b      	ldr	r3, [r5, #0]
 80101ec:	b103      	cbz	r3, 80101f0 <_kill_r+0x1c>
 80101ee:	6023      	str	r3, [r4, #0]
 80101f0:	bd38      	pop	{r3, r4, r5, pc}
 80101f2:	bf00      	nop
 80101f4:	20000774 	.word	0x20000774

080101f8 <_getpid_r>:
 80101f8:	f7f2 bc0e 	b.w	8002a18 <_getpid>

080101fc <_init>:
 80101fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101fe:	bf00      	nop
 8010200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010202:	bc08      	pop	{r3}
 8010204:	469e      	mov	lr, r3
 8010206:	4770      	bx	lr

08010208 <_fini>:
 8010208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801020a:	bf00      	nop
 801020c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801020e:	bc08      	pop	{r3}
 8010210:	469e      	mov	lr, r3
 8010212:	4770      	bx	lr
